<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Nine Nines</title>
    <link>https://ninenines.eu/docs/</link>
    <description>Recent content in Docs on Nine Nines</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ninenines.eu/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installation</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/installation/</guid>
      <description>On Unix Erlang.mk requires GNU Make to be installed. While it will currently work with GNU Make 3.81, support for this version is deprecated and will be removed in 2017. We recommend GNU Make 4.1 or later.
Git and Erlang/OTP must also be installed.
Some functionality requires that Autoconf 2.59 or later be installed, in order to compile Erlang/OTP. Erlang/OTP may have further requirements depending on your needs.
Some packages may require additional libraries.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/guide/introduction/</guid>
      <description>Gun is an HTTP client for Erlang/OTP.
Gun supports the HTTP/2, HTTP/1.1 and Websocket protocols.
Prerequisites Knowledge of Erlang, but also of the HTTP/1.1, HTTP/2 and Websocket protocols is required in order to read this guide.
Supported platforms Gun is tested and supported on Linux, FreeBSD, Windows and OSX.
Gun is developed for Erlang/OTP 19.0 and newer.
License Gun uses the ISC License.
Copyright (c) 2013-2018, Lo誰c Hoguin &amp;lt;essen@ninenines.eu&amp;gt; Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/guide/introduction/</guid>
      <description>Gun is an HTTP client for Erlang/OTP.
Gun supports the HTTP/2, HTTP/1.1 and Websocket protocols.
Prerequisites Knowledge of Erlang, but also of the HTTP/1.1, HTTP/2 and Websocket protocols is required in order to read this guide.
Supported platforms Gun is tested and supported on Linux, FreeBSD, Windows and OSX.
Gun is developed for Erlang/OTP 19.0 and newer.
License Gun uses the ISC License.
Copyright (c) 2013-2018, Lo誰c Hoguin &amp;lt;essen@ninenines.eu&amp;gt; Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/guide/introduction/</guid>
      <description>Gun is an HTTP client for Erlang/OTP.
Gun supports the HTTP/2, HTTP/1.1 and Websocket protocols.
Prerequisites Knowledge of Erlang, but also of the HTTP/1.1, HTTP/2 and Websocket protocols is required in order to read this guide.
Supported platforms Gun is tested and supported on Linux, FreeBSD, Windows and OSX.
Gun is developed for Erlang/OTP 19.0 and newer.
License Gun uses the ISC License.
Copyright (c) 2013-2018, Lo誰c Hoguin &amp;lt;essen@ninenines.eu&amp;gt; Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/guide/introduction/</guid>
      <description>Gun is an HTTP client for Erlang/OTP.
Gun supports the HTTP/2, HTTP/1.1 and Websocket protocols.
Prerequisites Knowledge of Erlang, but also of the HTTP/1.1, HTTP/2 and Websocket protocols is required in order to read this guide.
Supported platforms Gun is tested and supported on Linux, FreeBSD, Windows and OSX.
Gun is developed for Erlang/OTP 19.0 and newer.
License Gun uses the ISC License.
Copyright (c) 2013-2018, Lo誰c Hoguin &amp;lt;essen@ninenines.eu&amp;gt; Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/guide/introduction/</guid>
      <description>Ranch is a socket acceptor pool for TCP protocols.
Ranch aims to provide everything you need to accept TCP connections with a small code base and low latency while being easy to use directly as an application or to embed into your own.
Prerequisites It is assumed the developer already knows Erlang and has some experience with socket programming and TCP protocols.
Supported platforms Ranch is tested and supported on Linux.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/guide/introduction/</guid>
      <description>Ranch is a socket acceptor pool for TCP protocols.
Ranch aims to provide everything you need to accept TCP connections with a small code base and low latency while being easy to use directly as an application or to embed into your own.
Prerequisites It is assumed the developer already knows Erlang and has some experience with socket programming and TCP protocols.
Supported platforms Ranch is tested and supported on Linux, FreeBSD, OSX and Windows.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/guide/introduction/</guid>
      <description>Ranch is a socket acceptor pool for TCP protocols.
Ranch aims to provide everything you need to accept TCP connections with a small code base and low latency while being easy to use directly as an application or to embed into your own.
Prerequisites It is assumed the developer already knows Erlang and has some experience with socket programming and TCP protocols.
Supported platforms Ranch is tested and supported on Linux, FreeBSD, OSX and Windows.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/guide/introduction/</guid>
      <description>Ranch is a socket acceptor pool for TCP protocols.
Ranch aims to provide everything you need to accept TCP connections with a small code base and low latency while being easy to use directly as an application or to embed into your own.
Prerequisites It is assumed the developer already knows Erlang and has some experience with socket programming and TCP protocols.
Supported platforms Ranch is tested and supported on Linux, FreeBSD, OSX and Windows.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/introduction/</guid>
      <description>Ranch is a socket acceptor pool for TCP protocols.
Ranch aims to provide everything you need to accept TCP connections with a small code base and low latency while being easy to use directly as an application or to embed into your own.
Prerequisites It is assumed the developer already knows Erlang and has some experience with socket programming and TCP protocols.
Supported platforms Ranch is tested and supported on Linux, FreeBSD, OSX and Windows.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/introduction/</guid>
      <description>Ranch is a socket acceptor pool for TCP protocols.
Ranch aims to provide everything you need to accept TCP connections with a small code base and low latency while being easy to use directly as an application or to embed into your own.
Prerequisites It is assumed the developer already knows Erlang and has some experience with socket programming and TCP protocols.
Supported platforms Ranch is tested and supported on Linux, FreeBSD, OSX and Windows.</description>
    </item>
    
    <item>
      <title>The modern Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/modern_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/modern_web/</guid>
      <description>Cowboy is a server for the modern Web. This chapter explains what it means and details all the standards involved.
Cowboy supports all the standards listed in this document.
HTTP/2 HTTP/2 is the most efficient protocol for consuming Web services. It enables clients to keep a connection open for long periods of time; to send requests concurrently; to reduce the size of requests through HTTP headers compression; and more. The protocol is binary, greatly reducing the resources needed to parse it.</description>
    </item>
    
    <item>
      <title>The modern Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/modern_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/modern_web/</guid>
      <description>Cowboy is a server for the modern Web. This chapter explains what it means and details all the standards involved.
Cowboy supports all the standards listed in this document.
HTTP/2 HTTP/2 is the most efficient protocol for consuming Web services. It enables clients to keep a connection open for long periods of time; to send requests concurrently; to reduce the size of requests through HTTP headers compression; and more. The protocol is binary, greatly reducing the resources needed to parse it.</description>
    </item>
    
    <item>
      <title>The modern Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/modern_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/modern_web/</guid>
      <description>Cowboy is a server for the modern Web. This chapter explains what it means and details all the standards involved.
Cowboy supports all the standards listed in this document.
HTTP/2 HTTP/2 is the most efficient protocol for consuming Web services. It enables clients to keep a connection open for long periods of time; to send requests concurrently; to reduce the size of requests through HTTP headers compression; and more. The protocol is binary, greatly reducing the resources needed to parse it.</description>
    </item>
    
    <item>
      <title>The modern Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/modern_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/modern_web/</guid>
      <description>Cowboy is a server for the modern Web. This chapter explains what it means and details all the standards involved.
Cowboy supports all the standards listed in this document.
HTTP/2 HTTP/2 is the most efficient protocol for consuming Web services. It enables clients to keep a connection open for long periods of time; to send requests concurrently; to reduce the size of requests through HTTP headers compression; and more. The protocol is binary, greatly reducing the resources needed to parse it.</description>
    </item>
    
    <item>
      <title>The modern Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/modern_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/modern_web/</guid>
      <description>Cowboy is a server for the modern Web. This chapter explains what it means and details all the standards involved.
Cowboy supports all the standards listed in this document.
HTTP/2 HTTP/2 is the most efficient protocol for consuming Web services. It enables clients to keep a connection open for long periods of time; to send requests concurrently; to reduce the size of requests through HTTP headers compression; and more. The protocol is binary, greatly reducing the resources needed to parse it.</description>
    </item>
    
    <item>
      <title>The modern Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/modern_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/modern_web/</guid>
      <description>Cowboy is a server for the modern Web. This chapter explains what it means and details all the standards involved.
Cowboy supports all the standards listed in this document.
HTTP/2 HTTP/2 is the most efficient protocol for consuming Web services. It enables clients to keep a connection open for long periods of time; to send requests concurrently; to reduce the size of requests through HTTP headers compression; and more. The protocol is binary, greatly reducing the resources needed to parse it.</description>
    </item>
    
    <item>
      <title>The modern Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/modern_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/modern_web/</guid>
      <description>Cowboy is a server for the modern Web. This chapter explains what it means and details all the standards involved.
Cowboy supports all the standards listed in this document.
HTTP/2 HTTP/2 is the most efficient protocol for consuming Web services. It enables clients to keep a connection open for long periods of time; to send requests concurrently; to reduce the size of requests through HTTP headers compression; and more. The protocol is binary, greatly reducing the resources needed to parse it.</description>
    </item>
    
    <item>
      <title>Erlang and the Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/erlang_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/erlang_web/</guid>
      <description>Erlang is the ideal platform for writing Web applications. Its features are a perfect match for the requirements of modern Web applications.
The Web is concurrent When you access a website there is little concurrency involved. A few connections are opened and requests are sent through these connections. Then the web page is displayed on your screen. Your browser will only open up to 4 or 8 connections to the server, depending on your settings.</description>
    </item>
    
    <item>
      <title>Erlang and the Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/erlang_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/erlang_web/</guid>
      <description>Erlang is the ideal platform for writing Web applications. Its features are a perfect match for the requirements of modern Web applications.
The Web is concurrent When you access a website there is little concurrency involved. A few connections are opened and requests are sent through these connections. Then the web page is displayed on your screen. Your browser will only open up to 4 or 8 connections to the server, depending on your settings.</description>
    </item>
    
    <item>
      <title>Erlang and the Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/erlang_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/erlang_web/</guid>
      <description>Erlang is the ideal platform for writing Web applications. Its features are a perfect match for the requirements of modern Web applications.
The Web is concurrent When you access a website there is little concurrency involved. A few connections are opened and requests are sent through these connections. Then the web page is displayed on your screen. Your browser will only open up to 4 or 8 connections to the server, depending on your settings.</description>
    </item>
    
    <item>
      <title>Erlang and the Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/erlang_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/erlang_web/</guid>
      <description>Erlang is the ideal platform for writing Web applications. Its features are a perfect match for the requirements of modern Web applications.
The Web is concurrent When you access a website there is little concurrency involved. A few connections are opened and requests are sent through these connections. Then the web page is displayed on your screen. Your browser will only open up to 4 or 8 connections to the server, depending on your settings.</description>
    </item>
    
    <item>
      <title>Erlang and the Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/erlang_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/erlang_web/</guid>
      <description>Erlang is the ideal platform for writing Web applications. Its features are a perfect match for the requirements of modern Web applications.
The Web is concurrent When you access a website there is little concurrency involved. A few connections are opened and requests are sent through these connections. Then the web page is displayed on your screen. Your browser will only open up to 4 or 8 connections to the server, depending on your settings.</description>
    </item>
    
    <item>
      <title>Erlang and the Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/erlang_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/erlang_web/</guid>
      <description>Erlang is the ideal platform for writing Web applications. Its features are a perfect match for the requirements of modern Web applications.
The Web is concurrent When you access a website there is little concurrency involved. A few connections are opened and requests are sent through these connections. Then the web page is displayed on your screen. Your browser will only open up to 4 or 8 connections to the server, depending on your settings.</description>
    </item>
    
    <item>
      <title>Erlang and the Web</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/erlang_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/erlang_web/</guid>
      <description>Erlang is the ideal platform for writing Web applications. Its features are a perfect match for the requirements of modern Web applications.
The Web is concurrent When you access a website there is little concurrency involved. A few connections are opened and requests are sent through these connections. Then the web page is displayed on your screen. Your browser will only open up to 4 or 8 connections to the server, depending on your settings.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/getting_started/</guid>
      <description>This chapter explains how to get started using Erlang.mk.
Creating a folder for your project The first step is always to create a new folder that will contain your project.
$ mkdir hello_joe $ cd hello_joe  Most people tend to put all their projects side by side in a common folder. We recommend keeping an organization similar to your remote repositories. For example, for GitHub users, put all your projects in a common folder with the same name as your username.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/guide/listeners/</guid>
      <description>A listener is a set of processes whose role is to listen on a port for new connections. It manages a pool of acceptor processes, each of them indefinitely accepting connections. When it does, it starts a new process executing the protocol handler code. All the socket programming is abstracted through the user of transport handlers.
The listener takes care of supervising all the acceptor and connection processes, allowing developers to focus on building their application.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/guide/listeners/</guid>
      <description>A listener is a set of processes whose role is to listen on a port for new connections. It manages a pool of acceptor processes, each of them indefinitely accepting connections. When it does, it starts a new process executing the protocol handler code. All the socket programming is abstracted through the use of transport handlers.
The listener takes care of supervising all the acceptor and connection processes, allowing developers to focus on building their application.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/guide/listeners/</guid>
      <description>A listener is a set of processes whose role is to listen on a port for new connections. It manages a pool of acceptor processes, each of them indefinitely accepting connections. When it does, it starts a new process executing the protocol handler code. All the socket programming is abstracted through the use of transport handlers.
The listener takes care of supervising all the acceptor and connection processes, allowing developers to focus on building their application.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/guide/listeners/</guid>
      <description>A listener is a set of processes whose role is to listen on a port for new connections. It manages a pool of acceptor processes, each of them indefinitely accepting connections. When it does, it starts a new process executing the protocol handler code. All the socket programming is abstracted through the use of transport handlers.
The listener takes care of supervising all the acceptor and connection processes, allowing developers to focus on building their application.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/listeners/</guid>
      <description>A listener is a set of processes whose role is to listen on a port for new connections. It manages a pool of acceptor processes, each of them indefinitely accepting connections. When it does, it starts a new process executing the protocol handler code. All the socket programming is abstracted through the use of transport handlers.
The listener takes care of supervising all the acceptor and connection processes, allowing developers to focus on building their application.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/listeners/</guid>
      <description>A listener is a set of processes whose role is to listen on a port for new connections. It manages a pool of acceptor processes, each of them indefinitely accepting connections. When it does, it starts a new process executing the protocol handler code. All the socket programming is abstracted through the use of transport handlers.
The listener takes care of supervising all the acceptor and connection processes, allowing developers to focus on building their application.</description>
    </item>
    
    <item>
      <title>Starting and stopping</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/guide/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/guide/start/</guid>
      <description>This chapter describes how to start and stop the Gun application.
Setting up Specify Gun as a dependency to your application in your favorite build tool.
With Erlang.mk this is done by adding gun to the DEPS variable in your Makefile.
Adding Gun as an Erlang.mk dependency DEPS = gun  Starting Gun is an OTP application. It needs to be started before you can use it.
Starting Gun in an Erlang shell 1&amp;gt; application:ensure_all_started(gun).</description>
    </item>
    
    <item>
      <title>Starting and stopping</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/guide/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/guide/start/</guid>
      <description>This chapter describes how to start and stop the Gun application.
Setting up Specify Gun as a dependency to your application in your favorite build tool.
With Erlang.mk this is done by adding gun to the DEPS variable in your Makefile.
Adding Gun as an Erlang.mk dependency DEPS = gun  Starting Gun is an OTP application. It needs to be started before you can use it.
Starting Gun in an Erlang shell 1&amp;gt; application:ensure_all_started(gun).</description>
    </item>
    
    <item>
      <title>Starting and stopping</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/guide/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/guide/start/</guid>
      <description>This chapter describes how to start and stop the Gun application.
Setting up Specify Gun as a dependency to your application in your favorite build tool.
With Erlang.mk this is done by adding gun to the DEPS variable in your Makefile.
Adding Gun as an Erlang.mk dependency DEPS = gun  Starting Gun is an OTP application. It needs to be started before you can use it.
Starting Gun in an Erlang shell 1&amp;gt; application:ensure_all_started(gun).</description>
    </item>
    
    <item>
      <title>Starting and stopping</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/guide/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/guide/start/</guid>
      <description>This chapter describes how to start and stop the Gun application.
Setting up Specify Gun as a dependency to your application in your favorite build tool.
With Erlang.mk this is done by adding gun to the DEPS variable in your Makefile.
Adding Gun as an Erlang.mk dependency DEPS = gun  Starting Gun is an OTP application. It needs to be started before you can use it.
Starting Gun in an Erlang shell 1&amp;gt; application:ensure_all_started(gun).</description>
    </item>
    
    <item>
      <title>Supported protocols</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/guide/protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/guide/protocols/</guid>
      <description>This chapter describes the protocols supported and the operations available to them.
HTTP/1.1 HTTP/1.1 is a text request-response protocol. The client sends a request, the server sends back a response.
Gun provides convenience functions for performing GET, HEAD, OPTIONS, POST, PATCH, PUT, and DELETE requests. All these functions are aliases of gun:request/4,5,6 for the respective methods. Gun also provides a gun:data/4 function for streaming the request body.
Gun will send a gun_inform message for every intermediate informational responses received.</description>
    </item>
    
    <item>
      <title>Supported protocols</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/guide/protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/guide/protocols/</guid>
      <description>This chapter describes the protocols supported and the operations available to them.
HTTP/1.1 HTTP/1.1 is a text request-response protocol. The client sends a request, the server sends back a response.
Gun provides convenience functions for performing GET, HEAD, OPTIONS, POST, PATCH, PUT, and DELETE requests. All these functions are aliases of gun:request/4,5,6 for the respective methods. Gun also provides a gun:data/4 function for streaming the request body.
Gun will send a gun_inform message for every intermediate informational responses received.</description>
    </item>
    
    <item>
      <title>Supported protocols</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/guide/protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/guide/protocols/</guid>
      <description>This chapter describes the protocols supported and the operations available to them.
HTTP/1.1 HTTP/1.1 is a text request-response protocol. The client sends a request, the server sends back a response.
Gun provides convenience functions for performing GET, HEAD, OPTIONS, POST, PATCH, PUT, and DELETE requests. All these functions are aliases of gun:request/4,5,6 for the respective methods. Gun also provides a gun:data/4 function for streaming the request body.
Gun will send a gun_inform message for every intermediate informational responses received.</description>
    </item>
    
    <item>
      <title>Supported protocols</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/guide/protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/guide/protocols/</guid>
      <description>This chapter describes the protocols supported and the operations available to them.
HTTP/1.1 HTTP/1.1 is a text request-response protocol. The client sends a request, the server sends back a response.
Gun provides convenience functions for performing GET, HEAD, OPTIONS, POST, PATCH, PUT, and DELETE requests. All these functions are aliases of gun:request/4,5,6 for the respective methods. Gun also provides a gun:data/4 function for streaming the request body.
Gun will send a gun_inform message for every intermediate informational responses received.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/introduction/</guid>
      <description>Cowboy is a small, fast and modern HTTP server for Erlang/OTP.
Cowboy aims to provide a complete modern Web stack. This includes HTTP/1.1, HTTP/2, Websocket, Server-Sent Events and Webmachine-based REST.
Cowboy comes with functions for introspection and tracing, enabling developers to know precisely what is happening at any time. Its modular design also easily enable developers to add instrumentation.
Cowboy is a high quality project. It has a small code base, is very efficient (both in latency and memory use) and can easily be embedded in another application.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/introduction/</guid>
      <description>Cowboy is a small, fast and modern HTTP server for Erlang/OTP.
Cowboy aims to provide a complete modern Web stack. This includes HTTP/1.1, HTTP/2, Websocket, Server-Sent Events and Webmachine-based REST.
Cowboy comes with functions for introspection and tracing, enabling developers to know precisely what is happening at any time. Its modular design also easily enable developers to add instrumentation.
Cowboy is a high quality project. It has a small code base, is very efficient (both in latency and memory use) and can easily be embedded in another application.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/introduction/</guid>
      <description>Cowboy is a small, fast and modern HTTP server for Erlang/OTP.
Cowboy aims to provide a complete modern Web stack. This includes HTTP/1.1, HTTP/2, Websocket, Server-Sent Events and Webmachine-based REST.
Cowboy comes with functions for introspection and tracing, enabling developers to know precisely what is happening at any time. Its modular design also easily enable developers to add instrumentation.
Cowboy is a high quality project. It has a small code base, is very efficient (both in latency and memory use) and can easily be embedded in another application.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/introduction/</guid>
      <description>Cowboy is a small, fast and modern HTTP server for Erlang/OTP.
Cowboy aims to provide a complete modern Web stack. This includes HTTP/1.1, HTTP/2, Websocket, Server-Sent Events and Webmachine-based REST.
Cowboy comes with functions for introspection and tracing, enabling developers to know precisely what is happening at any time. Its modular design also easily enable developers to add instrumentation.
Cowboy is a high quality project. It has a small code base, is very efficient (both in latency and memory use) and can easily be embedded in another application.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/introduction/</guid>
      <description>Cowboy is a small, fast and modern HTTP server for Erlang/OTP.
Cowboy aims to provide a complete modern Web stack. This includes HTTP/1.1, HTTP/2, Websocket, Server-Sent Events and Webmachine-based REST.
Cowboy comes with functions for introspection and tracing, enabling developers to know precisely what is happening at any time. Its modular design also easily enable developers to add instrumentation.
Cowboy is a high quality project. It has a small code base, is very efficient (both in latency and memory use) and can easily be embedded in another application.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/introduction/</guid>
      <description>Cowboy is a small, fast and modern HTTP server for Erlang/OTP.
Cowboy aims to provide a complete modern Web stack. This includes HTTP/1.1, HTTP/2, Websocket, Server-Sent Events and Webmachine-based REST.
Cowboy comes with functions for introspection and tracing, enabling developers to know precisely what is happening at any time. Its modular design also easily enable developers to add instrumentation.
Cowboy is a high quality project. It has a small code base, is very efficient (both in latency and memory use) and can easily be embedded in another application.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/introduction/</guid>
      <description>Cowboy is a small, fast and modern HTTP server for Erlang/OTP.
Cowboy aims to provide a complete modern Web stack. This includes HTTP/1.1, HTTP/2, Websocket, Server-Sent Events and Webmachine-based REST.
Cowboy comes with functions for introspection and tracing, enabling developers to know precisely what is happening at any time. Its modular design also easily enable developers to add instrumentation.
Cowboy is a high quality project. It has a small code base, is very efficient (both in latency and memory use) and can easily be embedded in another application.</description>
    </item>
    
    <item>
      <title>Transports</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/guide/transports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/guide/transports/</guid>
      <description>A transport defines the interface to interact with a socket.
Transports can be used for connecting, listening and accepting connections, but also for receiving and sending data. Both passive and active mode are supported, although all sockets are initialized as passive.
TCP transport The TCP transport is a thin wrapper around gen_tcp.
SSL transport The SSL transport is a thin wrapper around ssl. It requires the crypto, asn1, public_key and ssl applications to be started.</description>
    </item>
    
    <item>
      <title>Transports</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/guide/transports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/guide/transports/</guid>
      <description>A transport defines the interface to interact with a socket.
Transports can be used for connecting, listening and accepting connections, but also for receiving and sending data. Both passive and active mode are supported, although all sockets are initialized as passive.
TCP transport The TCP transport is a thin wrapper around gen_tcp.
SSL transport The SSL transport is a thin wrapper around ssl.
Ranch depends on ssl by default so any necessary dependencies will start when Ranch is started.</description>
    </item>
    
    <item>
      <title>Transports</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/guide/transports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/guide/transports/</guid>
      <description>A transport defines the interface to interact with a socket.
Transports can be used for connecting, listening and accepting connections, but also for receiving and sending data. Both passive and active mode are supported, although all sockets are initialized as passive.
TCP transport The TCP transport is a thin wrapper around gen_tcp.
SSL transport The SSL transport is a thin wrapper around ssl.
Ranch depends on ssl by default so any necessary dependencies will start when Ranch is started.</description>
    </item>
    
    <item>
      <title>Transports</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/guide/transports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/guide/transports/</guid>
      <description>A transport defines the interface to interact with a socket.
Transports can be used for connecting, listening and accepting connections, but also for receiving and sending data. Both passive and active mode are supported, although all sockets are initialized as passive.
TCP transport The TCP transport is a thin wrapper around gen_tcp.
SSL transport The SSL transport is a thin wrapper around ssl.
Ranch depends on ssl by default so any necessary dependencies will start when Ranch is started.</description>
    </item>
    
    <item>
      <title>Transports</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/transports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/transports/</guid>
      <description>A transport defines the interface to interact with a socket.
Transports can be used for connecting, listening and accepting connections, but also for receiving and sending data. Both passive and active mode are supported, although all sockets are initialized as passive.
TCP transport The TCP transport is a thin wrapper around gen_tcp.
SSL transport The SSL transport is a thin wrapper around ssl.
Ranch depends on ssl by default so any necessary dependencies will start when Ranch is started.</description>
    </item>
    
    <item>
      <title>Transports</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/transports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/transports/</guid>
      <description>A transport defines the interface to interact with a socket.
Transports can be used for connecting, listening and accepting connections, but also for receiving and sending data. Both passive and active mode are supported, although all sockets are initialized as passive.
TCP transport The TCP transport is a thin wrapper around gen_tcp.
SSL transport The SSL transport is a thin wrapper around ssl.
Ranch depends on ssl by default so any necessary dependencies will start when Ranch is started.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/overview/</guid>
      <description>Now that you know how to get started, let&amp;apos;s take a look at what Erlang.mk can do for you.
Building your project Erlang.mk is first and foremost a build tool. It is especially tailored for Erlang developers and follows widely accepted practices in the Erlang community.
Erlang.mk will happily build all Erlang-specific files you throw at it. Other kinds of files too, like C or C++ code when you are working on a NIF or a port driver.</description>
    </item>
    
    <item>
      <title>Connection</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/guide/connect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/guide/connect/</guid>
      <description>This chapter describes how to open, monitor and close a connection using the Gun client.
Gun connections Gun is designed with the HTTP/2 and Websocket protocols in mind. They are built for long-running connections that allow concurrent exchange of data, either in the form of request/responses for HTTP/2 or in the form of messages for Websocket.
A Gun connection is an Erlang process that manages a socket to a remote endpoint.</description>
    </item>
    
    <item>
      <title>Connection</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/guide/connect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/guide/connect/</guid>
      <description>This chapter describes how to open, monitor and close a connection using the Gun client.
Gun connections Gun is designed with the HTTP/2 and Websocket protocols in mind. They are built for long-running connections that allow concurrent exchange of data, either in the form of request/responses for HTTP/2 or in the form of messages for Websocket.
A Gun connection is an Erlang process that manages a socket to a remote endpoint.</description>
    </item>
    
    <item>
      <title>Connection</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/guide/connect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/guide/connect/</guid>
      <description>This chapter describes how to open, monitor and close a connection using the Gun client.
Gun connections Gun is designed with the HTTP/2 and Websocket protocols in mind. They are built for long-running connections that allow concurrent exchange of data, either in the form of request/responses for HTTP/2 or in the form of messages for Websocket.
A Gun connection is an Erlang process that manages a socket to a remote endpoint.</description>
    </item>
    
    <item>
      <title>Connection</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/guide/connect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/guide/connect/</guid>
      <description>This chapter describes how to open, monitor and close a connection using the Gun client.
Gun connections Gun is designed with the HTTP/2 and Websocket protocols in mind. They are built for long-running connections that allow concurrent exchange of data, either in the form of request/responses for HTTP/2 or in the form of messages for Websocket.
A Gun connection is an Erlang process that manages a socket to a remote endpoint.</description>
    </item>
    
    <item>
      <title>Protocols</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/guide/protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/guide/protocols/</guid>
      <description>A protocol handler starts a connection process and defines the protocol logic executed in this process.
Writing a protocol handler All protocol handlers must implement the ranch_protocol behavior which defines a single callback, start_link/4. This callback is responsible for spawning a new process for handling the connection. It receives four arguments: the name of the listener, the socket, the transport handler being used and the protocol options defined in the call to ranch:start_listener/6.</description>
    </item>
    
    <item>
      <title>Protocols</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/guide/protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/guide/protocols/</guid>
      <description>A protocol handler starts a connection process and defines the protocol logic executed in this process.
Writing a protocol handler All protocol handlers must implement the ranch_protocol behavior which defines a single callback, start_link/4. This callback is responsible for spawning a new process for handling the connection. It receives four arguments: the name of the listener, the socket, the transport handler being used and the protocol options defined in the call to ranch:start_listener/6.</description>
    </item>
    
    <item>
      <title>Protocols</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/guide/protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/guide/protocols/</guid>
      <description>A protocol handler starts a connection process and defines the protocol logic executed in this process.
Writing a protocol handler All protocol handlers must implement the ranch_protocol behavior which defines a single callback, start_link/4. This callback is responsible for spawning a new process for handling the connection. It receives four arguments: the name of the listener, the socket, the transport handler being used and the protocol options defined in the call to ranch:start_listener/5.</description>
    </item>
    
    <item>
      <title>Protocols</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/guide/protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/guide/protocols/</guid>
      <description>A protocol handler starts a connection process and defines the protocol logic executed in this process.
Writing a protocol handler All protocol handlers must implement the ranch_protocol behavior which defines a single callback, start_link/4. This callback is responsible for spawning a new process for handling the connection. It receives four arguments: the name of the listener, the socket, the transport handler being used and the protocol options defined in the call to ranch:start_listener/5.</description>
    </item>
    
    <item>
      <title>Protocols</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/protocols/</guid>
      <description>A protocol handler starts a connection process and defines the protocol logic executed in this process.
Writing a protocol handler All protocol handlers must implement the ranch_protocol behavior which defines a single callback, start_link/4. This callback is responsible for spawning a new process for handling the connection. It receives four arguments: the name of the listener, the socket, the transport handler being used and the protocol options defined in the call to ranch:start_listener/5.</description>
    </item>
    
    <item>
      <title>Protocols</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/protocols/</guid>
      <description>A protocol handler starts a connection process and defines the protocol logic executed in this process.
Writing a protocol handler All protocol handlers must implement the ranch_protocol behavior which defines a single callback, start_link/4. This callback is responsible for spawning a new process for handling the connection. It receives four arguments: the name of the listener, the socket, the transport handler being used and the protocol options defined in the call to ranch:start_listener/5.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/getting_started/</guid>
      <description>Erlang is more than a language, it is also an operating system for your applications. Erlang developers rarely write standalone modules, they write libraries or applications, and then bundle those into what is called a release. A release contains the Erlang VM plus all applications required to run the node, so it can be pushed to production directly.
This chapter walks you through all the steps of setting up Cowboy, writing your first application and generating your first release.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/getting_started/</guid>
      <description>Erlang is more than a language, it is also an operating system for your applications. Erlang developers rarely write standalone modules, they write libraries or applications, and then bundle those into what is called a release. A release contains the Erlang VM plus all applications required to run the node, so it can be pushed to production directly.
This chapter walks you through all the steps of setting up Cowboy, writing your first application and generating your first release.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/getting_started/</guid>
      <description>Erlang is more than a language, it is also an operating system for your applications. Erlang developers rarely write standalone modules, they write libraries or applications, and then bundle those into what is called a release. A release contains the Erlang VM plus all applications required to run the node, so it can be pushed to production directly.
This chapter walks you through all the steps of setting up Cowboy, writing your first application and generating your first release.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/getting_started/</guid>
      <description>Erlang is more than a language, it is also an operating system for your applications. Erlang developers rarely write standalone modules, they write libraries or applications, and then bundle those into what is called a release. A release contains the Erlang VM plus all applications required to run the node, so it can be pushed to production directly.
This chapter walks you through all the steps of setting up Cowboy, writing your first application and generating your first release.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/getting_started/</guid>
      <description>Erlang is more than a language, it is also an operating system for your applications. Erlang developers rarely write standalone modules, they write libraries or applications, and then bundle those into what is called a release. A release contains the Erlang VM plus all applications required to run the node, so it can be pushed to production directly.
This chapter walks you through all the steps of setting up Cowboy, writing your first application and generating your first release.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/getting_started/</guid>
      <description>Erlang is more than a language, it is also an operating system for your applications. Erlang developers rarely write standalone modules, they write libraries or applications, and then bundle those into what is called a release. A release contains the Erlang VM plus all applications required to run the node, so it can be pushed to production directly.
This chapter walks you through all the steps of setting up Cowboy, writing your first application and generating your first release.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/getting_started/</guid>
      <description>Erlang is more than a language, it is also an operating system for your applications. Erlang developers rarely write standalone modules, they write libraries or applications, and then bundle those into what is called a release. A release contains the Erlang VM plus all applications required to run the node, so it can be pushed to production directly.
This chapter walks you through all the steps of setting up Cowboy, writing your first application and generating your first release.</description>
    </item>
    
    <item>
      <title>Updating Erlang.mk</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/updating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/updating/</guid>
      <description>This chapter describes how to update the erlang.mk file in your repository.
Initial bootstrap The first time you use Erlang.mk, it will bootstrap itself. It always uses the most recent version for this, so you don&amp;apos;t have to update after creating your project.
Updating Later on though, updating becomes a necessity. Erlang.mk developers and contributors relentlessly improve the project and add new features; it would be a waste not to benefit from this.</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/guide/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/guide/http/</guid>
      <description>This chapter describes how to use the Gun client for communicating with an HTTP/1.1 or HTTP/2 server.
Streams Every time a request is initiated, Gun creates a stream. A stream reference uniquely identifies a set of request and response and must be used to perform additional operations with a stream or to identify its messages.
Stream references use the Erlang reference data type and are therefore unique.
Streams can be canceled at any time.</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/guide/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/guide/http/</guid>
      <description>This chapter describes how to use the Gun client for communicating with an HTTP/1.1 or HTTP/2 server.
Streams Every time a request is initiated, Gun creates a stream. A stream reference uniquely identifies a set of request and response and must be used to perform additional operations with a stream or to identify its messages.
Stream references use the Erlang reference data type and are therefore unique.
Streams can be canceled at any time.</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/guide/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/guide/http/</guid>
      <description>This chapter describes how to use the Gun client for communicating with an HTTP/1.1 or HTTP/2 server.
Streams Every time a request is initiated, Gun creates a stream. A stream reference uniquely identifies a set of request and response and must be used to perform additional operations with a stream or to identify its messages.
Stream references use the Erlang reference data type and are therefore unique.
Streams can be canceled at any time.</description>
    </item>
    
    <item>
      <title>HTTP</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/guide/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/guide/http/</guid>
      <description>This chapter describes how to use the Gun client for communicating with an HTTP/1.1 or HTTP/2 server.
Streams Every time a request is initiated, Gun creates a stream. A stream reference uniquely identifies a set of request and response and must be used to perform additional operations with a stream or to identify its messages.
Stream references use the Erlang reference data type and are therefore unique.
Streams can be canceled at any time.</description>
    </item>
    
    <item>
      <title>Embedded mode</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/guide/embedded/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/guide/embedded/</guid>
      <description>Embedded mode allows you to insert Ranch listeners directly in your supervision tree. This allows for greater fault tolerance control by permitting the shutdown of a listener due to the failure of another part of the application and vice versa.
Embedding To embed Ranch in your application you can simply add the child specs to your supervision tree. This can all be done in the init/1 function of one of your application supervisors.</description>
    </item>
    
    <item>
      <title>Embedded mode</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/guide/embedded/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/guide/embedded/</guid>
      <description>Embedded mode allows you to insert Ranch listeners directly in your supervision tree. This allows for greater fault tolerance control by permitting the shutdown of a listener due to the failure of another part of the application and vice versa.
Embedding To embed Ranch in your application you can simply add the child specs to your supervision tree. This can all be done in the init/1 function of one of your application supervisors.</description>
    </item>
    
    <item>
      <title>Embedded mode</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/guide/embedded/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/guide/embedded/</guid>
      <description>Embedded mode allows you to insert Ranch listeners directly in your supervision tree. This allows for greater fault tolerance control by permitting the shutdown of a listener due to the failure of another part of the application and vice versa.
Embedding To embed Ranch in your application you can simply add the child specs to your supervision tree. This can all be done in the init/1 function of one of your application supervisors.</description>
    </item>
    
    <item>
      <title>Embedded mode</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/guide/embedded/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/guide/embedded/</guid>
      <description>Embedded mode allows you to insert Ranch listeners directly in your supervision tree. This allows for greater fault tolerance control by permitting the shutdown of a listener due to the failure of another part of the application and vice versa.
Embedding To embed Ranch in your application you can simply add the child specs to your supervision tree. This can all be done in the init/1 function of one of your application supervisors.</description>
    </item>
    
    <item>
      <title>Embedded mode</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/embedded/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/embedded/</guid>
      <description>Embedded mode allows you to insert Ranch listeners directly in your supervision tree. This allows for greater fault tolerance control by permitting the shutdown of a listener due to the failure of another part of the application and vice versa.
Embedding To embed Ranch in your application you can simply add the child specs to your supervision tree. This can all be done in the init/1 function of one of your application supervisors.</description>
    </item>
    
    <item>
      <title>Embedded mode</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/embedded/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/embedded/</guid>
      <description>Embedded mode allows you to insert Ranch listeners directly in your supervision tree. This allows for greater fault tolerance control by permitting the shutdown of a listener due to the failure of another part of the application and vice versa.
Embedding To embed Ranch in your application you can simply add the child specs to your supervision tree. This can all be done in the init/1 function of one of your application supervisors.</description>
    </item>
    
    <item>
      <title>Limitations</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/limitations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/limitations/</guid>
      <description>No software is perfect.
It&amp;apos;s very important, when evaluating and when using a tool, to understand its limitations, so as to avoid making mistakes and wasting valuable time.
This chapter lists all known limitations of Erlang.mk.
Erlang must be available Currently Erlang.mk requires you to install Erlang beforehand. Installing Erlang is not always easy, particularly if you need a specific version of Erlang for a specific project.
In addition, the Erlang being used must be in your $PATH before you use Erlang.</description>
    </item>
    
    <item>
      <title>Flow diagram</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/flow_diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/flow_diagram/</guid>
      <description>Cowboy is a lightweight HTTP server with support for HTTP/1.1, HTTP/2 and Websocket.
It is built on top of Ranch. Please see the Ranch guide for more information about how the network connections are handled.
Overview As you can see on the diagram, the client begins by connecting to the server. This step is handled by a Ranch acceptor, which is a process dedicated to accepting new connections.
After Ranch accepts a new connection, whether it is an HTTP/1.</description>
    </item>
    
    <item>
      <title>Flow diagram</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/flow_diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/flow_diagram/</guid>
      <description>Cowboy is a lightweight HTTP server with support for HTTP/1.1, HTTP/2 and Websocket.
It is built on top of Ranch. Please see the Ranch guide for more information about how the network connections are handled.
Overview As you can see on the diagram, the client begins by connecting to the server. This step is handled by a Ranch acceptor, which is a process dedicated to accepting new connections.
After Ranch accepts a new connection, whether it is an HTTP/1.</description>
    </item>
    
    <item>
      <title>Flow diagram</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/flow_diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/flow_diagram/</guid>
      <description>Cowboy is a lightweight HTTP server with support for HTTP/1.1, HTTP/2 and Websocket.
It is built on top of Ranch. Please see the Ranch guide for more information about how the network connections are handled.
Overview As you can see on the diagram, the client begins by connecting to the server. This step is handled by a Ranch acceptor, which is a process dedicated to accepting new connections.
After Ranch accepts a new connection, whether it is an HTTP/1.</description>
    </item>
    
    <item>
      <title>Flow diagram</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/flow_diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/flow_diagram/</guid>
      <description>Cowboy is a lightweight HTTP server with support for HTTP/1.1, HTTP/2 and Websocket.
It is built on top of Ranch. Please see the Ranch guide for more information about how the network connections are handled.
Overview As you can see on the diagram, the client begins by connecting to the server. This step is handled by a Ranch acceptor, which is a process dedicated to accepting new connections.
After Ranch accepts a new connection, whether it is an HTTP/1.</description>
    </item>
    
    <item>
      <title>Flow diagram</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/flow_diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/flow_diagram/</guid>
      <description>Cowboy is a lightweight HTTP server with support for HTTP/1.1, HTTP/2 and Websocket.
It is built on top of Ranch. Please see the Ranch guide for more information about how the network connections are handled.
Overview As you can see on the diagram, the client begins by connecting to the server. This step is handled by a Ranch acceptor, which is a process dedicated to accepting new connections.
After Ranch accepts a new connection, whether it is an HTTP/1.</description>
    </item>
    
    <item>
      <title>Flow diagram</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/flow_diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/flow_diagram/</guid>
      <description>Cowboy is a lightweight HTTP server with support for HTTP/1.1, HTTP/2 and Websocket.
It is built on top of Ranch. Please see the Ranch guide for more information about how the network connections are handled.
Overview As you can see on the diagram, the client begins by connecting to the server. This step is handled by a Ranch acceptor, which is a process dedicated to accepting new connections.
After Ranch accepts a new connection, whether it is an HTTP/1.</description>
    </item>
    
    <item>
      <title>Flow diagram</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/flow_diagram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/flow_diagram/</guid>
      <description>Cowboy is a lightweight HTTP server with support for HTTP/1.1, HTTP/2 and Websocket.
It is built on top of Ranch. Please see the Ranch guide for more information about how the network connections are handled.
Overview As you can see on the diagram, the client begins by connecting to the server. This step is handled by a Ranch acceptor, which is a process dedicated to accepting new connections.
After Ranch accepts a new connection, whether it is an HTTP/1.</description>
    </item>
    
    <item>
      <title>Websocket</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/guide/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/guide/websocket/</guid>
      <description>This chapter describes how to use the Gun client for communicating with a Websocket server.
HTTP upgrade Websocket is a protocol built on top of HTTP. To use Websocket, you must first request for the connection to be upgraded. Only HTTP/1.1 connections can be upgraded to Websocket, so you might need to restrict the protocol to HTTP/1.1 if you are planning to use Websocket over TLS.
You must use the gun:ws_upgrade/2,3,4 function to upgrade to Websocket.</description>
    </item>
    
    <item>
      <title>Websocket</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/guide/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/guide/websocket/</guid>
      <description>This chapter describes how to use the Gun client for communicating with a Websocket server.
HTTP upgrade Websocket is a protocol built on top of HTTP. To use Websocket, you must first request for the connection to be upgraded. Only HTTP/1.1 connections can be upgraded to Websocket, so you might need to restrict the protocol to HTTP/1.1 if you are planning to use Websocket over TLS.
You must use the gun:ws_upgrade/2,3,4 function to upgrade to Websocket.</description>
    </item>
    
    <item>
      <title>Websocket</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/guide/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/guide/websocket/</guid>
      <description>This chapter describes how to use the Gun client for communicating with a Websocket server.
HTTP upgrade Websocket is a protocol built on top of HTTP. To use Websocket, you must first request for the connection to be upgraded. Only HTTP/1.1 connections can be upgraded to Websocket, so you might need to restrict the protocol to HTTP/1.1 if you are planning to use Websocket over TLS.
You must use the gun:ws_upgrade/2,3,4 function to upgrade to Websocket.</description>
    </item>
    
    <item>
      <title>Websocket</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/guide/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/guide/websocket/</guid>
      <description>This chapter describes how to use the Gun client for communicating with a Websocket server.
HTTP upgrade Websocket is a protocol built on top of HTTP. To use Websocket, you must first request for the connection to be upgraded. Only HTTP/1.1 connections can be upgraded to Websocket, so you might need to restrict the protocol to HTTP/1.1 if you are planning to use Websocket over TLS.
You must use the gun:ws_upgrade/2,3,4 function to upgrade to Websocket.</description>
    </item>
    
    <item>
      <title>Writing parsers</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/guide/parsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/guide/parsers/</guid>
      <description>There are three kinds of protocols:
Text protocols  Schema-less binary protocols  Schema-based binary protocols   This chapter introduces the first two kinds. It will not cover more advanced topics such as continuations or parser generators.
This chapter isn&amp;apos;t specifically about Ranch, we assume here that you know how to read data from the socket. The data you read and the data that hasn&amp;apos;t been parsed is saved in a buffer.</description>
    </item>
    
    <item>
      <title>Writing parsers</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/guide/parsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/guide/parsers/</guid>
      <description>There are three kinds of protocols:
Text protocols  Schema-less binary protocols  Schema-based binary protocols   This chapter introduces the first two kinds. It will not cover more advanced topics such as continuations or parser generators.
This chapter isn&amp;apos;t specifically about Ranch, we assume here that you know how to read data from the socket. The data you read and the data that hasn&amp;apos;t been parsed is saved in a buffer.</description>
    </item>
    
    <item>
      <title>Writing parsers</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/guide/parsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/guide/parsers/</guid>
      <description>There are three kinds of protocols:
Text protocols  Schema-less binary protocols  Schema-based binary protocols   This chapter introduces the first two kinds. It will not cover more advanced topics such as continuations or parser generators.
This chapter isn&amp;apos;t specifically about Ranch, we assume here that you know how to read data from the socket. The data you read and the data that hasn&amp;apos;t been parsed is saved in a buffer.</description>
    </item>
    
    <item>
      <title>Writing parsers</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/guide/parsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/guide/parsers/</guid>
      <description>There are three kinds of protocols:
Text protocols  Schema-less binary protocols  Schema-based binary protocols   This chapter introduces the first two kinds. It will not cover more advanced topics such as continuations or parser generators.
This chapter isn&amp;apos;t specifically about Ranch, we assume here that you know how to read data from the socket. The data you read and the data that hasn&amp;apos;t been parsed is saved in a buffer.</description>
    </item>
    
    <item>
      <title>Writing parsers</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/parsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/parsers/</guid>
      <description>There are three kinds of protocols:
Text protocols  Schema-less binary protocols  Schema-based binary protocols   This chapter introduces the first two kinds. It will not cover more advanced topics such as continuations or parser generators.
This chapter isn&amp;apos;t specifically about Ranch, we assume here that you know how to read data from the socket. The data you read and the data that hasn&amp;apos;t been parsed is saved in a buffer.</description>
    </item>
    
    <item>
      <title>Writing parsers</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/parsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/parsers/</guid>
      <description>There are three kinds of protocols:
Text protocols  Schema-less binary protocols  Schema-based binary protocols   This chapter introduces the first two kinds. It will not cover more advanced topics such as continuations or parser generators.
This chapter isn&amp;apos;t specifically about Ranch, we assume here that you know how to read data from the socket. The data you read and the data that hasn&amp;apos;t been parsed is saved in a buffer.</description>
    </item>
    
    <item>
      <title>Building</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/app/</guid>
      <description>Erlang.mk can do a lot of things, but it is, first and foremost, a build tool. In this chapter we will cover the basics of building a project with Erlang.mk.
For most of this chapter, we will assume that you are using a project generated by Erlang.mk.
How to build To build a project, all you have to do is type make:
$ make  It will work regardless of your project: OTP applications, library applications, NIFs, port drivers or even releases.</description>
    </item>
    
    <item>
      <title>Migrating from Gun 1.0 to 1.1</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/guide/migrating_from_1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/guide/migrating_from_1.0/</guid>
      <description>Gun 1.1 updates the Cowlib dependency to 2.5.1 and fixes a few problems with experimental features.
Features added Update Cowlib to 2.5.1   Bugs fixed A bug in the experimental gun_sse_h where lone id lines were not propagated has been fixed by updating the Cowlib dependency.  The status code was incorrectly given to the experimental content handlers as a binary. It has been fixed an an integer is now given as was intended.</description>
    </item>
    
    <item>
      <title>Migrating from Gun 1.1 to 1.2</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/guide/migrating_from_1.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/guide/migrating_from_1.1/</guid>
      <description>Gun 1.2 adds support for the CONNECT request over HTTP/1.1 connections.
Features added CONNECT requests can now be issued on HTTP/1.1 connections. The tunneled connection can use any of the protocols Gun supports: HTTP/1.1, HTTP/2 and Websocket over both TCP and TLS transports. Note that Gun currently does not support tunneling a TLS connection over a TLS connection due to limitations in Erlang/OTP.  Gun supports sending multiple CONNECT requests, allowing the tunnel to the origin server to go through multiple proxies.</description>
    </item>
    
    <item>
      <title>Migrating from Gun 1.2 to 1.3</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/guide/migrating_from_1.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/guide/migrating_from_1.2/</guid>
      <description>Gun 1.3 improves the support for CONNECT requests introduced in the previous version and documents Websocket protocol negotiation.
Features added The protocols CONNECT destination option has been added as a replacement for the now deprecated protocol option.  Add built-in support for Websocket protocol negotiation through the Websocket option protocols. The interface of the handler module currently remains undocumented and must be set to gun_ws_h.  Add the h2specd HTTP/2 test suite from the h2spec project.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/listeners/</guid>
      <description>A listener is a set of processes that listens on a port for new connections. Incoming connections get handled by Cowboy. Depending on the connection handshake, one or another protocol may be used.
This chapter is specific to Cowboy. Please refer to the Ranch User Guide for more information about listeners.
Cowboy provides two types of listeners: one listening for clear TCP connections, and one listening for secure TLS connections. Both of them support the HTTP/1.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/listeners/</guid>
      <description>A listener is a set of processes that listens on a port for new connections. Incoming connections get handled by Cowboy. Depending on the connection handshake, one or another protocol may be used.
This chapter is specific to Cowboy. Please refer to the Ranch User Guide for more information about listeners.
Cowboy provides two types of listeners: one listening for clear TCP connections, and one listening for secure TLS connections. Both of them support the HTTP/1.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/listeners/</guid>
      <description>A listener is a set of processes that listens on a port for new connections. Incoming connections get handled by Cowboy. Depending on the connection handshake, one or another protocol may be used.
This chapter is specific to Cowboy. Please refer to the Ranch User Guide for more information about listeners.
Cowboy provides two types of listeners: one listening for clear TCP connections, and one listening for secure TLS connections. Both of them support the HTTP/1.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/listeners/</guid>
      <description>A listener is a set of processes that listens on a port for new connections. Incoming connections get handled by Cowboy. Depending on the connection handshake, one or another protocol may be used.
This chapter is specific to Cowboy. Please refer to the Ranch User Guide for more information about listeners.
Cowboy provides two types of listeners: one listening for clear TCP connections, and one listening for secure TLS connections. Both of them support the HTTP/1.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/listeners/</guid>
      <description>A listener is a set of processes that listens on a port for new connections. Incoming connections get handled by Cowboy. Depending on the connection handshake, one or another protocol may be used.
This chapter is specific to Cowboy. Please refer to the Ranch User Guide for more information about listeners.
Cowboy provides two types of listeners: one listening for clear TCP connections, and one listening for secure TLS connections. Both of them support the HTTP/1.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/listeners/</guid>
      <description>A listener is a set of processes that listens on a port for new connections. Incoming connections get handled by Cowboy. Depending on the connection handshake, one or another protocol may be used.
This chapter is specific to Cowboy. Please refer to the Ranch User Guide for more information about listeners.
Cowboy provides two types of listeners: one listening for clear TCP connections, and one listening for secure TLS connections. Both of them support the HTTP/1.</description>
    </item>
    
    <item>
      <title>Listeners</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/listeners/</guid>
      <description>A listener is a set of processes that listens on a port for new connections. Incoming connections get handled by Cowboy. Depending on the connection handshake, one or another protocol may be used.
This chapter is specific to Cowboy. Please refer to the Ranch User Guide for more information about listeners.
Cowboy provides two types of listeners: one listening for clear TCP connections, and one listening for secure TLS connections. Both of them support the HTTP/1.</description>
    </item>
    
    <item>
      <title>SSL client authentication</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/guide/ssl_auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/guide/ssl_auth/</guid>
      <description>Purpose SSL client authentication is a mechanism allowing applications to identify certificates. This allows your application to make sure that the client is an authorized certificate, but makes no claim about whether the user can be trusted. This can be combined with a password based authentication to attain greater security.
The server only needs to retain the certificate serial number and the certificate issuer to authenticate the certificate. Together, they can be used to uniquely identify a certicate.</description>
    </item>
    
    <item>
      <title>SSL client authentication</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/guide/ssl_auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/guide/ssl_auth/</guid>
      <description>Purpose SSL client authentication is a mechanism allowing applications to identify certificates. This allows your application to make sure that the client is an authorized certificate, but makes no claim about whether the user can be trusted. This can be combined with a password based authentication to attain greater security.
The server only needs to retain the certificate serial number and the certificate issuer to authenticate the certificate. Together, they can be used to uniquely identify a certicate.</description>
    </item>
    
    <item>
      <title>SSL client authentication</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/guide/ssl_auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/guide/ssl_auth/</guid>
      <description>Purpose SSL client authentication is a mechanism allowing applications to identify certificates. This allows your application to make sure that the client is an authorized certificate, but makes no claim about whether the user can be trusted. This can be combined with a password based authentication to attain greater security.
The server only needs to retain the certificate serial number and the certificate issuer to authenticate the certificate. Together, they can be used to uniquely identify a certicate.</description>
    </item>
    
    <item>
      <title>SSL client authentication</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/guide/ssl_auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/guide/ssl_auth/</guid>
      <description>Purpose SSL client authentication is a mechanism allowing applications to identify certificates. This allows your application to make sure that the client is an authorized certificate, but makes no claim about whether the user can be trusted. This can be combined with a password based authentication to attain greater security.
The server only needs to retain the certificate serial number and the certificate issuer to authenticate the certificate. Together, they can be used to uniquely identify a certicate.</description>
    </item>
    
    <item>
      <title>SSL client authentication</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/ssl_auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/ssl_auth/</guid>
      <description>Purpose SSL client authentication is a mechanism allowing applications to identify certificates. This allows your application to make sure that the client is an authorized certificate, but makes no claim about whether the user can be trusted. This can be combined with a password based authentication to attain greater security.
The server only needs to retain the certificate serial number and the certificate issuer to authenticate the certificate. Together, they can be used to uniquely identify a certicate.</description>
    </item>
    
    <item>
      <title>SSL client authentication</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/ssl_auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/ssl_auth/</guid>
      <description>Purpose SSL client authentication is a mechanism allowing applications to identify certificates. This allows your application to make sure that the client is an authorized certificate, but makes no claim about whether the user can be trusted. This can be combined with a password based authentication to attain greater security.
The server only needs to retain the certificate serial number and the certificate issuer to authenticate the certificate. Together, they can be used to uniquely identify a certicate.</description>
    </item>
    
    <item>
      <title>Packages and dependencies</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/deps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/deps/</guid>
      <description>Erlang.mk can fetch and compile the dependencies that your project requires. Erlang.mk improves upon the concepts introduced by Rebar, so they should be familiar to many seasoned Erlang developers.
Erlang.mk is not a package manager, nor is it trying to be, but it does include an index of Erlang packages to make discovering useful projects easier.
This chapter will explain how to use packages, add dependencies to your project or bundle them directly in a single repository.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/routing/</guid>
      <description>Cowboy does nothing by default.
To make Cowboy useful, you need to map URIs to Erlang modules that will handle the requests. This is called routing.
When Cowboy receives a request, it tries to match the requested host and path to the configured routes. When there&amp;apos;s a match, the route&amp;apos;s associated handler is executed.
Routes need to be compiled before they can be used by Cowboy. The result of the compilation is the dispatch rules.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/routing/</guid>
      <description>Cowboy does nothing by default.
To make Cowboy useful, you need to map URIs to Erlang modules that will handle the requests. This is called routing.
When Cowboy receives a request, it tries to match the requested host and path to the configured routes. When there&amp;apos;s a match, the route&amp;apos;s associated handler is executed.
Routes need to be compiled before they can be used by Cowboy. The result of the compilation is the dispatch rules.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/routing/</guid>
      <description>Cowboy does nothing by default.
To make Cowboy useful, you need to map URIs to Erlang modules that will handle the requests. This is called routing.
When Cowboy receives a request, it tries to match the requested host and path to the configured routes. When there&amp;apos;s a match, the route&amp;apos;s associated handler is executed.
Routes need to be compiled before they can be used by Cowboy. The result of the compilation is the dispatch rules.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/routing/</guid>
      <description>Cowboy does nothing by default.
To make Cowboy useful, you need to map URIs to Erlang modules that will handle the requests. This is called routing.
When Cowboy receives a request, it tries to match the requested host and path to the configured routes. When there&amp;apos;s a match, the route&amp;apos;s associated handler is executed.
Routes need to be compiled before they can be used by Cowboy. The result of the compilation is the dispatch rules.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/routing/</guid>
      <description>Cowboy does nothing by default.
To make Cowboy useful, you need to map URIs to Erlang modules that will handle the requests. This is called routing.
When Cowboy receives a request, it tries to match the requested host and path to the configured routes. When there&amp;apos;s a match, the route&amp;apos;s associated handler is executed.
Routes need to be compiled before they can be used by Cowboy. The result of the compilation is the dispatch rules.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/routing/</guid>
      <description>Cowboy does nothing by default.
To make Cowboy useful, you need to map URIs to Erlang modules that will handle the requests. This is called routing.
When Cowboy receives a request, it tries to match the requested host and path to the configured routes. When there&amp;apos;s a match, the route&amp;apos;s associated handler is executed.
Routes need to be compiled before they can be used by Cowboy. The result of the compilation is the dispatch rules.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/routing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/routing/</guid>
      <description>Cowboy does nothing by default.
To make Cowboy useful, you need to map URIs to Erlang modules that will handle the requests. This is called routing.
When Cowboy receives a request, it tries to match the requested host and path to the configured routes. When there&amp;apos;s a match, the route&amp;apos;s associated handler is executed.
Routes need to be compiled before they can be used by Cowboy. The result of the compilation is the dispatch rules.</description>
    </item>
    
    <item>
      <title>NIFs and port drivers</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/ports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/ports/</guid>
      <description>Erlang.mk can not only build Erlang projects, but also the C code that some projects come with, like NIFs and port drivers.
There are two ways to build the C code: using a custom Makefile, or making Erlang.mk do it directly. The C code will be built as needed when you run make.
C source code location and Erlang environment The C source code should be located in the $(C_SRC_DIR) directory.</description>
    </item>
    
    <item>
      <title>Internals</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/guide/internals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/guide/internals/</guid>
      <description>This chapter may not apply to embedded Ranch as embedding allows you to use an architecture specific to your application, which may or may not be compatible with the description of the Ranch application.
Note that for everything related to efficiency and performance, you should perform the benchmarks yourself to get the numbers that matter to you. Generic benchmarks found on the web may or may not be of use to you, you can never know until you benchmark your own system.</description>
    </item>
    
    <item>
      <title>Internals</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/guide/internals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/guide/internals/</guid>
      <description>This chapter may not apply to embedded Ranch as embedding allows you to use an architecture specific to your application, which may or may not be compatible with the description of the Ranch application.
Note that for everything related to efficiency and performance, you should perform the benchmarks yourself to get the numbers that matter to you. Generic benchmarks found on the web may or may not be of use to you, you can never know until you benchmark your own system.</description>
    </item>
    
    <item>
      <title>Internals</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/guide/internals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/guide/internals/</guid>
      <description>This chapter may not apply to embedded Ranch as embedding allows you to use an architecture specific to your application, which may or may not be compatible with the description of the Ranch application.
Note that for everything related to efficiency and performance, you should perform the benchmarks yourself to get the numbers that matter to you. Generic benchmarks found on the web may or may not be of use to you, you can never know until you benchmark your own system.</description>
    </item>
    
    <item>
      <title>Internals</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/guide/internals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/guide/internals/</guid>
      <description>This chapter may not apply to embedded Ranch as embedding allows you to use an architecture specific to your application, which may or may not be compatible with the description of the Ranch application.
Note that for everything related to efficiency and performance, you should perform the benchmarks yourself to get the numbers that matter to you. Generic benchmarks found on the web may or may not be of use to you, you can never know until you benchmark your own system.</description>
    </item>
    
    <item>
      <title>Internals</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/internals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/internals/</guid>
      <description>This chapter may not apply to embedded Ranch as embedding allows you to use an architecture specific to your application, which may or may not be compatible with the description of the Ranch application.
Note that for everything related to efficiency and performance, you should perform the benchmarks yourself to get the numbers that matter to you. Generic benchmarks found on the web may or may not be of use to you, you can never know until you benchmark your own system.</description>
    </item>
    
    <item>
      <title>Internals</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/internals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/internals/</guid>
      <description>This chapter may not apply to embedded Ranch as embedding allows you to use an architecture specific to your application, which may or may not be compatible with the description of the Ranch application.
Note that for everything related to efficiency and performance, you should perform the benchmarks yourself to get the numbers that matter to you. Generic benchmarks found on the web may or may not be of use to you, you can never know until you benchmark your own system.</description>
    </item>
    
    <item>
      <title>Migrating from Gun 1.0 to 1.1</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/guide/migrating_from_1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/guide/migrating_from_1.0/</guid>
      <description>Gun 1.1 updates the Cowlib dependency to 2.5.1 and fixes a few problems with experimental features.
Features added Update Cowlib to 2.5.1   Bugs fixed A bug in the experimental gun_sse_h where lone id lines were not propagated has been fixed by updating the Cowlib dependency.  The status code was incorrectly given to the experimental content handlers as a binary. It has been fixed an an integer is now given as was intended.</description>
    </item>
    
    <item>
      <title>Migrating from Gun 1.1 to 1.2</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/guide/migrating_from_1.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/guide/migrating_from_1.1/</guid>
      <description>Gun 1.2 adds support for the CONNECT request over HTTP/1.1 connections.
Features added CONNECT requests can now be issued on HTTP/1.1 connections. The tunneled connection can use any of the protocols Gun supports: HTTP/1.1, HTTP/2 and Websocket over both TCP and TLS transports. Note that Gun currently does not support tunneling a TLS connection over a TLS connection due to limitations in Erlang/OTP.  Gun supports sending multiple CONNECT requests, allowing the tunnel to the origin server to go through multiple proxies.</description>
    </item>
    
    <item>
      <title>Constraints</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/constraints/</guid>
      <description>Constraints are validation and conversion functions applied to user input.
They are used in various places in Cowboy, including the router and the cowboy_req match functions.
Syntax Constraints are provided as a list of fields. For each field in the list, specific constraints can be applied, as well as a default value if the field is missing.
A field can take the form of an atom field, a tuple with constraints {field, Constraints} or a tuple with constraints and a default value {field, Constraints, Default}.</description>
    </item>
    
    <item>
      <title>Constraints</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/constraints/</guid>
      <description>Constraints are validation and conversion functions applied to user input.
They are used in various places in Cowboy, including the router and the cowboy_req match functions.
Syntax Constraints are provided as a list of fields. For each field in the list, specific constraints can be applied, as well as a default value if the field is missing.
A field can take the form of an atom field, a tuple with constraints {field, Constraints} or a tuple with constraints and a default value {field, Constraints, Default}.</description>
    </item>
    
    <item>
      <title>Constraints</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/constraints/</guid>
      <description>Constraints are validation and conversion functions applied to user input.
They are used in various places in Cowboy, including the router and the cowboy_req match functions.
Syntax Constraints are provided as a list of fields. For each field in the list, specific constraints can be applied, as well as a default value if the field is missing.
A field can take the form of an atom field, a tuple with constraints {field, Constraints} or a tuple with constraints and a default value {field, Constraints, Default}.</description>
    </item>
    
    <item>
      <title>Constraints</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/constraints/</guid>
      <description>Constraints are validation and conversion functions applied to user input.
They are used in various places in Cowboy, including the router and the cowboy_req match functions.
Syntax Constraints are provided as a list of fields. For each field in the list, specific constraints can be applied, as well as a default value if the field is missing.
A field can take the form of an atom field, a tuple with constraints {field, Constraints} or a tuple with constraints and a default value {field, Constraints, Default}.</description>
    </item>
    
    <item>
      <title>Constraints</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/constraints/</guid>
      <description>Constraints are validation and conversion functions applied to user input.
They are used in various places in Cowboy, including the router and the cowboy_req match functions.
Syntax Constraints are provided as a list of fields. For each field in the list, specific constraints can be applied, as well as a default value if the field is missing.
A field can take the form of an atom field, a tuple with constraints {field, Constraints} or a tuple with constraints and a default value {field, Constraints, Default}.</description>
    </item>
    
    <item>
      <title>Constraints</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/constraints/</guid>
      <description>Constraints are validation and conversion functions applied to user input.
They are used in various places in Cowboy, including the router and the cowboy_req match functions.
Syntax Constraints are provided as a list of fields. For each field in the list, specific constraints can be applied, as well as a default value if the field is missing.
A field can take the form of an atom field, a tuple with constraints {field, Constraints} or a tuple with constraints and a default value {field, Constraints, Default}.</description>
    </item>
    
    <item>
      <title>Constraints</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/constraints/</guid>
      <description>Constraints are validation and conversion functions applied to user input.
They are used in various places in Cowboy, including the router and the cowboy_req match functions.
Syntax Constraints are provided as a list of fields. For each field in the list, specific constraints can be applied, as well as a default value if the field is missing.
A field can take the form of an atom field, a tuple with constraints {field, Constraints} or a tuple with constraints and a default value {field, Constraints, Default}.</description>
    </item>
    
    <item>
      <title>Releases</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/releases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/releases/</guid>
      <description>Erlang.mk relies on Relx for generating releases. This chapter covers the Erlang.mk-specific bits. Consult the Relx website for more information.
Setup Erlang.mk will create a release if it detects a Relx configuration file in the $(RELX_CONFIG) location. This defaults to $(CURDIR)/relx.config. You can override it by defining the variable before including Erlang.mk:
RELX_CONFIG = $(CURDIR)/webchat.config  It is also possible to have multiple relx.config files. For example you might have one for development and one for production.</description>
    </item>
    
    <item>
      <title>Upcoming changes in Ranch 2.0</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/upcoming_2.0_changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/upcoming_2.0_changes/</guid>
      <description>The following changes will be done in Ranch 2.0. In most cases an alternative is already available in the most recent Ranch version.
The function ranch:start_listener/6 has been deprecated in favor of ranch:start_listener/5. The number of acceptors was removed and will be taken from the transport options.  The function ranch:child_spec/6 has also been deprecated, in favor of ranch:child_spec/5.  The function ranch:accept_ack/1 has been deprecated in favor of ranch:handshake/1,2.  The function ranch:info/1,2 will return a map containing each listener&amp;apos;s information rather than a list of key/values.</description>
    </item>
    
    <item>
      <title>Upcoming changes in Ranch 2.0</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/upcoming_2.0_changes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/upcoming_2.0_changes/</guid>
      <description>The following changes will be done in Ranch 2.0. In most cases an alternative is already available in the most recent Ranch version.
The function ranch:start_listener/6 has been deprecated in favor of ranch:start_listener/5. The number of acceptors was removed and will be taken from the transport options.  The function ranch:child_spec/6 has also been deprecated, in favor of ranch:child_spec/5.  The function ranch:accept_ack/1 has been deprecated in favor of ranch:handshake/1,2.  The function ranch:info/1,2 will return a map containing each listener&amp;apos;s information rather than a list of key/values.</description>
    </item>
    
    <item>
      <title>Migrating from Gun 1.0 to 1.1</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/guide/migrating_from_1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/guide/migrating_from_1.0/</guid>
      <description>Gun 1.1 updates the Cowlib dependency to 2.5.1 and fixes a few problems with experimental features.
Features added Update Cowlib to 2.5.1   Bugs fixed A bug in the experimental gun_sse_h where lone id lines were not propagated has been fixed by updating the Cowlib dependency.  The status code was incorrectly given to the experimental content handlers as a binary. It has been fixed an an integer is now given as was intended.</description>
    </item>
    
    <item>
      <title>Self-extracting releases</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/sfx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/sfx/</guid>
      <description>Erlang.mk allows you to package Relx releases as self-extracting archives. These archives contain all the files in the release and come in the form of a script that will extract and run the release automatically.
This allows you to package the release as a single file that can then be executed.
This feature is currently experimental. Feedback is much appreciated.
Generating the self-extracting archive To generate a self-extracting release, all you need to do is pass the SFX=1 variable to Make when you build the release:</description>
    </item>
    
    <item>
      <title>Handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/handlers/</guid>
      <description>Handlers are Erlang modules that handle HTTP requests.
Plain HTTP handlers The most basic handler in Cowboy implements the mandatory init/2 callback, manipulates the request, optionally sends a response and then returns.
This callback receives the Req object and the initial state defined in the router configuration.
A handler that does nothing would look like this:
init(Req, State) -&amp;gt; {ok, Req, State}.  Despite sending no reply, a 204 No Content response will be sent to the client, as Cowboy makes sure that a response is sent for every request.</description>
    </item>
    
    <item>
      <title>Handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/handlers/</guid>
      <description>Handlers are Erlang modules that handle HTTP requests.
Plain HTTP handlers The most basic handler in Cowboy implements the mandatory init/2 callback, manipulates the request, optionally sends a response and then returns.
This callback receives the Req object and the initial state defined in the router configuration.
A handler that does nothing would look like this:
init(Req, State) -&amp;gt; {ok, Req, State}.  Despite sending no reply, a 204 No Content response will be sent to the client, as Cowboy makes sure that a response is sent for every request.</description>
    </item>
    
    <item>
      <title>Handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/handlers/</guid>
      <description>Handlers are Erlang modules that handle HTTP requests.
Plain HTTP handlers The most basic handler in Cowboy implements the mandatory init/2 callback, manipulates the request, optionally sends a response and then returns.
This callback receives the Req object and the initial state defined in the router configuration.
A handler that does nothing would look like this:
init(Req, State) -&amp;gt; {ok, Req, State}.  Despite sending no reply, a 204 No Content response will be sent to the client, as Cowboy makes sure that a response is sent for every request.</description>
    </item>
    
    <item>
      <title>Handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/handlers/</guid>
      <description>Handlers are Erlang modules that handle HTTP requests.
Plain HTTP handlers The most basic handler in Cowboy implements the mandatory init/2 callback, manipulates the request, optionally sends a response and then returns.
This callback receives the Req object and the initial state defined in the router configuration.
A handler that does nothing would look like this:
init(Req, State) -&amp;gt; {ok, Req, State}.  Despite sending no reply, a 204 No Content response will be sent to the client, as Cowboy makes sure that a response is sent for every request.</description>
    </item>
    
    <item>
      <title>Handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/handlers/</guid>
      <description>Handlers are Erlang modules that handle HTTP requests.
Plain HTTP handlers The most basic handler in Cowboy implements the mandatory init/2 callback, manipulates the request, optionally sends a response and then returns.
This callback receives the Req object and the initial state defined in the router configuration.
A handler that does nothing would look like this:
init(Req, State) -&amp;gt; {ok, Req, State}.  Despite sending no reply, a 204 No Content response will be sent to the client, as Cowboy makes sure that a response is sent for every request.</description>
    </item>
    
    <item>
      <title>Handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/handlers/</guid>
      <description>Handlers are Erlang modules that handle HTTP requests.
Plain HTTP handlers The most basic handler in Cowboy implements the mandatory init/2 callback, manipulates the request, optionally sends a response and then returns.
This callback receives the Req object and the initial state defined in the router configuration.
A handler that does nothing would look like this:
init(Req, State) -&amp;gt; {ok, Req, State}.  Despite sending no reply, a 204 No Content response will be sent to the client, as Cowboy makes sure that a response is sent for every request.</description>
    </item>
    
    <item>
      <title>Handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/handlers/</guid>
      <description>Handlers are Erlang modules that handle HTTP requests.
Plain HTTP handlers The most basic handler in Cowboy implements the mandatory init/2 callback, manipulates the request, optionally sends a response and then returns.
This callback receives the Req object and the initial state defined in the router configuration.
A handler that does nothing would look like this:
init(Req, State) -&amp;gt; {ok, Req, State}.  Despite sending no reply, a 204 No Content response will be sent to the client, as Cowboy makes sure that a response is sent for every request.</description>
    </item>
    
    <item>
      <title>Escripts</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/escripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/escripts/</guid>
      <description>Escripts are an alternative to release. They are meant to be used for small command line executables written in Erlang.
They are not self-contained, unlike releases. Erlang must be installed for them to run. This however means that they are fairly small compared to releases.
For self-contained executables, check self-extracting releases.
Requirements Erlang.mk uses p7zip by default to generate the escript archive. Make sure it is installed. On most systems the package is named p7zip; on Ubuntu you need p7zip-full.</description>
    </item>
    
    <item>
      <title>Changes since Ranch 1.6</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/migrating_from_1.6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/migrating_from_1.6/</guid>
      <description>The following patch versions were released since Ranch 1.6:
Ranch 1.6.2 This release fixes an issue where listener information would not get cleaned up when an embedded listener was stopped.
Ranch 1.6.1 This release fixes a minor issue in the README and adds an undocumented function to help Cowboy deal with the transition from list to map for the transport options.</description>
    </item>
    
    <item>
      <title>Changes since Ranch 1.7</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/migrating_from_1.7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/migrating_from_1.7/</guid>
      <description>The following patch versions were released since Ranch 1.7:
Ranch 1.7.1 This release fixes an issue with the PROXY protocol where the wrong CRC32 algorithm was used and would cause checksum verification to fail.
Because the plain crc32 checksum is not supported by the PROXY protocol, the configuration value when building PROXY headers has been changed to crc32c.</description>
    </item>
    
    <item>
      <title>Loop handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/loop_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/loop_handlers/</guid>
      <description>Loop handlers are a special kind of HTTP handlers used when the response can not be sent right away. The handler enters instead a receive loop waiting for the right message before it can send a response.
Loop handlers are used for requests where a response might not be immediately available, but where you would like to keep the connection open for a while in case the response arrives. The most known example of such practice is known as long polling.</description>
    </item>
    
    <item>
      <title>Loop handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/loop_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/loop_handlers/</guid>
      <description>Loop handlers are a special kind of HTTP handlers used when the response can not be sent right away. The handler enters instead a receive loop waiting for the right message before it can send a response.
Loop handlers are used for requests where a response might not be immediately available, but where you would like to keep the connection open for a while in case the response arrives. The most known example of such practice is known as long polling.</description>
    </item>
    
    <item>
      <title>Loop handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/loop_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/loop_handlers/</guid>
      <description>Loop handlers are a special kind of HTTP handlers used when the response can not be sent right away. The handler enters instead a receive loop waiting for the right message before it can send a response.
Loop handlers are used for requests where a response might not be immediately available, but where you would like to keep the connection open for a while in case the response arrives. The most known example of such practice is known as long polling.</description>
    </item>
    
    <item>
      <title>Loop handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/loop_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/loop_handlers/</guid>
      <description>Loop handlers are a special kind of HTTP handlers used when the response can not be sent right away. The handler enters instead a receive loop waiting for the right message before it can send a response.
Loop handlers are used for requests where a response might not be immediately available, but where you would like to keep the connection open for a while in case the response arrives. The most known example of such practice is known as long polling.</description>
    </item>
    
    <item>
      <title>Loop handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/loop_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/loop_handlers/</guid>
      <description>Loop handlers are a special kind of HTTP handlers used when the response can not be sent right away. The handler enters instead a receive loop waiting for the right message before it can send a response.
Loop handlers are used for requests where a response might not be immediately available, but where you would like to keep the connection open for a while in case the response arrives. The most known example of such practice is known as long polling.</description>
    </item>
    
    <item>
      <title>Loop handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/loop_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/loop_handlers/</guid>
      <description>Loop handlers are a special kind of HTTP handlers used when the response can not be sent right away. The handler enters instead a receive loop waiting for the right message before it can send a response.
Loop handlers are used for requests where a response might not be immediately available, but where you would like to keep the connection open for a while in case the response arrives. The most known example of such practice is known as long polling.</description>
    </item>
    
    <item>
      <title>Loop handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/loop_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/loop_handlers/</guid>
      <description>Loop handlers are a special kind of HTTP handlers used when the response can not be sent right away. The handler enters instead a receive loop waiting for the right message before it can send a response.
Loop handlers are used for requests where a response might not be immediately available, but where you would like to keep the connection open for a while in case the response arrives. The most known example of such practice is known as long polling.</description>
    </item>
    
    <item>
      <title>OTP version management</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/kerl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/kerl/</guid>
      <description>Erlang.mk comes with integrated support for Kerl, a shell script that automates the downloading, building and installing of Erlang/OTP. It can be used to easily build a specific Erlang/OTP version (with or without custom build options) or maintain different versions side by side.
Erlang versions Erlang.mk uses the Git tags from Erlang/OTP to identify OTP versions. The most recent tag at the time of writing is OTP-20.0.4, which is a patch release of OTP-20.</description>
    </item>
    
    <item>
      <title>Static files</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/static_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/static_files/</guid>
      <description>Cowboy comes with a ready to use handler for serving static files. It is provided as a convenience for serving files during development.
For systems in production, consider using one of the many Content Distribution Network (CDN) available on the market, as they are the best solution for serving files.
The static handler can serve either one file or all files from a given directory. The etag generation and mime types can be configured.</description>
    </item>
    
    <item>
      <title>Static files</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/static_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/static_files/</guid>
      <description>Cowboy comes with a ready to use handler for serving static files. It is provided as a convenience for serving files during development.
For systems in production, consider using one of the many Content Distribution Network (CDN) available on the market, as they are the best solution for serving files.
The static handler can serve either one file or all files from a given directory. The etag generation and mime types can be configured.</description>
    </item>
    
    <item>
      <title>Static files</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/static_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/static_files/</guid>
      <description>Cowboy comes with a ready to use handler for serving static files. It is provided as a convenience for serving files during development.
For systems in production, consider using one of the many Content Distribution Network (CDN) available on the market, as they are the best solution for serving files.
The static handler can serve either one file or all files from a given directory. The etag generation and mime types can be configured.</description>
    </item>
    
    <item>
      <title>Static files</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/static_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/static_files/</guid>
      <description>Cowboy comes with a ready to use handler for serving static files. It is provided as a convenience for serving files during development.
For systems in production, consider using one of the many Content Distribution Network (CDN) available on the market, as they are the best solution for serving files.
The static handler can serve either one file or all files from a given directory. The etag generation and mime types can be configured.</description>
    </item>
    
    <item>
      <title>Static files</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/static_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/static_files/</guid>
      <description>Cowboy comes with a ready to use handler for serving static files. It is provided as a convenience for serving files during development.
For systems in production, consider using one of the many Content Distribution Network (CDN) available on the market, as they are the best solution for serving files.
The static handler can serve either one file or all files from a given directory. The etag generation and mime types can be configured.</description>
    </item>
    
    <item>
      <title>Static files</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/static_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/static_files/</guid>
      <description>Cowboy comes with a ready to use handler for serving static files. It is provided as a convenience for serving files during development.
For systems in production, consider using one of the many Content Distribution Network (CDN) available on the market, as they are the best solution for serving files.
The static handler can serve either one file or all files from a given directory. The etag generation and mime types can be configured.</description>
    </item>
    
    <item>
      <title>Static files</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/static_files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/static_files/</guid>
      <description>Cowboy comes with a ready to use handler for serving static files. It is provided as a convenience for serving files during development.
For systems in production, consider using one of the many Content Distribution Network (CDN) available on the market, as they are the best solution for serving files.
The static handler can serve either one file or all files from a given directory. The etag generation and mime types can be configured.</description>
    </item>
    
    <item>
      <title>Cross compiling</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/cross_compiling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/cross_compiling/</guid>
      <description>Erlang.mk supports cross-compiling. While the compiled Erlang code is portable as-is, the C code is not and releases need to use the correct runtime system for the target environment.
There are therefore two steps that might require some intervention: compiling and building the release. If you do not have any C code you can just compile as you would normally, however.
Compiling To cross-compile the C code you need a cross compiler.</description>
    </item>
    
    <item>
      <title>Migrating from Ranch 1.5 to 1.6</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/migrating_from_1.5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/migrating_from_1.5/</guid>
      <description>Ranch 1.6 added the ability to suspend and resume listeners. It also deprecates a number of features and add interfaces that will be used in Ranch 2.0.
Ranch 1.6 is compatible with Erlang/OTP 18.0 onward. Support for older releases has been removed.
Features added Listeners can now be suspended/resumed without stopping existing connection processes. This effectively closes the listening socket and stops the acceptor processes.  Transport options can now be updated for suspended listeners.</description>
    </item>
    
    <item>
      <title>Migrating from Ranch 1.6 to 1.7</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/migrating_from_1.6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/migrating_from_1.6/</guid>
      <description>Ranch 1.7 adds built-in support for the PROXY protocol.
The PROXY protocol is a simple and efficient way for proxies to transmit information about the client.
While a third-party library already existed, it was not entirely compatible with the Ranch interface, in particular when socket active mode was involved. This new implementation fixes that and supports the full protocol with as little overhead as possible compared to normal operations: just one extra function call.</description>
    </item>
    
    <item>
      <title>The Req object</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/req/</guid>
      <description>The Req object is a variable used for obtaining information about a request, read its body or send a response.
It is not really an object in the object-oriented sense. It is a simple map that can be directly accessed or used when calling functions from the cowboy_req module.
The Req object is the subject of a few different chapters. In this chapter we will learn about the Req object and look at how to retrieve information about the request.</description>
    </item>
    
    <item>
      <title>The Req object</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/req/</guid>
      <description>The Req object is a variable used for obtaining information about a request, read its body or send a response.
It is not really an object in the object-oriented sense. It is a simple map that can be directly accessed or used when calling functions from the cowboy_req module.
The Req object is the subject of a few different chapters. In this chapter we will learn about the Req object and look at how to retrieve information about the request.</description>
    </item>
    
    <item>
      <title>The Req object</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/req/</guid>
      <description>The Req object is a variable used for obtaining information about a request, read its body or send a response.
It is not really an object in the object-oriented sense. It is a simple map that can be directly accessed or used when calling functions from the cowboy_req module.
The Req object is the subject of a few different chapters. In this chapter we will learn about the Req object and look at how to retrieve information about the request.</description>
    </item>
    
    <item>
      <title>The Req object</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/req/</guid>
      <description>The Req object is a variable used for obtaining information about a request, read its body or send a response.
It is not really an object in the object-oriented sense. It is a simple map that can be directly accessed or used when calling functions from the cowboy_req module.
The Req object is the subject of a few different chapters. In this chapter we will learn about the Req object and look at how to retrieve information about the request.</description>
    </item>
    
    <item>
      <title>The Req object</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/req/</guid>
      <description>The Req object is a variable used for obtaining information about a request, read its body or send a response.
It is not really an object in the object-oriented sense. It is a simple map that can be directly accessed or used when calling functions from the cowboy_req module.
The Req object is the subject of a few different chapters. In this chapter we will learn about the Req object and look at how to retrieve information about the request.</description>
    </item>
    
    <item>
      <title>The Req object</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/req/</guid>
      <description>The Req object is a variable used for obtaining information about a request, read its body or send a response.
It is not really an object in the object-oriented sense. It is a simple map that can be directly accessed or used when calling functions from the cowboy_req module.
The Req object is the subject of a few different chapters. In this chapter we will learn about the Req object and look at how to retrieve information about the request.</description>
    </item>
    
    <item>
      <title>The Req object</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/req/</guid>
      <description>The Req object is a variable used for obtaining information about a request, read its body or send a response.
It is not really an object in the object-oriented sense. It is a simple map that can be directly accessed or used when calling functions from the cowboy_req module.
The Req object is the subject of a few different chapters. In this chapter we will learn about the Req object and look at how to retrieve information about the request.</description>
    </item>
    
    <item>
      <title>Compatibility with other build tools</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/compat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/compat/</guid>
      <description>Erlang.mk tries its best to be compatible with the other Erlang build tools. It can use dependencies written with other build tools in mind, and can also make your projects usable by those build tools as well. Erlang.mk is like the cool kid that gets along with everybody.
In this chapter I will use the term Rebar project to refer to a project built using Rebar 2, Rebar 3 or Mad.</description>
    </item>
    
    <item>
      <title>Migrating from Ranch 1.5 to 1.6</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/migrating_from_1.5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/migrating_from_1.5/</guid>
      <description>Ranch 1.6 added the ability to suspend and resume listeners. It also deprecates a number of features and add interfaces that will be used in Ranch 2.0.
Ranch 1.6 is compatible with Erlang/OTP 18.0 onward. Support for older releases has been removed.
Features added Listeners can now be suspended/resumed without stopping existing connection processes. This effectively closes the listening socket and stops the acceptor processes.  Transport options can now be updated for suspended listeners.</description>
    </item>
    
    <item>
      <title>Migrating from Ranch 1.x</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/migrating_from_1.x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/migrating_from_1.x/</guid>
      <description>The changelog for Ranch releases before 1.6 can be found in this section.
1.5.0 Add transport functions getopts/2, getstat/1 and getstat/2  Fix ranch:info/0 and ranch:procs/2 in embedded mode  Prevent ranch_conns_sup from stopping on unexpected messages   1.4.0 Add new transport option num_acceptor  Deprecate ranch:start_listener/6 in favor of start_listener/5  Deprecate ranch:child_spec/6 in favor of child_spec/5   1.3.0 The version numbers 1.3.1 and 1.3.2 were later made to fix small mistakes made during the 1.</description>
    </item>
    
    <item>
      <title>Reading the request body</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/req_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/req_body/</guid>
      <description>The request body can be read using the Req object.
Cowboy will not attempt to read the body until requested. You need to call the body reading functions in order to retrieve it.
Cowboy will not cache the body, it is therefore only possible to read it once.
You are not required to read it, however. If a body is present and was not read, Cowboy will either cancel or skip its download, depending on the protocol.</description>
    </item>
    
    <item>
      <title>Reading the request body</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/req_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/req_body/</guid>
      <description>The request body can be read using the Req object.
Cowboy will not attempt to read the body until requested. You need to call the body reading functions in order to retrieve it.
Cowboy will not cache the body, it is therefore only possible to read it once.
You are not required to read it, however. If a body is present and was not read, Cowboy will either cancel or skip its download, depending on the protocol.</description>
    </item>
    
    <item>
      <title>Reading the request body</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/req_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/req_body/</guid>
      <description>The request body can be read using the Req object.
Cowboy will not attempt to read the body until requested. You need to call the body reading functions in order to retrieve it.
Cowboy will not cache the body, it is therefore only possible to read it once.
You are not required to read it, however. If a body is present and was not read, Cowboy will either cancel or skip its download, depending on the protocol.</description>
    </item>
    
    <item>
      <title>Reading the request body</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/req_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/req_body/</guid>
      <description>The request body can be read using the Req object.
Cowboy will not attempt to read the body until requested. You need to call the body reading functions in order to retrieve it.
Cowboy will not cache the body, it is therefore only possible to read it once.
You are not required to read it, however. If a body is present and was not read, Cowboy will either cancel or skip its download, depending on the protocol.</description>
    </item>
    
    <item>
      <title>Reading the request body</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/req_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/req_body/</guid>
      <description>The request body can be read using the Req object.
Cowboy will not attempt to read the body until requested. You need to call the body reading functions in order to retrieve it.
Cowboy will not cache the body, it is therefore only possible to read it once.
You are not required to read it, however. If a body is present and was not read, Cowboy will either cancel or skip its download, depending on the protocol.</description>
    </item>
    
    <item>
      <title>Reading the request body</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/req_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/req_body/</guid>
      <description>The request body can be read using the Req object.
Cowboy will not attempt to read the body until requested. You need to call the body reading functions in order to retrieve it.
Cowboy will not cache the body, it is therefore only possible to read it once.
You are not required to read it, however. If a body is present and was not read, Cowboy will either cancel or skip its download, depending on the protocol.</description>
    </item>
    
    <item>
      <title>Reading the request body</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/req_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/req_body/</guid>
      <description>The request body can be read using the Req object.
Cowboy will not attempt to read the body until requested. You need to call the body reading functions in order to retrieve it.
Cowboy will not cache the body, it is therefore only possible to read it once.
You are not required to read it, however. If a body is present and was not read, Cowboy will either cancel or skip its download, depending on the protocol.</description>
    </item>
    
    <item>
      <title>AsciiDoc documentation</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/asciidoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/asciidoc/</guid>
      <description>Erlang.mk provides rules for generating documentation from AsciiDoc files. It can automatically build a user guide PDF, chunked HTML documentation and Unix manual pages.
Requirements It is necessary to have AsciiDoc, xsltproc and dblatex installed on your system for Erlang.mk to generate documentation from AsciiDoc sources.
Writing AsciiDoc documentation AsciiDoc is a text document format for writing notes, documentation, articles, books, ebooks, slideshows, web pages, man pages and blogs. AsciiDoc files can be translated to many formats including HTML, PDF, EPUB, man page.</description>
    </item>
    
    <item>
      <title>Sending a response</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/resp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/resp/</guid>
      <description>The response must be sent using the Req object.
Cowboy provides two different ways of sending responses: either directly or by streaming the body. Response headers and body may be set in advance. The response is sent as soon as one of the reply or stream reply function is called.
Cowboy also provides a simplified interface for sending files. It can also send only specific parts of a file.
While only one response is allowed for every request, HTTP/2 introduced a mechanism that allows the server to push additional resources related to the response.</description>
    </item>
    
    <item>
      <title>Sending a response</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/resp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/resp/</guid>
      <description>The response must be sent using the Req object.
Cowboy provides two different ways of sending responses: either directly or by streaming the body. Response headers and body may be set in advance. The response is sent as soon as one of the reply or stream reply function is called.
Cowboy also provides a simplified interface for sending files. It can also send only specific parts of a file.
While only one response is allowed for every request, HTTP/2 introduced a mechanism that allows the server to push additional resources related to the response.</description>
    </item>
    
    <item>
      <title>Sending a response</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/resp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/resp/</guid>
      <description>The response must be sent using the Req object.
Cowboy provides two different ways of sending responses: either directly or by streaming the body. Response headers and body may be set in advance. The response is sent as soon as one of the reply or stream reply function is called.
Cowboy also provides a simplified interface for sending files. It can also send only specific parts of a file.
While only one response is allowed for every request, HTTP/2 introduced a mechanism that allows the server to push additional resources related to the response.</description>
    </item>
    
    <item>
      <title>Sending a response</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/resp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/resp/</guid>
      <description>The response must be sent using the Req object.
Cowboy provides two different ways of sending responses: either directly or by streaming the body. Response headers and body may be set in advance. The response is sent as soon as one of the reply or stream reply function is called.
Cowboy also provides a simplified interface for sending files. It can also send only specific parts of a file.
While only one response is allowed for every request, HTTP/2 introduced a mechanism that allows the server to push additional resources related to the response.</description>
    </item>
    
    <item>
      <title>Sending a response</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/resp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/resp/</guid>
      <description>The response must be sent using the Req object.
Cowboy provides two different ways of sending responses: either directly or by streaming the body. Response headers and body may be set in advance. The response is sent as soon as one of the reply or stream reply function is called.
Cowboy also provides a simplified interface for sending files. It can also send only specific parts of a file.
While only one response is allowed for every request, HTTP/2 introduced a mechanism that allows the server to push additional resources related to the response.</description>
    </item>
    
    <item>
      <title>Sending a response</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/resp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/resp/</guid>
      <description>The response must be sent using the Req object.
Cowboy provides two different ways of sending responses: either directly or by streaming the body. Response headers and body may be set in advance. The response is sent as soon as one of the reply or stream reply function is called.
Cowboy also provides a simplified interface for sending files. It can also send only specific parts of a file.
While only one response is allowed for every request, HTTP/2 introduced a mechanism that allows the server to push additional resources related to the response.</description>
    </item>
    
    <item>
      <title>Sending a response</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/resp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/resp/</guid>
      <description>The response must be sent using the Req object.
Cowboy provides two different ways of sending responses: either directly or by streaming the body. Response headers and body may be set in advance. The response is sent as soon as one of the reply or stream reply function is called.
Cowboy also provides a simplified interface for sending files. It can also send only specific parts of a file.
While only one response is allowed for every request, HTTP/2 introduced a mechanism that allows the server to push additional resources related to the response.</description>
    </item>
    
    <item>
      <title>Migrating from Ranch 1.x</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/migrating_from_1.x/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/migrating_from_1.x/</guid>
      <description>The changelog for Ranch releases before 1.6 can be found in this section.
1.5.0 Add transport functions getopts/2, getstat/1 and getstat/2  Fix ranch:info/0 and ranch:procs/2 in embedded mode  Prevent ranch_conns_sup from stopping on unexpected messages   1.4.0 Add new transport option num_acceptor  Deprecate ranch:start_listener/6 in favor of start_listener/5  Deprecate ranch:child_spec/6 in favor of child_spec/5   1.3.0 The version numbers 1.3.1 and 1.3.2 were later made to fix small mistakes made during the 1.</description>
    </item>
    
    <item>
      <title>EDoc comments</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/edoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/edoc/</guid>
      <description>Erlang.mk provides a thin wrapper on top of EDoc, an application that generates documentation based on comments found in modules.
Writing EDoc comments The EDoc user guide explains everything you need to know about EDoc comments.
Configuration The EDOC_OPTS variable allows you to specify additional EDoc options. Options are documented in the EDoc manual.
A common use for this variable is to enable Markdown in doc comments, using the edown application:</description>
    </item>
    
    <item>
      <title>Using cookies</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/cookies/</guid>
      <description>Cookies are a mechanism allowing applications to maintain state on top of the stateless HTTP protocol.
Cookies are a name/value store where the names and values are stored in plain text. They expire either after a delay or when the browser closes. They can be configured on a specific domain name or path, and restricted to secure resources (sent or downloaded over HTTPS), or restricted to the server (disallowing access from client-side scripts).</description>
    </item>
    
    <item>
      <title>Using cookies</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/cookies/</guid>
      <description>Cookies are a mechanism allowing applications to maintain state on top of the stateless HTTP protocol.
Cookies are a name/value store where the names and values are stored in plain text. They expire either after a delay or when the browser closes. They can be configured on a specific domain name or path, and restricted to secure resources (sent or downloaded over HTTPS), or restricted to the server (disallowing access from client-side scripts).</description>
    </item>
    
    <item>
      <title>Using cookies</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/cookies/</guid>
      <description>Cookies are a mechanism allowing applications to maintain state on top of the stateless HTTP protocol.
Cookies are a name/value store where the names and values are stored in plain text. They expire either after a delay or when the browser closes. They can be configured on a specific domain name or path, and restricted to secure resources (sent or downloaded over HTTPS), or restricted to the server (disallowing access from client-side scripts).</description>
    </item>
    
    <item>
      <title>Using cookies</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/cookies/</guid>
      <description>Cookies are a mechanism allowing applications to maintain state on top of the stateless HTTP protocol.
Cookies are a name/value store where the names and values are stored in plain text. They expire either after a delay or when the browser closes. They can be configured on a specific domain name or path, and restricted to secure resources (sent or downloaded over HTTPS), or restricted to the server (disallowing access from client-side scripts).</description>
    </item>
    
    <item>
      <title>Using cookies</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/cookies/</guid>
      <description>Cookies are a mechanism allowing applications to maintain state on top of the stateless HTTP protocol.
Cookies are a name/value store where the names and values are stored in plain text. They expire either after a delay or when the browser closes. They can be configured on a specific domain name or path, and restricted to secure resources (sent or downloaded over HTTPS), or restricted to the server (disallowing access from client-side scripts).</description>
    </item>
    
    <item>
      <title>Using cookies</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/cookies/</guid>
      <description>Cookies are a mechanism allowing applications to maintain state on top of the stateless HTTP protocol.
Cookies are a name/value store where the names and values are stored in plain text. They expire either after a delay or when the browser closes. They can be configured on a specific domain name or path, and restricted to secure resources (sent or downloaded over HTTPS), or restricted to the server (disallowing access from client-side scripts).</description>
    </item>
    
    <item>
      <title>Using cookies</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/cookies/</guid>
      <description>Cookies are a mechanism allowing applications to maintain state on top of the stateless HTTP protocol.
Cookies are a name/value store where the names and values are stored in plain text. They expire either after a delay or when the browser closes. They can be configured on a specific domain name or path, and restricted to secure resources (sent or downloaded over HTTPS), or restricted to the server (disallowing access from client-side scripts).</description>
    </item>
    
    <item>
      <title>Sphinx documentation</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/sphinx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/sphinx/</guid>
      <description>Erlang.mk includes targets for running the Sphinx documentation generator, which can produce documentation in various formats, like HTML, man pages, Texinfo, LaTeX, and others.
Writing Sphinx documentation Sphinx generates documentation from a set of reST documents. There is a quick start guide on Sphinx&amp;apos; website. For Erlang.mk, we&amp;apos;ll set up a minimal environment instead.
Basic setup By default, Erlang.mk expects Sphinx documentation to be placed in the doc directory, with doc/conf.</description>
    </item>
    
    <item>
      <title>Multipart requests</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/multipart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/multipart/</guid>
      <description>Multipart originates from MIME, an Internet standard that extends the format of emails.
A multipart message is a list of parts. A part contains headers and a body. The body of the parts may be of any media type, and contain text or binary data. It is possible for parts to contain a multipart media type.
In the context of HTTP, multipart is most often used with the multipart/form-data media type.</description>
    </item>
    
    <item>
      <title>Multipart requests</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/multipart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/multipart/</guid>
      <description>Multipart originates from MIME, an Internet standard that extends the format of emails.
A multipart message is a list of parts. A part contains headers and a body. The body of the parts may be of any media type, and contain text or binary data. It is possible for parts to contain a multipart media type.
In the context of HTTP, multipart is most often used with the multipart/form-data media type.</description>
    </item>
    
    <item>
      <title>Multipart requests</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/multipart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/multipart/</guid>
      <description>Multipart originates from MIME, an Internet standard that extends the format of emails.
A multipart message is a list of parts. A part contains headers and a body. The body of the parts may be of any media type, and contain text or binary data. It is possible for parts to contain a multipart media type.
In the context of HTTP, multipart is most often used with the multipart/form-data media type.</description>
    </item>
    
    <item>
      <title>Multipart requests</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/multipart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/multipart/</guid>
      <description>Multipart originates from MIME, an Internet standard that extends the format of emails.
A multipart message is a list of parts. A part contains headers and a body. The body of the parts may be of any media type, and contain text or binary data. It is possible for parts to contain a multipart media type.
In the context of HTTP, multipart is most often used with the multipart/form-data media type.</description>
    </item>
    
    <item>
      <title>Multipart requests</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/multipart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/multipart/</guid>
      <description>Multipart originates from MIME, an Internet standard that extends the format of emails.
A multipart message is a list of parts. A part contains headers and a body. The body of the parts may be of any media type, and contain text or binary data. It is possible for parts to contain a multipart media type.
In the context of HTTP, multipart is most often used with the multipart/form-data media type.</description>
    </item>
    
    <item>
      <title>Multipart requests</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/multipart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/multipart/</guid>
      <description>Multipart originates from MIME, an Internet standard that extends the format of emails.
A multipart message is a list of parts. A part contains headers and a body. The body of the parts may be of any media type, and contain text or binary data. It is possible for parts to contain a multipart media type.
In the context of HTTP, multipart is most often used with the multipart/form-data media type.</description>
    </item>
    
    <item>
      <title>Multipart requests</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/multipart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/multipart/</guid>
      <description>Multipart originates from MIME, an Internet standard that extends the format of emails.
A multipart message is a list of parts. A part contains headers and a body. The body of the parts may be of any media type, and contain text or binary data. It is possible for parts to contain a multipart media type.
In the context of HTTP, multipart is most often used with the multipart/form-data media type.</description>
    </item>
    
    <item>
      <title>Erlang shell</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/shell/</guid>
      <description>Erlang.mk provides a convenient target for starting a shell with all the paths set properly to experiment with your code.
Configuration The SHELL_DEPS variable can be used to define dependencies that are only to be used when the make shell command is called. For example, if you want to use kjell as your shell:
SHELL_DEPS = kjell  Dependencies are downloaded and compiled the first time you run the make shell command.</description>
    </item>
    
    <item>
      <title>REST principles</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/rest_principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/rest_principles/</guid>
      <description>This chapter will attempt to define the concepts behind REST and explain what makes a service RESTful.
REST is often confused with performing a distinct operation depending on the HTTP method, while using more than the GET and POST methods. That&amp;apos;s highly misguided at best.
We will first attempt to define REST and will look at what it means in the context of HTTP and the Web. For a more in-depth explanation of REST, you can read Roy T.</description>
    </item>
    
    <item>
      <title>REST principles</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/rest_principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/rest_principles/</guid>
      <description>This chapter will attempt to define the concepts behind REST and explain what makes a service RESTful.
REST is often confused with performing a distinct operation depending on the HTTP method, while using more than the GET and POST methods. That&amp;apos;s highly misguided at best.
We will first attempt to define REST and will look at what it means in the context of HTTP and the Web. For a more in-depth explanation of REST, you can read Roy T.</description>
    </item>
    
    <item>
      <title>REST principles</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/rest_principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/rest_principles/</guid>
      <description>This chapter will attempt to define the concepts behind REST and explain what makes a service RESTful.
REST is often confused with performing a distinct operation depending on the HTTP method, while using more than the GET and POST methods. That&amp;apos;s highly misguided at best.
We will first attempt to define REST and will look at what it means in the context of HTTP and the Web. For a more in-depth explanation of REST, you can read Roy T.</description>
    </item>
    
    <item>
      <title>REST principles</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/rest_principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/rest_principles/</guid>
      <description>This chapter will attempt to define the concepts behind REST and explain what makes a service RESTful.
REST is often confused with performing a distinct operation depending on the HTTP method, while using more than the GET and POST methods. That&amp;apos;s highly misguided at best.
We will first attempt to define REST and will look at what it means in the context of HTTP and the Web. For a more in-depth explanation of REST, you can read Roy T.</description>
    </item>
    
    <item>
      <title>REST principles</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/rest_principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/rest_principles/</guid>
      <description>This chapter will attempt to define the concepts behind REST and explain what makes a service RESTful.
REST is often confused with performing a distinct operation depending on the HTTP method, while using more than the GET and POST methods. That&amp;apos;s highly misguided at best.
We will first attempt to define REST and will look at what it means in the context of HTTP and the Web. For a more in-depth explanation of REST, you can read Roy T.</description>
    </item>
    
    <item>
      <title>REST principles</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/rest_principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/rest_principles/</guid>
      <description>This chapter will attempt to define the concepts behind REST and explain what makes a service RESTful.
REST is often confused with performing a distinct operation depending on the HTTP method, while using more than the GET and POST methods. That&amp;apos;s highly misguided at best.
We will first attempt to define REST and will look at what it means in the context of HTTP and the Web. For a more in-depth explanation of REST, you can read Roy T.</description>
    </item>
    
    <item>
      <title>REST principles</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/rest_principles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/rest_principles/</guid>
      <description>This chapter will attempt to define the concepts behind REST and explain what makes a service RESTful.
REST is often confused with performing a distinct operation depending on the HTTP method, while using more than the GET and POST methods. That&amp;apos;s highly misguided at best.
We will first attempt to define REST and will look at what it means in the context of HTTP and the Web. For a more in-depth explanation of REST, you can read Roy T.</description>
    </item>
    
    <item>
      <title>EUnit</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/eunit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/eunit/</guid>
      <description>EUnit is the tool of choice for unit testing. Erlang.mk automates a few things on top of EUnit, including the discovery and running of unit tests.
Writing tests The EUnit user guide is the best place to learn how to write tests. Of note is that all functions ending with _test or _test_ will be picked up as EUnit test cases.
Erlang.mk will automatically pick up tests found in any of the Erlang modules of your application.</description>
    </item>
    
    <item>
      <title>Common Test</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/common_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/common_test/</guid>
      <description>Common Test is Erlang&amp;apos;s functional testing framework. Erlang.mk automates the discovery and running of Common Test suites.
Writing tests The Common Test user guide is the best place to learn how to write tests. Erlang.mk requires that file names for test suites end with _SUITE.erl and that the files be located in the $(TEST_DIR) directory. This defaults to test/.
Configuration The CT_OPTS variable allows you to set extra Common Test options.</description>
    </item>
    
    <item>
      <title>REST handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/rest_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/rest_handlers/</guid>
      <description>REST is implemented in Cowboy as a sub protocol. The request is handled as a state machine with many optional callbacks describing the resource and modifying the machine&amp;apos;s behavior.
The REST handler is the recommended way to handle HTTP requests.
Initialization First, the init/2 callback is called. This callback is common to all handlers. To use REST for the current request, this function must return a cowboy_rest tuple.
init(Req, State) -&amp;gt; {cowboy_rest, Req, State}.</description>
    </item>
    
    <item>
      <title>REST handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/rest_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/rest_handlers/</guid>
      <description>REST is implemented in Cowboy as a sub protocol. The request is handled as a state machine with many optional callbacks describing the resource and modifying the machine&amp;apos;s behavior.
The REST handler is the recommended way to handle HTTP requests.
Initialization First, the init/2 callback is called. This callback is common to all handlers. To use REST for the current request, this function must return a cowboy_rest tuple.
init(Req, State) -&amp;gt; {cowboy_rest, Req, State}.</description>
    </item>
    
    <item>
      <title>REST handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/rest_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/rest_handlers/</guid>
      <description>REST is implemented in Cowboy as a sub protocol. The request is handled as a state machine with many optional callbacks describing the resource and modifying the machine&amp;apos;s behavior.
The REST handler is the recommended way to handle HTTP requests.
Initialization First, the init/2 callback is called. This callback is common to all handlers. To use REST for the current request, this function must return a cowboy_rest tuple.
init(Req, State) -&amp;gt; {cowboy_rest, Req, State}.</description>
    </item>
    
    <item>
      <title>REST handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/rest_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/rest_handlers/</guid>
      <description>REST is implemented in Cowboy as a sub protocol. The request is handled as a state machine with many optional callbacks describing the resource and modifying the machine&amp;apos;s behavior.
The REST handler is the recommended way to handle HTTP requests.
Initialization First, the init/2 callback is called. This callback is common to all handlers. To use REST for the current request, this function must return a cowboy_rest tuple.
init(Req, State) -&amp;gt; {cowboy_rest, Req, State}.</description>
    </item>
    
    <item>
      <title>REST handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/rest_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/rest_handlers/</guid>
      <description>REST is implemented in Cowboy as a sub protocol. The request is handled as a state machine with many optional callbacks describing the resource and modifying the machine&amp;apos;s behavior.
The REST handler is the recommended way to handle HTTP requests.
Initialization First, the init/2 callback is called. This callback is common to all handlers. To use REST for the current request, this function must return a cowboy_rest tuple.
init(Req, State) -&amp;gt; {cowboy_rest, Req, State}.</description>
    </item>
    
    <item>
      <title>REST handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/rest_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/rest_handlers/</guid>
      <description>REST is implemented in Cowboy as a sub protocol. The request is handled as a state machine with many optional callbacks describing the resource and modifying the machine&amp;apos;s behavior.
The REST handler is the recommended way to handle HTTP requests.
Initialization First, the init/2 callback is called. This callback is common to all handlers. To use REST for the current request, this function must return a cowboy_rest tuple.
init(Req, State) -&amp;gt; {cowboy_rest, Req, State}.</description>
    </item>
    
    <item>
      <title>REST handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/rest_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/rest_handlers/</guid>
      <description>REST is implemented in Cowboy as a sub protocol. The request is handled as a state machine with many optional callbacks describing the resource and modifying the machine&amp;apos;s behavior.
The REST handler is the recommended way to handle HTTP requests.
Initialization First, the init/2 callback is called. This callback is common to all handlers. To use REST for the current request, this function must return a cowboy_rest tuple.
init(Req, State) -&amp;gt; {cowboy_rest, Req, State}.</description>
    </item>
    
    <item>
      <title>PropEr</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/proper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/proper/</guid>
      <description>PropEr is a QuickCheck-like library for property-based testing. Erlang.mk automates discovery and checking of PropEr properties.
To run all tests (including PropEr):
$ make tests  To run all tests and static checks (including PropEr):
$ make check  You can also run PropEr separately:
$ make proper  To check properties from a single module:
$ make proper t=foo_tests  To check a single property:
$ make proper t=foo_tests:bar  </description>
    </item>
    
    <item>
      <title>REST flowcharts</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/rest_flowcharts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/rest_flowcharts/</guid>
      <description>This chapter will explain the REST handler state machine through a number of different diagrams.
There are four main paths that requests may follow. One for the method OPTIONS; one for the methods GET and HEAD; one for the methods PUT, POST and PATCH; and one for the method DELETE.
All paths start with the &amp;quot;Start&amp;quot; diagram, and all paths excluding the OPTIONS path go through the &amp;quot;Content negotiation&amp;quot; diagram and optionally the &amp;quot;Conditional requests&amp;quot; diagram if the resource exists.</description>
    </item>
    
    <item>
      <title>REST flowcharts</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/rest_flowcharts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/rest_flowcharts/</guid>
      <description>This chapter will explain the REST handler state machine through a number of different diagrams.
There are four main paths that requests may follow. One for the method OPTIONS; one for the methods GET and HEAD; one for the methods PUT, POST and PATCH; and one for the method DELETE.
All paths start with the &amp;quot;Start&amp;quot; diagram, and all paths excluding the OPTIONS path go through the &amp;quot;Content negotiation&amp;quot; diagram and optionally the &amp;quot;Conditional requests&amp;quot; diagram if the resource exists.</description>
    </item>
    
    <item>
      <title>REST flowcharts</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/rest_flowcharts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/rest_flowcharts/</guid>
      <description>This chapter will explain the REST handler state machine through a number of different diagrams.
There are four main paths that requests may follow. One for the method OPTIONS; one for the methods GET and HEAD; one for the methods PUT, POST and PATCH; and one for the method DELETE.
All paths start with the &amp;quot;Start&amp;quot; diagram, and all paths excluding the OPTIONS path go through the &amp;quot;Content negotiation&amp;quot; diagram and optionally the &amp;quot;Conditional requests&amp;quot; diagram if the resource exists.</description>
    </item>
    
    <item>
      <title>REST flowcharts</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/rest_flowcharts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/rest_flowcharts/</guid>
      <description>This chapter will explain the REST handler state machine through a number of different diagrams.
There are four main paths that requests may follow. One for the method OPTIONS; one for the methods GET and HEAD; one for the methods PUT, POST and PATCH; and one for the method DELETE.
All paths start with the &amp;quot;Start&amp;quot; diagram, and all paths excluding the OPTIONS path go through the &amp;quot;Content negotiation&amp;quot; diagram and optionally the &amp;quot;Conditional requests&amp;quot; diagram if the resource exists.</description>
    </item>
    
    <item>
      <title>REST flowcharts</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/rest_flowcharts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/rest_flowcharts/</guid>
      <description>This chapter will explain the REST handler state machine through a number of different diagrams.
There are four main paths that requests may follow. One for the method OPTIONS; one for the methods GET and HEAD; one for the methods PUT, POST and PATCH; and one for the method DELETE.
All paths start with the &amp;quot;Start&amp;quot; diagram, and all paths excluding the OPTIONS path go through the &amp;quot;Content negotiation&amp;quot; diagram and optionally the &amp;quot;Conditional requests&amp;quot; diagram if the resource exists.</description>
    </item>
    
    <item>
      <title>REST flowcharts</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/rest_flowcharts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/rest_flowcharts/</guid>
      <description>This chapter will explain the REST handler state machine through a number of different diagrams.
There are four main paths that requests may follow. One for the method OPTIONS; one for the methods GET and HEAD; one for the methods PUT, POST and PATCH; and one for the method DELETE.
All paths start with the &amp;quot;Start&amp;quot; diagram, and all paths excluding the OPTIONS path go through the &amp;quot;Content negotiation&amp;quot; diagram and optionally the &amp;quot;Conditional requests&amp;quot; diagram if the resource exists.</description>
    </item>
    
    <item>
      <title>REST flowcharts</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/rest_flowcharts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/rest_flowcharts/</guid>
      <description>This chapter will explain the REST handler state machine through a number of different diagrams.
There are four main paths that requests may follow. One for the method OPTIONS; one for the methods GET and HEAD; one for the methods PUT, POST and PATCH; and one for the method DELETE.
All paths start with the &amp;quot;Start&amp;quot; diagram, and all paths excluding the OPTIONS path go through the &amp;quot;Content negotiation&amp;quot; diagram and optionally the &amp;quot;Conditional requests&amp;quot; diagram if the resource exists.</description>
    </item>
    
    <item>
      <title>Triq</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/triq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/triq/</guid>
      <description>Triq is a QuickCheck-like library for property-based testing. Erlang.mk automates discovery and checking of Triq properties.
To run all tests (including Triq):
$ make tests  To run all tests and static checks (including Triq):
$ make check  You can also run Triq separately:
$ make triq  To check properties from a single module:
$ make triq t=foo_tests  To check a single property:
$ make triq t=foo_tests:bar  </description>
    </item>
    
    <item>
      <title>Code coverage</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/coverage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/coverage/</guid>
      <description>Erlang.mk provides support for code coverage via the tool cover that comes with Erlang/OTP. Code coverage lets you see what parts of your code are covered by the tests.
Enabling cover when running tests To run tests with code coverage enabled, simply define COVER=1 either on the command line or in your Makefile:
$ make tests COVER=1  When running the targets tests or check the code coverage report will be built automatically.</description>
    </item>
    
    <item>
      <title>Designing a resource handler</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/resource_design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/resource_design/</guid>
      <description>This chapter aims to provide you with a list of questions you must answer in order to write a good resource handler. It is meant to be usable as a step by step guide.
The service Can the service become unavailable, and when it does, can we detect it? For example, database connectivity problems may be detected early. We may also have planned outages of all or parts of the system.</description>
    </item>
    
    <item>
      <title>Designing a resource handler</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/resource_design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/resource_design/</guid>
      <description>This chapter aims to provide you with a list of questions you must answer in order to write a good resource handler. It is meant to be usable as a step by step guide.
The service Can the service become unavailable, and when it does, can we detect it? For example, database connectivity problems may be detected early. We may also have planned outages of all or parts of the system.</description>
    </item>
    
    <item>
      <title>Designing a resource handler</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/resource_design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/resource_design/</guid>
      <description>This chapter aims to provide you with a list of questions you must answer in order to write a good resource handler. It is meant to be usable as a step by step guide.
The service Can the service become unavailable, and when it does, can we detect it? For example, database connectivity problems may be detected early. We may also have planned outages of all or parts of the system.</description>
    </item>
    
    <item>
      <title>Designing a resource handler</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/resource_design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/resource_design/</guid>
      <description>This chapter aims to provide you with a list of questions you must answer in order to write a good resource handler. It is meant to be usable as a step by step guide.
The service Can the service become unavailable, and when it does, can we detect it? For example, database connectivity problems may be detected early. We may also have planned outages of all or parts of the system.</description>
    </item>
    
    <item>
      <title>Designing a resource handler</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/resource_design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/resource_design/</guid>
      <description>This chapter aims to provide you with a list of questions you must answer in order to write a good resource handler. It is meant to be usable as a step by step guide.
The service Can the service become unavailable, and when it does, can we detect it? For example, database connectivity problems may be detected early. We may also have planned outages of all or parts of the system.</description>
    </item>
    
    <item>
      <title>Designing a resource handler</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/resource_design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/resource_design/</guid>
      <description>This chapter aims to provide you with a list of questions you must answer in order to write a good resource handler. It is meant to be usable as a step by step guide.
The service Can the service become unavailable, and when it does, can we detect it? For example, database connectivity problems may be detected early. We may also have planned outages of all or parts of the system.</description>
    </item>
    
    <item>
      <title>Designing a resource handler</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/resource_design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/resource_design/</guid>
      <description>This chapter aims to provide you with a list of questions you must answer in order to write a good resource handler. It is meant to be usable as a step by step guide.
The service Can the service become unavailable, and when it does, can we detect it? For example, database connectivity problems may be detected early. We may also have planned outages of all or parts of the system.</description>
    </item>
    
    <item>
      <title>Continuous integration</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/ci/</guid>
      <description>Erlang.mk comes with some support for continuous integration, aimed at open source projects that need to support more than one specific Erlang/OTP release. (If you target one specific release, check the OTP version pinning section of the OTP version management chapter.)
Configuring Erlang/OTP versions to test To use the CI plugin you must first configure which versions of Erlang/OTP will be used. Erlang.mk provides three separate configuration variables depending on whether you need a normal OTP release, a HiPE-enabled release or an ErLLVM-enabled release.</description>
    </item>
    
    <item>
      <title>The Websocket protocol</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/ws_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/ws_protocol/</guid>
      <description>This chapter explains what Websocket is and why it is a vital component of soft realtime Web applications.
Description Websocket is an extension to HTTP that emulates plain TCP connections between the client, typically a Web browser, and the server. It uses the HTTP Upgrade mechanism to establish the connection.
Websocket connections are fully asynchronous, unlike HTTP/1.1 (synchronous) and HTTP/2 (asynchronous, but the server can only initiate streams in response to requests).</description>
    </item>
    
    <item>
      <title>The Websocket protocol</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/ws_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/ws_protocol/</guid>
      <description>This chapter explains what Websocket is and why it is a vital component of soft realtime Web applications.
Description Websocket is an extension to HTTP that emulates plain TCP connections between the client, typically a Web browser, and the server. It uses the HTTP Upgrade mechanism to establish the connection.
Websocket connections are fully asynchronous, unlike HTTP/1.1 (synchronous) and HTTP/2 (asynchronous, but the server can only initiate streams in response to requests).</description>
    </item>
    
    <item>
      <title>The Websocket protocol</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/ws_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/ws_protocol/</guid>
      <description>This chapter explains what Websocket is and why it is a vital component of soft realtime Web applications.
Description Websocket is an extension to HTTP that emulates plain TCP connections between the client, typically a Web browser, and the server. It uses the HTTP Upgrade mechanism to establish the connection.
Websocket connections are fully asynchronous, unlike HTTP/1.1 (synchronous) and HTTP/2 (asynchronous, but the server can only initiate streams in response to requests).</description>
    </item>
    
    <item>
      <title>The Websocket protocol</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/ws_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/ws_protocol/</guid>
      <description>This chapter explains what Websocket is and why it is a vital component of soft realtime Web applications.
Description Websocket is an extension to HTTP that emulates plain TCP connections between the client, typically a Web browser, and the server. It uses the HTTP Upgrade mechanism to establish the connection.
Websocket connections are fully asynchronous, unlike HTTP/1.1 (synchronous) and HTTP/2 (asynchronous, but the server can only initiate streams in response to requests).</description>
    </item>
    
    <item>
      <title>The Websocket protocol</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/ws_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/ws_protocol/</guid>
      <description>This chapter explains what Websocket is and why it is a vital component of soft realtime Web applications.
Description Websocket is an extension to HTTP that emulates plain TCP connections between the client, typically a Web browser, and the server. It uses the HTTP Upgrade mechanism to establish the connection.
Websocket connections are fully asynchronous, unlike HTTP/1.1 (synchronous) and HTTP/2 (asynchronous, but the server can only initiate streams in response to requests).</description>
    </item>
    
    <item>
      <title>The Websocket protocol</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/ws_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/ws_protocol/</guid>
      <description>This chapter explains what Websocket is and why it is a vital component of soft realtime Web applications.
Description Websocket is an extension to HTTP that emulates plain TCP connections between the client, typically a Web browser, and the server. It uses the HTTP Upgrade mechanism to establish the connection.
Websocket connections are fully asynchronous, unlike HTTP/1.1 (synchronous) and HTTP/2 (asynchronous, but the server can only initiate streams in response to requests).</description>
    </item>
    
    <item>
      <title>The Websocket protocol</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/ws_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/ws_protocol/</guid>
      <description>This chapter explains what Websocket is and why it is a vital component of soft realtime Web applications.
Description Websocket is an extension to HTTP that emulates plain TCP connections between the client, typically a Web browser, and the server. It uses the HTTP Upgrade mechanism to establish the connection.
Websocket connections are fully asynchronous, unlike HTTP/1.1 (synchronous) and HTTP/2 (asynchronous, but the server can only initiate streams in response to requests).</description>
    </item>
    
    <item>
      <title>Dialyzer</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/dialyzer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/dialyzer/</guid>
      <description>Dialyzer is a tool that will detect discrepancies in your program. It does so using a technique known as success typing analysis which has the advantage of providing no false positives. Dialyzer is able to detect type errors, dead code and more.
Erlang.mk provides a wrapper around Dialyzer.
How it works Dialyzer requires a PLT file to work. The PLT file contains the analysis information from all applications which are not expected to change, or rarely do.</description>
    </item>
    
    <item>
      <title>Xref</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/xref/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/xref/</guid>
      <description>Placeholder chapter.</description>
    </item>
    
    <item>
      <title>Websocket handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/ws_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/ws_handlers/</guid>
      <description>Websocket handlers provide an interface for upgrading HTTP/1.1 connections to Websocket and sending or receiving frames on the Websocket connection.
As Websocket connections are established through the HTTP/1.1 upgrade mechanism, Websocket handlers need to be able to first receive the HTTP request for the upgrade, before switching to Websocket and taking over the connection. They can then receive or send Websocket frames, handle incoming Erlang messages or close the connection.</description>
    </item>
    
    <item>
      <title>Websocket handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/ws_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/ws_handlers/</guid>
      <description>Websocket handlers provide an interface for upgrading HTTP/1.1 connections to Websocket and sending or receiving frames on the Websocket connection.
As Websocket connections are established through the HTTP/1.1 upgrade mechanism, Websocket handlers need to be able to first receive the HTTP request for the upgrade, before switching to Websocket and taking over the connection. They can then receive or send Websocket frames, handle incoming Erlang messages or close the connection.</description>
    </item>
    
    <item>
      <title>Websocket handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/ws_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/ws_handlers/</guid>
      <description>Websocket handlers provide an interface for upgrading HTTP/1.1 connections to Websocket and sending or receiving frames on the Websocket connection.
As Websocket connections are established through the HTTP/1.1 upgrade mechanism, Websocket handlers need to be able to first receive the HTTP request for the upgrade, before switching to Websocket and taking over the connection. They can then receive or send Websocket frames, handle incoming Erlang messages or close the connection.</description>
    </item>
    
    <item>
      <title>Websocket handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/ws_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/ws_handlers/</guid>
      <description>Websocket handlers provide an interface for upgrading HTTP/1.1 connections to Websocket and sending or receiving frames on the Websocket connection.
As Websocket connections are established through the HTTP/1.1 upgrade mechanism, Websocket handlers need to be able to first receive the HTTP request for the upgrade, before switching to Websocket and taking over the connection. They can then receive or send Websocket frames, handle incoming Erlang messages or close the connection.</description>
    </item>
    
    <item>
      <title>Websocket handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/ws_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/ws_handlers/</guid>
      <description>Websocket handlers provide an interface for upgrading HTTP/1.1 connections to Websocket and sending or receiving frames on the Websocket connection.
As Websocket connections are established through the HTTP/1.1 upgrade mechanism, Websocket handlers need to be able to first receive the HTTP request for the upgrade, before switching to Websocket and taking over the connection. They can then receive or send Websocket frames, handle incoming Erlang messages or close the connection.</description>
    </item>
    
    <item>
      <title>Websocket handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/ws_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/ws_handlers/</guid>
      <description>Websocket handlers provide an interface for upgrading HTTP/1.1 connections to Websocket and sending or receiving frames on the Websocket connection.
As Websocket connections are established through the HTTP/1.1 upgrade mechanism, Websocket handlers need to be able to first receive the HTTP request for the upgrade, before switching to Websocket and taking over the connection. They can then receive or send Websocket frames, handle incoming Erlang messages or close the connection.</description>
    </item>
    
    <item>
      <title>Websocket handlers</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/ws_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/ws_handlers/</guid>
      <description>Websocket handlers provide an interface for upgrading HTTP/1.1 connections to Websocket and sending or receiving frames on the Websocket connection.
As Websocket connections are established through the HTTP/1.1 upgrade mechanism, Websocket handlers need to be able to first receive the HTTP request for the upgrade, before switching to Websocket and taking over the connection. They can then receive or send Websocket frames, handle incoming Erlang messages or close the connection.</description>
    </item>
    
    <item>
      <title>External plugins</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/external_plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/external_plugins/</guid>
      <description>It is often convenient to be able to keep the build files used by all your projects in one place. Those files could be Makefiles, configuration files, templates and more.
Erlang.mk allows you to automatically load plugins from dependencies. Plugins can do anything, including defining new variables, defining file templates, hooking themselves inside the normal Erlang.mk processing or even adding new rules.
You can load plugins using one of two methods.</description>
    </item>
    
    <item>
      <title>Streams</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/streams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/streams/</guid>
      <description>A stream is the set of messages that form an HTTP request/response pair.
The term stream comes from HTTP/2. In Cowboy, it is also used when talking about HTTP/1.1 or HTTP/1.0. It should not be confused with streaming the request or response body.
All versions of HTTP allow clients to initiate streams. HTTP/2 is the only one also allowing servers, through its server push feature. Both client and server-initiated streams go through the same process in Cowboy.</description>
    </item>
    
    <item>
      <title>Streams</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/streams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/streams/</guid>
      <description>A stream is the set of messages that form an HTTP request/response pair.
The term stream comes from HTTP/2. In Cowboy, it is also used when talking about HTTP/1.1 or HTTP/1.0. It should not be confused with streaming the request or response body.
All versions of HTTP allow clients to initiate streams. HTTP/2 is the only one also allowing servers, through its server push feature. Both client and server-initiated streams go through the same process in Cowboy.</description>
    </item>
    
    <item>
      <title>Streams</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/streams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/streams/</guid>
      <description>A stream is the set of messages that form an HTTP request/response pair.
The term stream comes from HTTP/2. In Cowboy, it is also used when talking about HTTP/1.1 or HTTP/1.0. It should not be confused with streaming the request or response body.
All versions of HTTP allow clients to initiate streams. HTTP/2 is the only one also allowing servers, through its server push feature. Both client and server-initiated streams go through the same process in Cowboy.</description>
    </item>
    
    <item>
      <title>Streams</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/streams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/streams/</guid>
      <description>A stream is the set of messages that form an HTTP request/response pair.
The term stream comes from HTTP/2. In Cowboy, it is also used when talking about HTTP/1.1 or HTTP/1.0. It should not be confused with streaming the request or response body.
All versions of HTTP allow clients to initiate streams. HTTP/2 is the only one also allowing servers, through its server push feature. Both client and server-initiated streams go through the same process in Cowboy.</description>
    </item>
    
    <item>
      <title>Streams</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/streams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/streams/</guid>
      <description>A stream is the set of messages that form an HTTP request/response pair.
The term stream comes from HTTP/2. In Cowboy, it is also used when talking about HTTP/1.1 or HTTP/1.0. It should not be confused with streaming the request or response body.
All versions of HTTP allow clients to initiate streams. HTTP/2 is the only one also allowing servers, through its server push feature. Both client and server-initiated streams go through the same process in Cowboy.</description>
    </item>
    
    <item>
      <title>Streams</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/streams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/streams/</guid>
      <description>A stream is the set of messages that form an HTTP request/response pair.
The term stream comes from HTTP/2. In Cowboy, it is also used when talking about HTTP/1.1 or HTTP/1.0. It should not be confused with streaming the request or response body.
All versions of HTTP allow clients to initiate streams. HTTP/2 is the only one also allowing servers, through its server push feature. Both client and server-initiated streams go through the same process in Cowboy.</description>
    </item>
    
    <item>
      <title>Streams</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/streams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/streams/</guid>
      <description>A stream is the set of messages that form an HTTP request/response pair.
The term stream comes from HTTP/2. In Cowboy, it is also used when talking about HTTP/1.1 or HTTP/1.0. It should not be confused with streaming the request or response body.
All versions of HTTP allow clients to initiate streams. HTTP/2 is the only one also allowing servers, through its server push feature. Both client and server-initiated streams go through the same process in Cowboy.</description>
    </item>
    
    <item>
      <title>List of plugins</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/external_plugins_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/external_plugins_list/</guid>
      <description>This is a non-exhaustive list of Erlang.mk plugins, sorted alphabetically.
ci.erlang.mk A plugin that keeps track of released OTP versions to always run CI builds on the most recent patch(es).
efene.mk An Efene plugin for Erlang.mk. Efene is an alternative language for the BEAM.
elixir.mk An Elixir plugin for Erlang.mk. Elixir is an alternative language for the BEAM.
elvis.mk An Elvis plugin for Erlang.mk. Elvis is an Erlang style reviewer.</description>
    </item>
    
    <item>
      <title>Middlewares</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/middlewares/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/middlewares/</guid>
      <description>Cowboy delegates the request processing to middleware components. By default, two middlewares are defined, for the routing and handling of the request, as is detailed in most of this guide.
Middlewares give you complete control over how requests are to be processed. You can add your own middlewares to the mix or completely change the chain of middlewares as needed.
Cowboy will execute all middlewares in the given order, unless one of them decides to stop processing.</description>
    </item>
    
    <item>
      <title>Middlewares</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/middlewares/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/middlewares/</guid>
      <description>Cowboy delegates the request processing to middleware components. By default, two middlewares are defined, for the routing and handling of the request, as is detailed in most of this guide.
Middlewares give you complete control over how requests are to be processed. You can add your own middlewares to the mix or completely change the chain of middlewares as needed.
Cowboy will execute all middlewares in the given order, unless one of them decides to stop processing.</description>
    </item>
    
    <item>
      <title>Middlewares</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/middlewares/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/middlewares/</guid>
      <description>Cowboy delegates the request processing to middleware components. By default, two middlewares are defined, for the routing and handling of the request, as is detailed in most of this guide.
Middlewares give you complete control over how requests are to be processed. You can add your own middlewares to the mix or completely change the chain of middlewares as needed.
Cowboy will execute all middlewares in the given order, unless one of them decides to stop processing.</description>
    </item>
    
    <item>
      <title>Middlewares</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/middlewares/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/middlewares/</guid>
      <description>Cowboy delegates the request processing to middleware components. By default, two middlewares are defined, for the routing and handling of the request, as is detailed in most of this guide.
Middlewares give you complete control over how requests are to be processed. You can add your own middlewares to the mix or completely change the chain of middlewares as needed.
Cowboy will execute all middlewares in the given order, unless one of them decides to stop processing.</description>
    </item>
    
    <item>
      <title>Middlewares</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/middlewares/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/middlewares/</guid>
      <description>Cowboy delegates the request processing to middleware components. By default, two middlewares are defined, for the routing and handling of the request, as is detailed in most of this guide.
Middlewares give you complete control over how requests are to be processed. You can add your own middlewares to the mix or completely change the chain of middlewares as needed.
Cowboy will execute all middlewares in the given order, unless one of them decides to stop processing.</description>
    </item>
    
    <item>
      <title>Middlewares</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/middlewares/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/middlewares/</guid>
      <description>Cowboy delegates the request processing to middleware components. By default, two middlewares are defined, for the routing and handling of the request, as is detailed in most of this guide.
Middlewares give you complete control over how requests are to be processed. You can add your own middlewares to the mix or completely change the chain of middlewares as needed.
Cowboy will execute all middlewares in the given order, unless one of them decides to stop processing.</description>
    </item>
    
    <item>
      <title>Middlewares</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/middlewares/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/middlewares/</guid>
      <description>Cowboy delegates the request processing to middleware components. By default, two middlewares are defined, for the routing and handling of the request, as is detailed in most of this guide.
Middlewares give you complete control over how requests are to be processed. You can add your own middlewares to the mix or completely change the chain of middlewares as needed.
Cowboy will execute all middlewares in the given order, unless one of them decides to stop processing.</description>
    </item>
    
    <item>
      <title>Changes since Cowboy 2.2</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/migrating_from_2.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/migrating_from_2.2/</guid>
      <description>The following patch versions were released since Cowboy 2.2:
Cowboy 2.2.2 While fixing the miscount in the previous patch release an issue was introduced where HTTP/2 bodies could be sent out of orders when using iolists. This has been corrected.   Cowboy 2.2.1 Colons are now allowed within path segments in routes provided to cowboy_router:compile/1 as long as they are not the first character of the path segment.  The cowboy_req:delete_resp_header/2 function will no longer crash when no response header was set before calling it.</description>
    </item>
    
    <item>
      <title>Changes since Cowboy 2.6</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.6/</guid>
      <description>The following patch versions were released since Cowboy 2.6:
Cowboy 2.6.3 This release updates Cowlib to 2.7.3 to fix the vsn value in the cowlib.app file that was causing issues to Elixir users.
Cowboy 2.6.2 This release updates Cowlib to 2.7.2.
A bug in the HTTP/2 code that resulted in the failure to fully send iolist response bodies has been fixed. Cowboy would just wait indefinitely in those cases.
Cowboy will now use the host header when the HTTP/2 :authority pseudo header is missing.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 1.0 to 2.0</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/migrating_from_1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/migrating_from_1.0/</guid>
      <description>A lot has changed between Cowboy 1.0 and 2.0. The cowboy_req interface in particular has seen a massive revamp. Hooks are gone, their functionality can now be achieved via stream handlers.
The documentation has seen great work, in particular the manual. Each module and each function now has its own dedicated manual page with full details and examples.
Compatibility Compatibility with Erlang/OTP R16, 17 and 18 has been dropped. Erlang/OTP 19.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.0 to 2.1</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/migrating_from_2.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/migrating_from_2.0/</guid>
      <description>Cowboy 2.1 focused on adding features that were temporarily removed in Cowboy 2.0. A number of bugs found in the 2.0 release were also fixed.
Features added It is now possible to obtain the client TLS certificate and the local IP/port for the connection from the Req object.  Informational responses (1XX responses) can now be sent. They must be sent before initiating the final response.  The expect: 100-continue header is now handled automatically.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.2 to 2.3</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/migrating_from_2.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/migrating_from_2.2/</guid>
      <description>Cowboy 2.3 focused on making the Cowboy processes behave properly according to OTP principles. This version is a very good milestone toward that goal and most of everything should now work. Release upgrades and a few details will be improved in future versions.
Features added Add support for all functions from the module sys. Note that Cowboy currently does not implement the sys debugging mechanisms as tracing is recommended instead.  Add a max_frame_size option for Websocket handlers to close the connection when the client attempts to send a frame that&amp;apos;s too large.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.3 to 2.4</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/migrating_from_2.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/migrating_from_2.3/</guid>
      <description>Cowboy 2.4 focused on improving the HTTP/2 implementation. All existing tests from RFC7540 and the h2spec test suite now all pass. Numerous options have been added to control SETTINGS and related behavior. In addition experimental support for Websocket over HTTP/2 was added.
Features added Add experimental support for Websocket over HTTP/2. You can use the enable_connect_protocol option to enable. It implements the following draft: https://tools.ietf.org/html/draft-ietf-httpbis-h2-websockets-01  Add options max_decode_table_size and max_encode_table_size to restrict the size of the HPACK compression dictionary.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.4 to 2.5</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/migrating_from_2.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/migrating_from_2.4/</guid>
      <description>Cowboy 2.5 focused on making the test suites pass. A variety of new features, fixes and improvements have also been worked on.
Features added Add option linger_timeout to control how long Cowboy will wait before closing the socket when shutting down the connection. This helps avoid the TCP reset problem HTTP/1.1 suffers from. The default is now 1000 ms.  It is now possible to stream a response body without using chunked transfer-encoding when the protocol is HTTP/1.</description>
    </item>
    
    <item>
      <title>Why Erlang.mk</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/why/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/why/</guid>
      <description>Why would you choose Erlang.mk, if not for its many features? This chapter will attempt to answer that.
Erlang.mk is fast Erlang.mk is as fast as it gets.
Erlang.mk will group the compilation of files so as to avoid running the BEAM more than necessary. This saves many seconds compared to traditional Makefiles, even on small projects.
Erlang.mk will not try to be too smart. It provides a simple solution that works for most people, and gives additional options for projects that run into edge cases, often in the form of extra variables or rules to be defined.</description>
    </item>
    
    <item>
      <title>Short history</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/history/</guid>
      <description>This chapter aims to be a brief record of the life of the Erlang.mk project.
Before Erlang.mk Erlang.mk originates from the Cowboy project. Cowboy started as a Rebar project and I, Lo誰c Hoguin, was very happy with it for a couple years. Over time however I started getting annoyed and frustrated by a number of things, including bad defaults, changing defaults and overall slowness.
In particular, at the time I gave up on Rebar, the Cowboy test suite was taking about five minutes to run.</description>
    </item>
    
    <item>
      <title>HTTP and other specifications</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/specs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/specs/</guid>
      <description>This chapter intends to list all the specification documents for or related to HTTP.
HTTP IANA Registries HTTP Method Registry  HTTP Status Code Registry  Message Headers  HTTP Parameters  HTTP Alt-Svc Parameter Registry  HTTP Authentication Scheme Registry  HTTP Cache Directive Registry  HTTP Digest Algorithm Values  HTTP Origin-Bound Authentication Device Identifier Types  HTTP Upgrade Token Registry  HTTP Warn Codes  HTTP/2 Parameters  WebSocket Protocol Registries   Current CORS: Cross-Origin Resource Sharing  CSP2: Content Security Policy Level 2  DNT: Tracking Preference Expression (DNT)  eventsource: Server-Sent Events  Form content types: Form content types  Preload: Preload  REST: Fielding&amp;apos;s Dissertation  RFC 1945: HTTP/1.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 1.0 to 2.0</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/migrating_from_1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/migrating_from_1.0/</guid>
      <description>A lot has changed between Cowboy 1.0 and 2.0. The cowboy_req interface in particular has seen a massive revamp. Hooks are gone, their functionality can now be achieved via stream handlers.
The documentation has seen great work, in particular the manual. Each module and each function now has its own dedicated manual page with full details and examples.
Compatibility Compatibility with Erlang/OTP R16, 17 and 18 has been dropped. Erlang/OTP 19.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.1 to 2.2</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/migrating_from_2.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/migrating_from_2.1/</guid>
      <description>Cowboy 2.2 focused on adding features required for writing gRPC servers and on completing test suites for the core HTTP RFCs, fixing many bugs along the way.
Features added Add support for sending trailers at the end of response bodies. Trailers are additional header fields that may be sent after the body to add more information to the response. Their usage is required in gRPC servers. They are optional and may be discarded in other scenarios (for example if the request goes through an HTTP/1.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.1 to 2.2</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/migrating_from_2.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/migrating_from_2.1/</guid>
      <description>Cowboy 2.2 focused on adding features required for writing gRPC servers and on completing test suites for the core HTTP RFCs, fixing many bugs along the way.
Features added Add support for sending trailers at the end of response bodies. Trailers are additional header fields that may be sent after the body to add more information to the response. Their usage is required in gRPC servers. They are optional and may be discarded in other scenarios (for example if the request goes through an HTTP/1.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.2 to 2.3</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/migrating_from_2.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/migrating_from_2.2/</guid>
      <description>Cowboy 2.3 focused on making the Cowboy processes behave properly according to OTP principles. This version is a very good milestone toward that goal and most of everything should now work. Release upgrades and a few details will be improved in future versions.
Features added Add support for all functions from the module sys. Note that Cowboy currently does not implement the sys debugging mechanisms as tracing is recommended instead.  Add a max_frame_size option for Websocket handlers to close the connection when the client attempts to send a frame that&amp;apos;s too large.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.3 to 2.4</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/migrating_from_2.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/migrating_from_2.3/</guid>
      <description>Cowboy 2.4 focused on improving the HTTP/2 implementation. All existing tests from RFC7540 and the h2spec test suite now all pass. Numerous options have been added to control SETTINGS and related behavior. In addition experimental support for Websocket over HTTP/2 was added.
Features added Add experimental support for Websocket over HTTP/2. You can use the enable_connect_protocol option to enable. It implements the following draft: https://tools.ietf.org/html/draft-ietf-httpbis-h2-websockets-01  Add options max_decode_table_size and max_encode_table_size to restrict the size of the HPACK compression dictionary.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.5 to 2.6</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.5/</guid>
      <description>Cowboy 2.6 greatly refactored the HTTP/2 code, a large part of which was moved to Cowlib and is now used by both the Cowboy server and the Gun client.
A large number of tickets were also closed which resulted in many bugs fixed and many features and options added, although some of them are still experimental.
Features added Add support for the PROXY protocol header. It can be enabled via the proxy_header option.</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/contributing/</guid>
      <description>You are welcome and encouraged to contribute.
This is how.
Priorities From the most important to the least important:
Bugs  Package issues/additions  Refactoring  Features   Bugs If you have found a bug, you should open a ticket. Include everything relevant including the command you used, output, a link to the code that triggers the issue, why you think this is a bug, etc.
If you think you have found a bug but you are not sure, you should open a ticket as previously explained.</description>
    </item>
    
    <item>
      <title>HTTP and other specifications</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/specs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/specs/</guid>
      <description>This chapter intends to list all the specification documents for or related to HTTP.
HTTP IANA Registries HTTP Method Registry  HTTP Status Code Registry  Message Headers  HTTP Parameters  HTTP Alt-Svc Parameter Registry  HTTP Authentication Scheme Registry  HTTP Cache Directive Registry  HTTP Digest Algorithm Values  HTTP Origin-Bound Authentication Device Identifier Types  HTTP Upgrade Token Registry  HTTP Warn Codes  HTTP/2 Parameters  WebSocket Protocol Registries   Current CORS: Cross-Origin Resource Sharing  CSP2: Content Security Policy Level 2  DNT: Tracking Preference Expression (DNT)  eventsource: Server-Sent Events  Form content types: Form content types  Preload: Preload  REST: Fielding&amp;apos;s Dissertation  RFC 1945: HTTP/1.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.0 to 2.1</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/migrating_from_2.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/migrating_from_2.0/</guid>
      <description>Cowboy 2.1 focused on adding features that were temporarily removed in Cowboy 2.0. A number of bugs found in the 2.0 release were also fixed.
Features added It is now possible to obtain the client TLS certificate and the local IP/port for the connection from the Req object.  Informational responses (1XX responses) can now be sent. They must be sent before initiating the final response.  The expect: 100-continue header is now handled automatically.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.0 to 2.1</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/migrating_from_2.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/migrating_from_2.0/</guid>
      <description>Cowboy 2.1 focused on adding features that were temporarily removed in Cowboy 2.0. A number of bugs found in the 2.0 release were also fixed.
Features added It is now possible to obtain the client TLS certificate and the local IP/port for the connection from the Req object.  Informational responses (1XX responses) can now be sent. They must be sent before initiating the final response.  The expect: 100-continue header is now handled automatically.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.1 to 2.2</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/migrating_from_2.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/migrating_from_2.1/</guid>
      <description>Cowboy 2.2 focused on adding features required for writing gRPC servers and on completing test suites for the core HTTP RFCs, fixing many bugs along the way.
Features added Add support for sending trailers at the end of response bodies. Trailers are additional header fields that may be sent after the body to add more information to the response. Their usage is required in gRPC servers. They are optional and may be discarded in other scenarios (for example if the request goes through an HTTP/1.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.2 to 2.3</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/migrating_from_2.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/migrating_from_2.2/</guid>
      <description>Cowboy 2.3 focused on making the Cowboy processes behave properly according to OTP principles. This version is a very good milestone toward that goal and most of everything should now work. Release upgrades and a few details will be improved in future versions.
Features added Add support for all functions from the module sys. Note that Cowboy currently does not implement the sys debugging mechanisms as tracing is recommended instead.  Add a max_frame_size option for Websocket handlers to close the connection when the client attempts to send a frame that&amp;apos;s too large.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.4 to 2.5</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.4/</guid>
      <description>Cowboy 2.5 focused on making the test suites pass. A variety of new features, fixes and improvements have also been worked on.
Features added Add option linger_timeout to control how long Cowboy will wait before closing the socket when shutting down the connection. This helps avoid the TCP reset problem HTTP/1.1 suffers from. The default is now 1000 ms.  It is now possible to stream a response body without using chunked transfer-encoding when the protocol is HTTP/1.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 1.0 to 2.0</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/migrating_from_1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/migrating_from_1.0/</guid>
      <description>A lot has changed between Cowboy 1.0 and 2.0. The cowboy_req interface in particular has seen a massive revamp. Hooks are gone, their functionality can now be achieved via stream handlers.
The documentation has seen great work, in particular the manual. Each module and each function now has its own dedicated manual page with full details and examples.
Compatibility Compatibility with Erlang/OTP R16, 17 and 18 has been dropped. Erlang/OTP 19.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 1.0 to 2.0</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/migrating_from_1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/migrating_from_1.0/</guid>
      <description>A lot has changed between Cowboy 1.0 and 2.0. The cowboy_req interface in particular has seen a massive revamp. Hooks are gone, their functionality can now be achieved via stream handlers.
The documentation has seen great work, in particular the manual. Each module and each function now has its own dedicated manual page with full details and examples.
Compatibility Compatibility with Erlang/OTP R16, 17 and 18 has been dropped. Erlang/OTP 19.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.0 to 2.1</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/migrating_from_2.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/migrating_from_2.0/</guid>
      <description>Cowboy 2.1 focused on adding features that were temporarily removed in Cowboy 2.0. A number of bugs found in the 2.0 release were also fixed.
Features added It is now possible to obtain the client TLS certificate and the local IP/port for the connection from the Req object.  Informational responses (1XX responses) can now be sent. They must be sent before initiating the final response.  The expect: 100-continue header is now handled automatically.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.1 to 2.2</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/migrating_from_2.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/migrating_from_2.1/</guid>
      <description>Cowboy 2.2 focused on adding features required for writing gRPC servers and on completing test suites for the core HTTP RFCs, fixing many bugs along the way.
Features added Add support for sending trailers at the end of response bodies. Trailers are additional header fields that may be sent after the body to add more information to the response. Their usage is required in gRPC servers. They are optional and may be discarded in other scenarios (for example if the request goes through an HTTP/1.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.3 to 2.4</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.3/</guid>
      <description>Cowboy 2.4 focused on improving the HTTP/2 implementation. All existing tests from RFC7540 and the h2spec test suite now all pass. Numerous options have been added to control SETTINGS and related behavior. In addition experimental support for Websocket over HTTP/2 was added.
Features added Add experimental support for Websocket over HTTP/2. You can use the enable_connect_protocol option to enable. It implements the following draft: https://tools.ietf.org/html/draft-ietf-httpbis-h2-websockets-01  Add options max_decode_table_size and max_encode_table_size to restrict the size of the HPACK compression dictionary.</description>
    </item>
    
    <item>
      <title>HTTP and other specifications</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/specs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/specs/</guid>
      <description>This chapter intends to list all the specification documents for or related to HTTP.
HTTP IANA Registries HTTP Method Registry  HTTP Status Code Registry  Message Headers  HTTP Parameters  HTTP Alt-Svc Parameter Registry  HTTP Authentication Scheme Registry  HTTP Cache Directive Registry  HTTP Digest Algorithm Values  HTTP Origin-Bound Authentication Device Identifier Types  HTTP Upgrade Token Registry  HTTP Warn Codes  HTTP/2 Parameters  WebSocket Protocol Registries   Current CORS: Cross-Origin Resource Sharing  CSP2: Content Security Policy Level 2  DNT: Tracking Preference Expression (DNT)  eventsource: Server-Sent Events  Form content types: Form content types  Preload: Preload  REST: Fielding&amp;apos;s Dissertation  RFC 1945: HTTP/1.</description>
    </item>
    
    <item>
      <title>HTTP and other specifications</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/specs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/specs/</guid>
      <description>This chapter intends to list all the specification documents for or related to HTTP.
HTTP IANA Registries HTTP Method Registry  HTTP Status Code Registry  Message Headers  HTTP Parameters  HTTP Alt-Svc Parameter Registry  HTTP Authentication Scheme Registry  HTTP Cache Directive Registry  HTTP Digest Algorithm Values  HTTP Origin-Bound Authentication Device Identifier Types  HTTP Upgrade Token Registry  HTTP Warn Codes  HTTP/2 Parameters  WebSocket Protocol Registries   Current CORS: Cross-Origin Resource Sharing  CSP2: Content Security Policy Level 2  DNT: Tracking Preference Expression (DNT)  eventsource: Server-Sent Events  Form content types: Form content types  Preload: Preload  PROXY: The PROXY protocol  REST: Fielding&amp;apos;s Dissertation  RFC 1945: HTTP/1.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 1.0 to 2.0</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/migrating_from_1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/migrating_from_1.0/</guid>
      <description>A lot has changed between Cowboy 1.0 and 2.0. The cowboy_req interface in particular has seen a massive revamp. Hooks are gone, their functionality can now be achieved via stream handlers.
The documentation has seen great work, in particular the manual. Each module and each function now has its own dedicated manual page with full details and examples.
Compatibility Compatibility with Erlang/OTP R16, 17 and 18 has been dropped. Erlang/OTP 19.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.0 to 2.1</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/migrating_from_2.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/migrating_from_2.0/</guid>
      <description>Cowboy 2.1 focused on adding features that were temporarily removed in Cowboy 2.0. A number of bugs found in the 2.0 release were also fixed.
Features added It is now possible to obtain the client TLS certificate and the local IP/port for the connection from the Req object.  Informational responses (1XX responses) can now be sent. They must be sent before initiating the final response.  The expect: 100-continue header is now handled automatically.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.2 to 2.3</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.2/</guid>
      <description>Cowboy 2.3 focused on making the Cowboy processes behave properly according to OTP principles. This version is a very good milestone toward that goal and most of everything should now work. Release upgrades and a few details will be improved in future versions.
Features added Add support for all functions from the module sys. Note that Cowboy currently does not implement the sys debugging mechanisms as tracing is recommended instead.  Add a max_frame_size option for Websocket handlers to close the connection when the client attempts to send a frame that&amp;apos;s too large.</description>
    </item>
    
    <item>
      <title>HTTP and other specifications</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/specs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/specs/</guid>
      <description>This chapter intends to list all the specification documents for or related to HTTP.
HTTP IANA Registries HTTP Method Registry  HTTP Status Code Registry  Message Headers  HTTP Parameters  HTTP Alt-Svc Parameter Registry  HTTP Authentication Scheme Registry  HTTP Cache Directive Registry  HTTP Digest Algorithm Values  HTTP Origin-Bound Authentication Device Identifier Types  HTTP Upgrade Token Registry  HTTP Warn Codes  HTTP/2 Parameters  WebSocket Protocol Registries   Current CORS: Cross-Origin Resource Sharing  CSP2: Content Security Policy Level 2  DNT: Tracking Preference Expression (DNT)  eventsource: Server-Sent Events  Form content types: Form content types  Preload: Preload  PROXY: The PROXY protocol  REST: Fielding&amp;apos;s Dissertation  RFC 1945: HTTP/1.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 1.0 to 2.0</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/migrating_from_1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/migrating_from_1.0/</guid>
      <description>A lot has changed between Cowboy 1.0 and 2.0. The cowboy_req interface in particular has seen a massive revamp. Hooks are gone, their functionality can now be achieved via stream handlers.
The documentation has seen great work, in particular the manual. Each module and each function now has its own dedicated manual page with full details and examples.
Compatibility Compatibility with Erlang/OTP R16, 17 and 18 has been dropped. Erlang/OTP 19.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.1 to 2.2</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.1/</guid>
      <description>Cowboy 2.2 focused on adding features required for writing gRPC servers and on completing test suites for the core HTTP RFCs, fixing many bugs along the way.
Features added Add support for sending trailers at the end of response bodies. Trailers are additional header fields that may be sent after the body to add more information to the response. Their usage is required in gRPC servers. They are optional and may be discarded in other scenarios (for example if the request goes through an HTTP/1.</description>
    </item>
    
    <item>
      <title>HTTP and other specifications</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/specs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/specs/</guid>
      <description>This chapter intends to list all the specification documents for or related to HTTP.
HTTP IANA Registries HTTP Method Registry  HTTP Status Code Registry  Message Headers  HTTP Parameters  HTTP Alt-Svc Parameter Registry  HTTP Authentication Scheme Registry  HTTP Cache Directive Registry  HTTP Digest Algorithm Values  HTTP Origin-Bound Authentication Device Identifier Types  HTTP Upgrade Token Registry  HTTP Warn Codes  HTTP/2 Parameters  WebSocket Protocol Registries   Current CORS: Cross-Origin Resource Sharing  CSP2: Content Security Policy Level 2  DNT: Tracking Preference Expression (DNT)  eventsource: Server-Sent Events  Form content types: Form content types  Preload: Preload  PROXY: The PROXY protocol  REST: Fielding&amp;apos;s Dissertation  RFC 1945: HTTP/1.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 2.0 to 2.1</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_2.0/</guid>
      <description>Cowboy 2.1 focused on adding features that were temporarily removed in Cowboy 2.0. A number of bugs found in the 2.0 release were also fixed.
Features added It is now possible to obtain the client TLS certificate and the local IP/port for the connection from the Req object.  Informational responses (1XX responses) can now be sent. They must be sent before initiating the final response.  The expect: 100-continue header is now handled automatically.</description>
    </item>
    
    <item>
      <title>Migrating from Cowboy 1.0 to 2.0</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/migrating_from_1.0/</guid>
      <description>A lot has changed between Cowboy 1.0 and 2.0. The cowboy_req interface in particular has seen a massive revamp. Hooks are gone, their functionality can now be achieved via stream handlers.
The documentation has seen great work, in particular the manual. Each module and each function now has its own dedicated manual page with full details and examples.
Compatibility Compatibility with Erlang/OTP R16, 17 and 18 has been dropped. Erlang/OTP 19.</description>
    </item>
    
    <item>
      <title>HTTP and other specifications</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/specs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/specs/</guid>
      <description>This chapter intends to list all the specification documents for or related to HTTP.
HTTP IANA Registries HTTP Method Registry  HTTP Status Code Registry  Message Headers  HTTP Parameters  HTTP Alt-Svc Parameter Registry  HTTP Authentication Scheme Registry  HTTP Cache Directive Registry  HTTP Digest Algorithm Values  HTTP Origin-Bound Authentication Device Identifier Types  HTTP Upgrade Token Registry  HTTP Warn Codes  HTTP/2 Parameters  WebSocket Protocol Registries   Current CORS: Cross-Origin Resource Sharing  CSP2: Content Security Policy Level 2  DNT: Tracking Preference Expression (DNT)  eventsource: Server-Sent Events  Form content types: Form content types  Preload: Preload  PROXY: The PROXY protocol  REST: Fielding&amp;apos;s Dissertation  RFC 1945: HTTP/1.</description>
    </item>
    
    <item>
      <title>Cowboy Function Reference</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>Cowboy Function Reference</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>Cowboy Function Reference</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>Cowboy Function Reference</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>Cowboy Function Reference</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>Cowboy Function Reference</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>Cowboy Function Reference</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>Cowboy User Guide</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/guide/</guid>
      <description>Rationale The modern Web  Erlang and the Web   Introduction Introduction  Getting started  Flow diagram   Configuration Listeners  Routing  Constraints   Handlers Handlers  Loop handlers  Static files   Request and response Request details  Reading the request body  Sending a response  Using cookies  Multipart   REST REST principles  Handling REST requests  REST flowcharts  Designing a resource handler   Websocket The Websocket protocol  Websocket handlers   Advanced Streams  Middlewares   Additional information Migrating from Cowboy 1.</description>
    </item>
    
    <item>
      <title>Cowboy User Guide</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/guide/</guid>
      <description>Rationale The modern Web  Erlang and the Web   Introduction Introduction  Getting started  Flow diagram   Configuration Listeners  Routing  Constraints   Handlers Handlers  Loop handlers  Static files   Request and response Request details  Reading the request body  Sending a response  Using cookies  Multipart   REST REST principles  Handling REST requests  REST flowcharts  Designing a resource handler   Websocket The Websocket protocol  Websocket handlers   Advanced Streams  Middlewares   Additional information Migrating from Cowboy 2.</description>
    </item>
    
    <item>
      <title>Cowboy User Guide</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/guide/</guid>
      <description>Rationale The modern Web  Erlang and the Web   Introduction Introduction  Getting started  Flow diagram   Configuration Listeners  Routing  Constraints   Handlers Handlers  Loop handlers  Static files   Request and response Request details  Reading the request body  Sending a response  Using cookies  Multipart   REST REST principles  Handling REST requests  REST flowcharts  Designing a resource handler   Websocket The Websocket protocol  Websocket handlers   Advanced Streams  Middlewares   Additional information Changes since Cowboy 2.</description>
    </item>
    
    <item>
      <title>Cowboy User Guide</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/guide/</guid>
      <description>Rationale The modern Web  Erlang and the Web   Introduction Introduction  Getting started  Flow diagram   Configuration Listeners  Routing  Constraints   Handlers Handlers  Loop handlers  Static files   Request and response Request details  Reading the request body  Sending a response  Using cookies  Multipart   REST REST principles  Handling REST requests  REST flowcharts  Designing a resource handler   Websocket The Websocket protocol  Websocket handlers   Advanced Streams  Middlewares   Additional information Migrating from Cowboy 2.</description>
    </item>
    
    <item>
      <title>Cowboy User Guide</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/guide/</guid>
      <description>Rationale The modern Web  Erlang and the Web   Introduction Introduction  Getting started  Flow diagram   Configuration Listeners  Routing  Constraints   Handlers Handlers  Loop handlers  Static files   Request and response Request details  Reading the request body  Sending a response  Using cookies  Multipart   REST REST principles  Handling REST requests  REST flowcharts  Designing a resource handler   Websocket The Websocket protocol  Websocket handlers   Advanced Streams  Middlewares   Additional information Migrating from Cowboy 2.</description>
    </item>
    
    <item>
      <title>Cowboy User Guide</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/guide/</guid>
      <description>Rationale The modern Web  Erlang and the Web   Introduction Introduction  Getting started  Flow diagram   Configuration Listeners  Routing  Constraints   Handlers Handlers  Loop handlers  Static files   Request and response Request details  Reading the request body  Sending a response  Using cookies  Multipart   REST REST principles  Handling REST requests  REST flowcharts  Designing a resource handler   Websocket The Websocket protocol  Websocket handlers   Advanced Streams  Middlewares   Additional information Migrating from Cowboy 2.</description>
    </item>
    
    <item>
      <title>Cowboy User Guide</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/guide/</guid>
      <description>Rationale The modern Web  Erlang and the Web   Introduction Introduction  Getting started  Flow diagram   Configuration Listeners  Routing  Constraints   Handlers Handlers  Loop handlers  Static files   Request and response Request details  Reading the request body  Sending a response  Using cookies  Multipart   REST REST principles  Handling REST requests  REST flowcharts  Designing a resource handler   Websocket The Websocket protocol  Websocket handlers   Advanced Streams  Middlewares   Additional information Changes since Cowboy 2.</description>
    </item>
    
    <item>
      <title>Erlang.mk User Guide</title>
      <link>https://ninenines.eu/docs/en/erlang.mk/1/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/erlang.mk/1/guide/</guid>
      <description>Installation  Getting started  Overview  Updating Erlang.mk  Limitations   Code Building  Packages and dependencies  NIFs and port drivers  Releases  Self-extracting releases  Escripts  OTP version management  Cross compiling  Compatibility with other build tools   Documentation Asciidoc documentation  EDoc comments  Sphinx documentation   Tests Erlang shell  EUnit  Common Test  PropEr  Triq  Code coverage  Continuous integration  Dialyzer  Xref   Third-party plugins External plugins  List of plugins   About Erlang.</description>
    </item>
    
    <item>
      <title>Gun Function Reference</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/</guid>
      <description>Name gun - HTTP/1.1, HTTP/2 and Websocket client for Erlang/OTP
Description Gun is an HTTP client for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Gun aims to provide an easy to use, asynchronous and always-connected client. It maintains a permanent connection to the server and reconnects automatically when necessary.
Modules gun(3) - Asynchronous HTTP client   Dependencies cowlib(7) - Support library for manipulating Web protocols  ssl - Secure communication over sockets   All these applications must be started before the gun application.</description>
    </item>
    
    <item>
      <title>Gun Function Reference</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/</guid>
      <description>Name gun - HTTP/1.1, HTTP/2 and Websocket client for Erlang/OTP
Description Gun is an HTTP client for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Gun aims to provide an easy to use, asynchronous and always-connected client. It maintains a permanent connection to the server and reconnects automatically when necessary.
Modules gun(3) - Asynchronous HTTP client   Dependencies cowlib(7) - Support library for manipulating Web protocols  ssl - Secure communication over sockets   All these applications must be started before the gun application.</description>
    </item>
    
    <item>
      <title>Gun Function Reference</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/</guid>
      <description>Name gun - HTTP/1.1, HTTP/2 and Websocket client for Erlang/OTP
Description Gun is an HTTP client for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Gun aims to provide an easy to use, asynchronous and always-connected client. It maintains a permanent connection to the server and reconnects automatically when necessary.
Modules gun(3) - Asynchronous HTTP client   Dependencies cowlib(7) - Support library for manipulating Web protocols  ssl - Secure communication over sockets   All these applications must be started before the gun application.</description>
    </item>
    
    <item>
      <title>Gun Function Reference</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/</guid>
      <description>Name gun - HTTP/1.1, HTTP/2 and Websocket client for Erlang/OTP
Description Gun is an HTTP client for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Gun aims to provide an easy to use, asynchronous and always-connected client. It maintains a permanent connection to the server and reconnects automatically when necessary.
Modules gun(3) - Asynchronous HTTP client   Dependencies cowlib(7) - Support library for manipulating Web protocols  ssl - Secure communication over sockets   All these applications must be started before the gun application.</description>
    </item>
    
    <item>
      <title>Gun User Guide</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/guide/</guid>
      <description>Introduction  Starting and stopping  Supported protocols  Connection  Using HTTP  Using Websocket   </description>
    </item>
    
    <item>
      <title>Gun User Guide</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/guide/</guid>
      <description>Interface Introduction  Starting and stopping  Supported protocols  Connection  Using HTTP  Using Websocket   Additional information Migrating from Gun 1.0 to 1.1   </description>
    </item>
    
    <item>
      <title>Gun User Guide</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/guide/</guid>
      <description>Interface Introduction  Starting and stopping  Supported protocols  Connection  Using HTTP  Using Websocket   Additional information Migrating from Gun 1.1 to 1.2  Migrating from Gun 1.0 to 1.1   </description>
    </item>
    
    <item>
      <title>Gun User Guide</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/guide/</guid>
      <description>Interface Introduction  Starting and stopping  Supported protocols  Connection  Using HTTP  Using Websocket   Additional information Migrating from Gun 1.2 to 1.3  Migrating from Gun 1.1 to 1.2  Migrating from Gun 1.0 to 1.1   </description>
    </item>
    
    <item>
      <title>HTTP status codes(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/http_status_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/http_status_codes/</guid>
      <description>Name HTTP status codes - status codes used by Cowboy
Description This chapter aims to list all HTTP status codes that Cowboy may return, with details on the reasons why. The list given here only includes the replies that Cowboy sends, not user replies.
100 Continue When the client sends an expect: 100-continue header, Cowboy automatically sends a this status code before trying to read the request body. This behavior can be disabled using the appropriate body option.</description>
    </item>
    
    <item>
      <title>HTTP status codes(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/http_status_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/http_status_codes/</guid>
      <description>Name HTTP status codes - status codes used by Cowboy
Description This chapter aims to list all HTTP status codes that Cowboy may return, with details on the reasons why. The list given here only includes the replies that Cowboy sends, not user replies.
100 Continue When the client sends an expect: 100-continue header, Cowboy automatically sends a this status code before trying to read the request body. This behavior can be disabled using the appropriate body option.</description>
    </item>
    
    <item>
      <title>HTTP status codes(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/http_status_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/http_status_codes/</guid>
      <description>Name HTTP status codes - status codes used by Cowboy
Description This chapter aims to list all HTTP status codes that Cowboy may return, with details on the reasons why. The list given here only includes the replies that Cowboy sends, not user replies.
100 Continue When the client sends an expect: 100-continue header, Cowboy automatically sends a this status code before trying to read the request body. This behavior can be disabled using the appropriate body option.</description>
    </item>
    
    <item>
      <title>HTTP status codes(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/http_status_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/http_status_codes/</guid>
      <description>Name HTTP status codes - status codes used by Cowboy
Description This chapter aims to list all HTTP status codes that Cowboy may return, with details on the reasons why. The list given here only includes the replies that Cowboy sends, not user replies.
100 Continue When the client sends an expect: 100-continue header, Cowboy automatically sends a this status code before trying to read the request body. This behavior can be disabled using the appropriate body option.</description>
    </item>
    
    <item>
      <title>HTTP status codes(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/http_status_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/http_status_codes/</guid>
      <description>Name HTTP status codes - status codes used by Cowboy
Description This chapter aims to list all HTTP status codes that Cowboy may return, with details on the reasons why. The list given here only includes the replies that Cowboy sends, not user replies.
100 Continue When the client sends an expect: 100-continue header, Cowboy automatically sends a this status code before trying to read the request body. This behavior can be disabled using the appropriate body option.</description>
    </item>
    
    <item>
      <title>HTTP status codes(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/http_status_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/http_status_codes/</guid>
      <description>Name HTTP status codes - status codes used by Cowboy
Description This chapter aims to list all HTTP status codes that Cowboy may return, with details on the reasons why. The list given here only includes the replies that Cowboy sends, not user replies.
100 Continue When the client sends an expect: 100-continue header, Cowboy automatically sends a this status code before trying to read the request body. This behavior can be disabled using the appropriate body option.</description>
    </item>
    
    <item>
      <title>HTTP status codes(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/http_status_codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/http_status_codes/</guid>
      <description>Name HTTP status codes - status codes used by Cowboy
Description This chapter aims to list all HTTP status codes that Cowboy may return, with details on the reasons why. The list given here only includes the replies that Cowboy sends, not user replies.
100 Continue When the client sends an expect: 100-continue header, Cowboy automatically sends a this status code before trying to read the request body. This behavior can be disabled using the appropriate body option.</description>
    </item>
    
    <item>
      <title>Ranch Function Reference</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/manual/</guid>
      <description>ranch(7)  ranch(3)  ranch_protocol(3)  ranch_ssl(3)  ranch_tcp(3)  ranch_transport(3)   </description>
    </item>
    
    <item>
      <title>Ranch Function Reference</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/manual/</guid>
      <description>ranch(7)  ranch(3)  ranch_protocol(3)  ranch_ssl(3)  ranch_tcp(3)  ranch_transport(3)   </description>
    </item>
    
    <item>
      <title>Ranch Function Reference</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/manual/</guid>
      <description>ranch(7)  ranch(3)  ranch_protocol(3)  ranch_ssl(3)  ranch_tcp(3)  ranch_transport(3)   </description>
    </item>
    
    <item>
      <title>Ranch Function Reference</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/manual/</guid>
      <description>ranch(7)  ranch(3)  ranch_protocol(3)  ranch_ssl(3)  ranch_tcp(3)  ranch_transport(3)   </description>
    </item>
    
    <item>
      <title>Ranch Function Reference</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/</guid>
      <description>Name ranch - Socket acceptor pool for TCP protocols
Description Ranch is a socket acceptor pool for TCP protocols.
Ranch manages listeners which are a set of processes that accept and manage connections. The connection&amp;apos;s transport and protocol modules are configured per listener. Listeners can be inspected and reconfigured without interruptions in service.
Modules Functions:
ranch(3) - Socket acceptor pool   Transports:
ranch_ssl(3) - SSL transport  ranch_tcp(3) - TLS transport   Behaviors:</description>
    </item>
    
    <item>
      <title>Ranch Function Reference</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/</guid>
      <description>Name ranch - Socket acceptor pool for TCP protocols
Description Ranch is a socket acceptor pool for TCP protocols.
Ranch manages listeners which are a set of processes that accept and manage connections. The connection&amp;apos;s transport and protocol modules are configured per listener. Listeners can be inspected and reconfigured without interruptions in service.
Modules Functions:
ranch(3) - Socket acceptor pool  ranch_proxy_header(3) - PROXY protocol   Transports:
ranch_ssl(3) - SSL transport  ranch_tcp(3) - TCP transport   Behaviors:</description>
    </item>
    
    <item>
      <title>Ranch User Guide</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/guide/</guid>
      <description>Introduction  Listeners  Transports  Protocols  Embedded mode  Writing parsers  SSL client authentication  Internals   </description>
    </item>
    
    <item>
      <title>Ranch User Guide</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/guide/</guid>
      <description>Introduction  Listeners  Transports  Protocols  Embedded mode  Writing parsers  SSL client authentication  Internals   </description>
    </item>
    
    <item>
      <title>Ranch User Guide</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/guide/</guid>
      <description>Introduction  Listeners  Transports  Protocols  Embedded mode  Writing parsers  SSL client authentication  Internals   </description>
    </item>
    
    <item>
      <title>Ranch User Guide</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/guide/</guid>
      <description>Introduction  Listeners  Transports  Protocols  Embedded mode  Writing parsers  SSL client authentication  Internals   </description>
    </item>
    
    <item>
      <title>Ranch User Guide</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/guide/</guid>
      <description>Interface Introduction  Listeners  Transports  Protocols  Embedded mode   How to Writing parsers  SSL client authentication   Advanced Internals   Additional information Upcoming changes in Ranch 2.0  Changes since Ranch 1.6  Migrating from Ranch 1.5 to 1.6  Migrating from Ranch 1.x   </description>
    </item>
    
    <item>
      <title>Ranch User Guide</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/guide/</guid>
      <description>Interface Introduction  Listeners  Transports  Protocols  Embedded mode   How to Writing parsers  SSL client authentication   Advanced Internals   Additional information Upcoming changes in Ranch 2.0  Changes since Ranch 1.7  Migrating from Ranch 1.6 to 1.7  Migrating from Ranch 1.5 to 1.6  Migrating from Ranch 1.x   </description>
    </item>
    
    <item>
      <title>cowboy(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy/</guid>
      <description>Name cowboy - HTTP server
Description The module cowboy provides convenience functions for manipulating Ranch listeners.
Exports cowboy:start_clear(3) - Listen for connections using plain TCP  cowboy:start_tls(3) - Listen for connections using TLS  cowboy:stop_listener(3) - Stop the given listener  cowboy:set_env(3) - Update a listener&amp;apos;s environment value   Types fields() fields() :: [Name | {Name, Constraints} | {Name, Constraints, Default}] Name :: atom() Constraints :: Constraint | [Constraint] Constraint :: cowboy_constraints:constraint() Default :: any()  Fields description for match operations.</description>
    </item>
    
    <item>
      <title>cowboy(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy/</guid>
      <description>Name cowboy - HTTP server
Description The module cowboy provides convenience functions for manipulating Ranch listeners.
Exports cowboy:start_clear(3) - Listen for connections using plain TCP  cowboy:start_tls(3) - Listen for connections using TLS  cowboy:stop_listener(3) - Stop the given listener  cowboy:set_env(3) - Update a listener&amp;apos;s environment value   Types fields() fields() :: [Name | {Name, Constraints} | {Name, Constraints, Default}] Name :: atom() Constraints :: Constraint | [Constraint] Constraint :: cowboy_constraints:constraint() Default :: any()  Fields description for match operations.</description>
    </item>
    
    <item>
      <title>cowboy(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy/</guid>
      <description>Name cowboy - HTTP server
Description The module cowboy provides convenience functions for manipulating Ranch listeners.
Exports cowboy:start_clear(3) - Listen for connections using plain TCP  cowboy:start_tls(3) - Listen for connections using TLS  cowboy:stop_listener(3) - Stop the given listener  cowboy:set_env(3) - Update a listener&amp;apos;s environment value   Types fields() fields() :: [Name | {Name, Constraints} | {Name, Constraints, Default}] Name :: atom() Constraints :: Constraint | [Constraint] Constraint :: cowboy_constraints:constraint() Default :: any()  Fields description for match operations.</description>
    </item>
    
    <item>
      <title>cowboy(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy/</guid>
      <description>Name cowboy - HTTP server
Description The module cowboy provides convenience functions for manipulating Ranch listeners.
Exports cowboy:start_clear(3) - Listen for connections using plain TCP  cowboy:start_tls(3) - Listen for connections using TLS  cowboy:stop_listener(3) - Stop the given listener  cowboy:set_env(3) - Update a listener&amp;apos;s environment value   Types fields() fields() :: [Name | {Name, Constraints} | {Name, Constraints, Default}] Name :: atom() Constraints :: Constraint | [Constraint] Constraint :: cowboy_constraints:constraint() Default :: any()  Fields description for match operations.</description>
    </item>
    
    <item>
      <title>cowboy(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy/</guid>
      <description>Name cowboy - HTTP server
Description The module cowboy provides convenience functions for manipulating Ranch listeners.
Exports cowboy:start_clear(3) - Listen for connections using plain TCP  cowboy:start_tls(3) - Listen for connections using TLS  cowboy:stop_listener(3) - Stop the given listener  cowboy:set_env(3) - Update a listener&amp;apos;s environment value   Types fields() fields() :: [Name | {Name, Constraints} | {Name, Constraints, Default}] Name :: atom() Constraints :: Constraint | [Constraint] Constraint :: cowboy_constraints:constraint() Default :: any()  Fields description for match operations.</description>
    </item>
    
    <item>
      <title>cowboy(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy/</guid>
      <description>Name cowboy - HTTP server
Description The module cowboy provides convenience functions for manipulating Ranch listeners.
Exports cowboy:start_clear(3) - Listen for connections using plain TCP  cowboy:start_tls(3) - Listen for connections using TLS  cowboy:stop_listener(3) - Stop the given listener  cowboy:set_env(3) - Update a listener&amp;apos;s environment value   Types fields() fields() :: [Name | {Name, Constraints} | {Name, Constraints, Default}] Name :: atom() Constraints :: Constraint | [Constraint] Constraint :: cowboy_constraints:constraint() Default :: any()  Fields description for match operations.</description>
    </item>
    
    <item>
      <title>cowboy(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy/</guid>
      <description>Name cowboy - HTTP server
Description The module cowboy provides convenience functions for manipulating Ranch listeners.
Exports cowboy:start_clear(3) - Listen for connections using plain TCP  cowboy:start_tls(3) - Listen for connections using TLS  cowboy:stop_listener(3) - Stop the given listener  cowboy:set_env(3) - Update a listener&amp;apos;s environment value   Types fields() fields() :: [Name | {Name, Constraints} | {Name, Constraints, Default}] Name :: atom() Constraints :: Constraint | [Constraint] Constraint :: cowboy_constraints:constraint() Default :: any()  Fields description for match operations.</description>
    </item>
    
    <item>
      <title>cowboy(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_app/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>cowboy(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_app/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>cowboy(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_app/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>cowboy(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_app/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>cowboy(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_app/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>cowboy(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_app/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>cowboy(7)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_app/</guid>
      <description>Name cowboy - Small, fast, modern HTTP server for Erlang/OTP
Description Cowboy is an HTTP server for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Cowboy aims to provide a complete HTTP stack. This includes the implementation of the HTTP RFCs but also any directly related standards, like Websocket or Server-Sent Events.
Modules Functions:
cowboy(3) - Listener management  cowboy_req(3) - Request and response  cowboy_router(3) - Router  cowboy_constraints(3) - Constraints   Protocols:</description>
    </item>
    
    <item>
      <title>cowboy:set_env(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy.set_env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy.set_env/</guid>
      <description>Name cowboy:set_env - Update a listener&amp;apos;s environment value
Description set_env(Name :: ranch:ref(), Key :: atom(), Value :: any()) -&amp;gt; ok  Set or update an environment value for a previously started listener.
This is most useful for updating the routes dynamically, without having to restart the listener.
The new value will only be available to new connections. Pre-existing connections will still use the old value.
Arguments Name The name of the listener to update.</description>
    </item>
    
    <item>
      <title>cowboy:set_env(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy.set_env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy.set_env/</guid>
      <description>Name cowboy:set_env - Update a listener&amp;apos;s environment value
Description set_env(Name :: ranch:ref(), Key :: atom(), Value :: any()) -&amp;gt; ok  Set or update an environment value for a previously started listener.
This is most useful for updating the routes dynamically, without having to restart the listener.
The new value will only be available to new connections. Pre-existing connections will still use the old value.
Arguments Name The name of the listener to update.</description>
    </item>
    
    <item>
      <title>cowboy:set_env(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy.set_env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy.set_env/</guid>
      <description>Name cowboy:set_env - Update a listener&amp;apos;s environment value
Description set_env(Name :: ranch:ref(), Key :: atom(), Value :: any()) -&amp;gt; ok  Set or update an environment value for a previously started listener.
This is most useful for updating the routes dynamically, without having to restart the listener.
The new value will only be available to new connections. Pre-existing connections will still use the old value.
Arguments Name The name of the listener to update.</description>
    </item>
    
    <item>
      <title>cowboy:set_env(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy.set_env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy.set_env/</guid>
      <description>Name cowboy:set_env - Update a listener&amp;apos;s environment value
Description set_env(Name :: ranch:ref(), Key :: atom(), Value :: any()) -&amp;gt; ok  Set or update an environment value for a previously started listener.
This is most useful for updating the routes dynamically, without having to restart the listener.
The new value will only be available to new connections. Pre-existing connections will still use the old value.
Arguments Name The name of the listener to update.</description>
    </item>
    
    <item>
      <title>cowboy:set_env(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy.set_env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy.set_env/</guid>
      <description>Name cowboy:set_env - Update a listener&amp;apos;s environment value
Description set_env(Name :: ranch:ref(), Key :: atom(), Value :: any()) -&amp;gt; ok  Set or update an environment value for a previously started listener.
This is most useful for updating the routes dynamically, without having to restart the listener.
The new value will only be available to new connections. Pre-existing connections will still use the old value.
Arguments Name The name of the listener to update.</description>
    </item>
    
    <item>
      <title>cowboy:set_env(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy.set_env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy.set_env/</guid>
      <description>Name cowboy:set_env - Update a listener&amp;apos;s environment value
Description set_env(Name :: ranch:ref(), Key :: atom(), Value :: any()) -&amp;gt; ok  Set or update an environment value for a previously started listener.
This is most useful for updating the routes dynamically, without having to restart the listener.
The new value will only be available to new connections. Pre-existing connections will still use the old value.
Arguments Name The name of the listener to update.</description>
    </item>
    
    <item>
      <title>cowboy:set_env(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy.set_env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy.set_env/</guid>
      <description>Name cowboy:set_env - Update a listener&amp;apos;s environment value
Description set_env(Name :: ranch:ref(), Key :: atom(), Value :: any()) -&amp;gt; ok  Set or update an environment value for a previously started listener.
This is most useful for updating the routes dynamically, without having to restart the listener.
The new value will only be available to new connections. Pre-existing connections will still use the old value.
Arguments Name The name of the listener to update.</description>
    </item>
    
    <item>
      <title>cowboy:start_clear(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy.start_clear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy.start_clear/</guid>
      <description>Name cowboy:start_clear - Listen for connections using plain TCP
Description start_clear(Name :: ranch:ref(), TransportOpts :: ranch_tcp:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a clear TCP channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. HTTP/2 has two methods of establishing a connection over a clear TCP channel. Both the upgrade and the prior knowledge methods are supported.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_clear(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy.start_clear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy.start_clear/</guid>
      <description>Name cowboy:start_clear - Listen for connections using plain TCP
Description start_clear(Name :: ranch:ref(), TransportOpts :: ranch_tcp:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a clear TCP channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. HTTP/2 has two methods of establishing a connection over a clear TCP channel. Both the upgrade and the prior knowledge methods are supported.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_clear(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy.start_clear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy.start_clear/</guid>
      <description>Name cowboy:start_clear - Listen for connections using plain TCP
Description start_clear(Name :: ranch:ref(), TransportOpts :: ranch_tcp:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a clear TCP channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. HTTP/2 has two methods of establishing a connection over a clear TCP channel. Both the upgrade and the prior knowledge methods are supported.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_clear(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy.start_clear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy.start_clear/</guid>
      <description>Name cowboy:start_clear - Listen for connections using plain TCP
Description start_clear(Name :: ranch:ref(), TransportOpts :: ranch_tcp:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a clear TCP channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. HTTP/2 has two methods of establishing a connection over a clear TCP channel. Both the upgrade and the prior knowledge methods are supported.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_clear(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy.start_clear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy.start_clear/</guid>
      <description>Name cowboy:start_clear - Listen for connections using plain TCP
Description start_clear(Name :: ranch:ref(), TransportOpts :: ranch_tcp:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a clear TCP channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. HTTP/2 has two methods of establishing a connection over a clear TCP channel. Both the upgrade and the prior knowledge methods are supported.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_clear(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy.start_clear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy.start_clear/</guid>
      <description>Name cowboy:start_clear - Listen for connections using plain TCP
Description start_clear(Name :: ranch:ref(), TransportOpts :: ranch_tcp:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a clear TCP channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. HTTP/2 has two methods of establishing a connection over a clear TCP channel. Both the upgrade and the prior knowledge methods are supported.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_clear(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy.start_clear/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy.start_clear/</guid>
      <description>Name cowboy:start_clear - Listen for connections using plain TCP
Description start_clear(Name :: ranch:ref(), TransportOpts :: ranch_tcp:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a clear TCP channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. HTTP/2 has two methods of establishing a connection over a clear TCP channel. Both the upgrade and the prior knowledge methods are supported.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_tls(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy.start_tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy.start_tls/</guid>
      <description>Name cowboy:start_tls - Listen for connections using TLS
Description start_tls(Name :: ranch:ref(), TransportOpts :: ranch_ssl:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a secure TLS channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. The ALPN TLS extension must be used to initiate an HTTP/2 connection.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_tls(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy.start_tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy.start_tls/</guid>
      <description>Name cowboy:start_tls - Listen for connections using TLS
Description start_tls(Name :: ranch:ref(), TransportOpts :: ranch_ssl:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a secure TLS channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. The ALPN TLS extension must be used to initiate an HTTP/2 connection.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_tls(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy.start_tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy.start_tls/</guid>
      <description>Name cowboy:start_tls - Listen for connections using TLS
Description start_tls(Name :: ranch:ref(), TransportOpts :: ranch_ssl:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a secure TLS channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. The ALPN TLS extension must be used to initiate an HTTP/2 connection.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_tls(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy.start_tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy.start_tls/</guid>
      <description>Name cowboy:start_tls - Listen for connections using TLS
Description start_tls(Name :: ranch:ref(), TransportOpts :: ranch_ssl:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a secure TLS channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. The ALPN TLS extension must be used to initiate an HTTP/2 connection.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_tls(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy.start_tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy.start_tls/</guid>
      <description>Name cowboy:start_tls - Listen for connections using TLS
Description start_tls(Name :: ranch:ref(), TransportOpts :: ranch_ssl:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a secure TLS channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. The ALPN TLS extension must be used to initiate an HTTP/2 connection.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_tls(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy.start_tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy.start_tls/</guid>
      <description>Name cowboy:start_tls - Listen for connections using TLS
Description start_tls(Name :: ranch:ref(), TransportOpts :: ranch_ssl:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a secure TLS channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. The ALPN TLS extension must be used to initiate an HTTP/2 connection.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:start_tls(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy.start_tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy.start_tls/</guid>
      <description>Name cowboy:start_tls - Listen for connections using TLS
Description start_tls(Name :: ranch:ref(), TransportOpts :: ranch_ssl:opts(), ProtocolOpts :: opts()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start listening for connections over a secure TLS channel.
Both HTTP/1.1 and HTTP/2 are supported on this listener. The ALPN TLS extension must be used to initiate an HTTP/2 connection.
Arguments Name The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the routes defined.</description>
    </item>
    
    <item>
      <title>cowboy:stop_listener(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy.stop_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy.stop_listener/</guid>
      <description>Name cowboy:stop_listener - Stop the given listener
Description stop_listener(Name :: ranch:ref()) -&amp;gt; ok | {error, not_found}.  Stop a previously started listener.
Alias of ranch:stop_listener(3).
Arguments Name The name of the listener to be stopped.
The name of the listener is the first argument given to the cowboy:start_clear(3), cowboy:start_tls(3) or ranch:start_listener(3) function.
  Return value The atom ok is returned on success.
The {error, not_found} tuple is returned when the listener does not exist.</description>
    </item>
    
    <item>
      <title>cowboy:stop_listener(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy.stop_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy.stop_listener/</guid>
      <description>Name cowboy:stop_listener - Stop the given listener
Description stop_listener(Name :: ranch:ref()) -&amp;gt; ok | {error, not_found}.  Stop a previously started listener.
Alias of ranch:stop_listener(3).
Arguments Name The name of the listener to be stopped.
The name of the listener is the first argument given to the cowboy:start_clear(3), cowboy:start_tls(3) or ranch:start_listener(3) function.
  Return value The atom ok is returned on success.
The {error, not_found} tuple is returned when the listener does not exist.</description>
    </item>
    
    <item>
      <title>cowboy:stop_listener(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy.stop_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy.stop_listener/</guid>
      <description>Name cowboy:stop_listener - Stop the given listener
Description stop_listener(Name :: ranch:ref()) -&amp;gt; ok | {error, not_found}.  Stop a previously started listener.
Alias of ranch:stop_listener(3).
Arguments Name The name of the listener to be stopped.
The name of the listener is the first argument given to the cowboy:start_clear(3), cowboy:start_tls(3) or ranch:start_listener(3) function.
  Return value The atom ok is returned on success.
The {error, not_found} tuple is returned when the listener does not exist.</description>
    </item>
    
    <item>
      <title>cowboy:stop_listener(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy.stop_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy.stop_listener/</guid>
      <description>Name cowboy:stop_listener - Stop the given listener
Description stop_listener(Name :: ranch:ref()) -&amp;gt; ok | {error, not_found}.  Stop a previously started listener.
Alias of ranch:stop_listener(3).
Arguments Name The name of the listener to be stopped.
The name of the listener is the first argument given to the cowboy:start_clear(3), cowboy:start_tls(3) or ranch:start_listener(3) function.
  Return value The atom ok is returned on success.
The {error, not_found} tuple is returned when the listener does not exist.</description>
    </item>
    
    <item>
      <title>cowboy:stop_listener(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy.stop_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy.stop_listener/</guid>
      <description>Name cowboy:stop_listener - Stop the given listener
Description stop_listener(Name :: ranch:ref()) -&amp;gt; ok | {error, not_found}.  Stop a previously started listener.
Alias of ranch:stop_listener(3).
Arguments Name The name of the listener to be stopped.
The name of the listener is the first argument given to the cowboy:start_clear(3), cowboy:start_tls(3) or ranch:start_listener(3) function.
  Return value The atom ok is returned on success.
The {error, not_found} tuple is returned when the listener does not exist.</description>
    </item>
    
    <item>
      <title>cowboy:stop_listener(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy.stop_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy.stop_listener/</guid>
      <description>Name cowboy:stop_listener - Stop the given listener
Description stop_listener(Name :: ranch:ref()) -&amp;gt; ok | {error, not_found}.  Stop a previously started listener.
Alias of ranch:stop_listener(3).
Arguments Name The name of the listener to be stopped.
The name of the listener is the first argument given to the cowboy:start_clear(3), cowboy:start_tls(3) or ranch:start_listener(3) function.
  Return value The atom ok is returned on success.
The {error, not_found} tuple is returned when the listener does not exist.</description>
    </item>
    
    <item>
      <title>cowboy:stop_listener(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy.stop_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy.stop_listener/</guid>
      <description>Name cowboy:stop_listener - Stop the given listener
Description stop_listener(Name :: ranch:ref()) -&amp;gt; ok | {error, not_found}.  Stop a previously started listener.
Alias of ranch:stop_listener(3).
Arguments Name The name of the listener to be stopped.
The name of the listener is the first argument given to the cowboy:start_clear(3), cowboy:start_tls(3) or ranch:start_listener(3) function.
  Return value The atom ok is returned on success.
The {error, not_found} tuple is returned when the listener does not exist.</description>
    </item>
    
    <item>
      <title>cowboy_compress_h(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_compress_h/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_compress_h/</guid>
      <description>Name cowboy_compress_h - Compress stream handler
Description The module cowboy_compress_h compresses response bodies automatically when the client supports it. It will not try to compress responses that already have a content encoding.
Normal responses will only be compressed when their size is lower than the configured threshold. Streamed responses are always compressed, including when the sendfile command is used. Because the file must be read in memory to be compressed, this module is not suitable for automatically compressing large files.</description>
    </item>
    
    <item>
      <title>cowboy_constraints(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_constraints/</guid>
      <description>Name cowboy_constraints - Constraints
Description The module cowboy_constraints defines the built-in constraints in Cowboy and provides an interface for manipulating these constraints.
Constraints are functions that define what type of input is allowed. They are used throughout Cowboy, from the router to query strings to cookies.
Exports Built-in constraints:
cowboy_constraints:int(3) - Integer constraint  cowboy_constraints:nonempty(3) - Non-empty constraint   Types constraint() constraint() :: int | nonempty | fun()  A constraint function.</description>
    </item>
    
    <item>
      <title>cowboy_constraints(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_constraints/</guid>
      <description>Name cowboy_constraints - Constraints
Description The module cowboy_constraints defines the built-in constraints in Cowboy and provides an interface for manipulating these constraints.
Constraints are functions that define what type of input is allowed. They are used throughout Cowboy, from the router to query strings to cookies.
Exports Built-in constraints:
cowboy_constraints:int(3) - Integer constraint  cowboy_constraints:nonempty(3) - Non-empty constraint   Types constraint() constraint() :: int | nonempty | fun()  A constraint function.</description>
    </item>
    
    <item>
      <title>cowboy_constraints(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_constraints/</guid>
      <description>Name cowboy_constraints - Constraints
Description The module cowboy_constraints defines the built-in constraints in Cowboy and provides an interface for manipulating these constraints.
Constraints are functions that define what type of input is allowed. They are used throughout Cowboy, from the router to query strings to cookies.
Exports Built-in constraints:
cowboy_constraints:int(3) - Integer constraint  cowboy_constraints:nonempty(3) - Non-empty constraint   Types constraint() constraint() :: int | nonempty | fun()  A constraint function.</description>
    </item>
    
    <item>
      <title>cowboy_constraints(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_constraints/</guid>
      <description>Name cowboy_constraints - Constraints
Description The module cowboy_constraints defines the built-in constraints in Cowboy and provides an interface for manipulating these constraints.
Constraints are functions that define what type of input is allowed. They are used throughout Cowboy, from the router to query strings to cookies.
Exports Built-in constraints:
cowboy_constraints:int(3) - Integer constraint  cowboy_constraints:nonempty(3) - Non-empty constraint   Types constraint() constraint() :: int | nonempty | fun()  A constraint function.</description>
    </item>
    
    <item>
      <title>cowboy_constraints(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_constraints/</guid>
      <description>Name cowboy_constraints - Constraints
Description The module cowboy_constraints defines the built-in constraints in Cowboy and provides an interface for manipulating these constraints.
Constraints are functions that define what type of input is allowed. They are used throughout Cowboy, from the router to query strings to cookies.
Exports Built-in constraints:
cowboy_constraints:int(3) - Integer constraint  cowboy_constraints:nonempty(3) - Non-empty constraint   Types constraint() constraint() :: int | nonempty | fun()  A constraint function.</description>
    </item>
    
    <item>
      <title>cowboy_constraints(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_constraints/</guid>
      <description>Name cowboy_constraints - Constraints
Description The module cowboy_constraints defines the built-in constraints in Cowboy and provides an interface for manipulating these constraints.
Constraints are functions that define what type of input is allowed. They are used throughout Cowboy, from the router to query strings to cookies.
Exports Built-in constraints:
cowboy_constraints:int(3) - Integer constraint  cowboy_constraints:nonempty(3) - Non-empty constraint   Types constraint() constraint() :: int | nonempty | fun()  A constraint function.</description>
    </item>
    
    <item>
      <title>cowboy_constraints(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_constraints/</guid>
      <description>Name cowboy_constraints - Constraints
Description The module cowboy_constraints defines the built-in constraints in Cowboy and provides an interface for manipulating these constraints.
Constraints are functions that define what type of input is allowed. They are used throughout Cowboy, from the router to query strings to cookies.
Exports Built-in constraints:
cowboy_constraints:int(3) - Integer constraint  cowboy_constraints:nonempty(3) - Non-empty constraint   Types constraint() constraint() :: int | nonempty | fun()  A constraint function.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:int(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_constraints.int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_constraints.int/</guid>
      <description>Name cowboy_constraints:int - Integer constraint
Description Constraint functions implement a number of different operations.
int(forward, Bin) -&amp;gt; {ok, Int} | {error, not_an_integer} Bin :: binary() Int :: integer()  Validate and convert the text representation of an integer.
int(reverse, Int) -&amp;gt; {ok, Bin} | {error, not_an_integer}  Convert an integer back to its text representation.
int(format_error, Error) -&amp;gt; HumanReadable Error :: {not_an_integer, Bin | Int} HumanReadable :: iolist()  Generate a human-readable error message.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:int(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_constraints.int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_constraints.int/</guid>
      <description>Name cowboy_constraints:int - Integer constraint
Description Constraint functions implement a number of different operations.
int(forward, Bin) -&amp;gt; {ok, Int} | {error, not_an_integer} Bin :: binary() Int :: integer()  Validate and convert the text representation of an integer.
int(reverse, Int) -&amp;gt; {ok, Bin} | {error, not_an_integer}  Convert an integer back to its text representation.
int(format_error, Error) -&amp;gt; HumanReadable Error :: {not_an_integer, Bin | Int} HumanReadable :: iolist()  Generate a human-readable error message.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:int(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_constraints.int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_constraints.int/</guid>
      <description>Name cowboy_constraints:int - Integer constraint
Description Constraint functions implement a number of different operations.
int(forward, Bin) -&amp;gt; {ok, Int} | {error, not_an_integer} Bin :: binary() Int :: integer()  Validate and convert the text representation of an integer.
int(reverse, Int) -&amp;gt; {ok, Bin} | {error, not_an_integer}  Convert an integer back to its text representation.
int(format_error, Error) -&amp;gt; HumanReadable Error :: {not_an_integer, Bin | Int} HumanReadable :: iolist()  Generate a human-readable error message.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:int(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_constraints.int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_constraints.int/</guid>
      <description>Name cowboy_constraints:int - Integer constraint
Description Constraint functions implement a number of different operations.
int(forward, Bin) -&amp;gt; {ok, Int} | {error, not_an_integer} Bin :: binary() Int :: integer()  Validate and convert the text representation of an integer.
int(reverse, Int) -&amp;gt; {ok, Bin} | {error, not_an_integer}  Convert an integer back to its text representation.
int(format_error, Error) -&amp;gt; HumanReadable Error :: {not_an_integer, Bin | Int} HumanReadable :: iolist()  Generate a human-readable error message.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:int(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_constraints.int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_constraints.int/</guid>
      <description>Name cowboy_constraints:int - Integer constraint
Description Constraint functions implement a number of different operations.
int(forward, Bin) -&amp;gt; {ok, Int} | {error, not_an_integer} Bin :: binary() Int :: integer()  Validate and convert the text representation of an integer.
int(reverse, Int) -&amp;gt; {ok, Bin} | {error, not_an_integer}  Convert an integer back to its text representation.
int(format_error, Error) -&amp;gt; HumanReadable Error :: {not_an_integer, Bin | Int} HumanReadable :: iolist()  Generate a human-readable error message.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:int(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_constraints.int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_constraints.int/</guid>
      <description>Name cowboy_constraints:int - Integer constraint
Description Constraint functions implement a number of different operations.
int(forward, Bin) -&amp;gt; {ok, Int} | {error, not_an_integer} Bin :: binary() Int :: integer()  Validate and convert the text representation of an integer.
int(reverse, Int) -&amp;gt; {ok, Bin} | {error, not_an_integer}  Convert an integer back to its text representation.
int(format_error, Error) -&amp;gt; HumanReadable Error :: {not_an_integer, Bin | Int} HumanReadable :: iolist()  Generate a human-readable error message.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:int(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_constraints.int/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_constraints.int/</guid>
      <description>Name cowboy_constraints:int - Integer constraint
Description Constraint functions implement a number of different operations.
int(forward, Bin) -&amp;gt; {ok, Int} | {error, not_an_integer} Bin :: binary() Int :: integer()  Validate and convert the text representation of an integer.
int(reverse, Int) -&amp;gt; {ok, Bin} | {error, not_an_integer}  Convert an integer back to its text representation.
int(format_error, Error) -&amp;gt; HumanReadable Error :: {not_an_integer, Bin | Int} HumanReadable :: iolist()  Generate a human-readable error message.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:nonempty(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_constraints.nonempty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_constraints.nonempty/</guid>
      <description>Name cowboy_constraints:nonempty - Non-empty constraint
Description Constraint functions implement a number of different operations.
nonempty(forward | reverse, &amp;lt;&amp;lt;&amp;gt;&amp;gt;) -&amp;gt; {error, empty}  Reject empty values.
nonempty(forward | reverse, Bin) -&amp;gt; {ok, Bin} Bin :: binary()  Accept any other binary values.
nonempty(format_error, Error) -&amp;gt; HumanReadable Error :: {empty, Bin} HumanReadable :: iolist()  Generate a human-readable error message.
Arguments Arguments vary depending on the operation. Constraint functions always take the operation type as first argument, and the value as second argument.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:nonempty(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_constraints.nonempty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_constraints.nonempty/</guid>
      <description>Name cowboy_constraints:nonempty - Non-empty constraint
Description Constraint functions implement a number of different operations.
nonempty(forward | reverse, &amp;lt;&amp;lt;&amp;gt;&amp;gt;) -&amp;gt; {error, empty}  Reject empty values.
nonempty(forward | reverse, Bin) -&amp;gt; {ok, Bin} Bin :: binary()  Accept any other binary values.
nonempty(format_error, Error) -&amp;gt; HumanReadable Error :: {empty, Bin} HumanReadable :: iolist()  Generate a human-readable error message.
Arguments Arguments vary depending on the operation. Constraint functions always take the operation type as first argument, and the value as second argument.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:nonempty(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_constraints.nonempty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_constraints.nonempty/</guid>
      <description>Name cowboy_constraints:nonempty - Non-empty constraint
Description Constraint functions implement a number of different operations.
nonempty(forward | reverse, &amp;lt;&amp;lt;&amp;gt;&amp;gt;) -&amp;gt; {error, empty}  Reject empty values.
nonempty(forward | reverse, Bin) -&amp;gt; {ok, Bin} Bin :: binary()  Accept any other binary values.
nonempty(format_error, Error) -&amp;gt; HumanReadable Error :: {empty, Bin} HumanReadable :: iolist()  Generate a human-readable error message.
Arguments Arguments vary depending on the operation. Constraint functions always take the operation type as first argument, and the value as second argument.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:nonempty(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_constraints.nonempty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_constraints.nonempty/</guid>
      <description>Name cowboy_constraints:nonempty - Non-empty constraint
Description Constraint functions implement a number of different operations.
nonempty(forward | reverse, &amp;lt;&amp;lt;&amp;gt;&amp;gt;) -&amp;gt; {error, empty}  Reject empty values.
nonempty(forward | reverse, Bin) -&amp;gt; {ok, Bin} Bin :: binary()  Accept any other binary values.
nonempty(format_error, Error) -&amp;gt; HumanReadable Error :: {empty, Bin} HumanReadable :: iolist()  Generate a human-readable error message.
Arguments Arguments vary depending on the operation. Constraint functions always take the operation type as first argument, and the value as second argument.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:nonempty(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_constraints.nonempty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_constraints.nonempty/</guid>
      <description>Name cowboy_constraints:nonempty - Non-empty constraint
Description Constraint functions implement a number of different operations.
nonempty(forward | reverse, &amp;lt;&amp;lt;&amp;gt;&amp;gt;) -&amp;gt; {error, empty}  Reject empty values.
nonempty(forward | reverse, Bin) -&amp;gt; {ok, Bin} Bin :: binary()  Accept any other binary values.
nonempty(format_error, Error) -&amp;gt; HumanReadable Error :: {empty, Bin} HumanReadable :: iolist()  Generate a human-readable error message.
Arguments Arguments vary depending on the operation. Constraint functions always take the operation type as first argument, and the value as second argument.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:nonempty(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_constraints.nonempty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_constraints.nonempty/</guid>
      <description>Name cowboy_constraints:nonempty - Non-empty constraint
Description Constraint functions implement a number of different operations.
nonempty(forward | reverse, &amp;lt;&amp;lt;&amp;gt;&amp;gt;) -&amp;gt; {error, empty}  Reject empty values.
nonempty(forward | reverse, Bin) -&amp;gt; {ok, Bin} Bin :: binary()  Accept any other binary values.
nonempty(format_error, Error) -&amp;gt; HumanReadable Error :: {empty, Bin} HumanReadable :: iolist()  Generate a human-readable error message.
Arguments Arguments vary depending on the operation. Constraint functions always take the operation type as first argument, and the value as second argument.</description>
    </item>
    
    <item>
      <title>cowboy_constraints:nonempty(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_constraints.nonempty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_constraints.nonempty/</guid>
      <description>Name cowboy_constraints:nonempty - Non-empty constraint
Description Constraint functions implement a number of different operations.
nonempty(forward | reverse, &amp;lt;&amp;lt;&amp;gt;&amp;gt;) -&amp;gt; {error, empty}  Reject empty values.
nonempty(forward | reverse, Bin) -&amp;gt; {ok, Bin} Bin :: binary()  Accept any other binary values.
nonempty(format_error, Error) -&amp;gt; HumanReadable Error :: {empty, Bin} HumanReadable :: iolist()  Generate a human-readable error message.
Arguments Arguments vary depending on the operation. Constraint functions always take the operation type as first argument, and the value as second argument.</description>
    </item>
    
    <item>
      <title>cowboy_handler(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_handler/</guid>
      <description>Name cowboy_handler - Plain HTTP handlers
Description The cowboy_handler middleware executes the handler selected by the router or any other preceding middleware.
This middleware takes the handler module and initial state from the handler and handler_opts environment values, respectively. On completion, it adds a result value to the middleware environment, containing the return value of the terminate/3 callback (if defined) and ok otherwise.
This module also defines a callback interface for handling HTTP requests.</description>
    </item>
    
    <item>
      <title>cowboy_handler(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_handler/</guid>
      <description>Name cowboy_handler - Plain HTTP handlers
Description The cowboy_handler middleware executes the handler selected by the router or any other preceding middleware.
This middleware takes the handler module and initial state from the handler and handler_opts environment values, respectively. On completion, it adds a result value to the middleware environment, containing the return value of the terminate/3 callback (if defined) and ok otherwise.
This module also defines a callback interface for handling HTTP requests.</description>
    </item>
    
    <item>
      <title>cowboy_handler(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_handler/</guid>
      <description>Name cowboy_handler - Plain HTTP handlers
Description The cowboy_handler middleware executes the handler selected by the router or any other preceding middleware.
This middleware takes the handler module and initial state from the handler and handler_opts environment values, respectively. On completion, it adds a result value to the middleware environment, containing the return value of the terminate/3 callback (if defined) and ok otherwise.
This module also defines a callback interface for handling HTTP requests.</description>
    </item>
    
    <item>
      <title>cowboy_handler(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_handler/</guid>
      <description>Name cowboy_handler - Plain HTTP handlers
Description The cowboy_handler middleware executes the handler selected by the router or any other preceding middleware.
This middleware takes the handler module and initial state from the handler and handler_opts environment values, respectively. On completion, it adds a result value to the middleware environment, containing the return value of the terminate/3 callback (if defined) and ok otherwise.
This module also defines a callback interface for handling HTTP requests.</description>
    </item>
    
    <item>
      <title>cowboy_handler(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_handler/</guid>
      <description>Name cowboy_handler - Plain HTTP handlers
Description The cowboy_handler middleware executes the handler selected by the router or any other preceding middleware.
This middleware takes the handler module and initial state from the handler and handler_opts environment values, respectively. On completion, it adds a result value to the middleware environment, containing the return value of the terminate/3 callback (if defined) and ok otherwise.
This module also defines a callback interface for handling HTTP requests.</description>
    </item>
    
    <item>
      <title>cowboy_handler(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_handler/</guid>
      <description>Name cowboy_handler - Plain HTTP handlers
Description The cowboy_handler middleware executes the handler selected by the router or any other preceding middleware.
This middleware takes the handler module and initial state from the handler and handler_opts environment values, respectively. On completion, it adds a result value to the middleware environment, containing the return value of the terminate/3 callback (if defined) and ok otherwise.
This module also defines a callback interface for handling HTTP requests.</description>
    </item>
    
    <item>
      <title>cowboy_handler(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_handler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_handler/</guid>
      <description>Name cowboy_handler - Plain HTTP handlers
Description The cowboy_handler middleware executes the handler selected by the router or any other preceding middleware.
This middleware takes the handler module and initial state from the handler and handler_opts environment values, respectively. On completion, it adds a result value to the middleware environment, containing the return value of the terminate/3 callback (if defined) and ok otherwise.
This module also defines a callback interface for handling HTTP requests.</description>
    </item>
    
    <item>
      <title>cowboy_handler:terminate(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_handler.terminate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_handler.terminate/</guid>
      <description>Name cowboy_handler:terminate - Terminate the handler
Description terminate(Reason, PartialReq, State, Handler) -&amp;gt; ok Reason :: any() PartialReq :: map() State :: any() Handler :: module()  Call the optional terminate callback if it is defined.
Make sure to use this function at the end of the execution of modules that implement custom handler behaviors.
Arguments Reason Reason for termination.
 PartialReq The Req object.
It is possible to remove fields from the Req object to save memory when the handler has no concept of requests/responses.</description>
    </item>
    
    <item>
      <title>cowboy_handler:terminate(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_handler.terminate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_handler.terminate/</guid>
      <description>Name cowboy_handler:terminate - Terminate the handler
Description terminate(Reason, PartialReq, State, Handler) -&amp;gt; ok Reason :: any() PartialReq :: map() State :: any() Handler :: module()  Call the optional terminate callback if it is defined.
Make sure to use this function at the end of the execution of modules that implement custom handler behaviors.
Arguments Reason Reason for termination.
 PartialReq The Req object.
It is possible to remove fields from the Req object to save memory when the handler has no concept of requests/responses.</description>
    </item>
    
    <item>
      <title>cowboy_handler:terminate(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_handler.terminate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_handler.terminate/</guid>
      <description>Name cowboy_handler:terminate - Terminate the handler
Description terminate(Reason, PartialReq, State, Handler) -&amp;gt; ok Reason :: any() PartialReq :: map() State :: any() Handler :: module()  Call the optional terminate callback if it is defined.
Make sure to use this function at the end of the execution of modules that implement custom handler behaviors.
Arguments Reason Reason for termination.
 PartialReq The Req object.
It is possible to remove fields from the Req object to save memory when the handler has no concept of requests/responses.</description>
    </item>
    
    <item>
      <title>cowboy_handler:terminate(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_handler.terminate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_handler.terminate/</guid>
      <description>Name cowboy_handler:terminate - Terminate the handler
Description terminate(Reason, PartialReq, State, Handler) -&amp;gt; ok Reason :: any() PartialReq :: map() State :: any() Handler :: module()  Call the optional terminate callback if it is defined.
Make sure to use this function at the end of the execution of modules that implement custom handler behaviors.
Arguments Reason Reason for termination.
 PartialReq The Req object.
It is possible to remove fields from the Req object to save memory when the handler has no concept of requests/responses.</description>
    </item>
    
    <item>
      <title>cowboy_handler:terminate(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_handler.terminate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_handler.terminate/</guid>
      <description>Name cowboy_handler:terminate - Terminate the handler
Description terminate(Reason, PartialReq, State, Handler) -&amp;gt; ok Reason :: any() PartialReq :: map() State :: any() Handler :: module()  Call the optional terminate callback if it is defined.
Make sure to use this function at the end of the execution of modules that implement custom handler behaviors.
Arguments Reason Reason for termination.
 PartialReq The Req object.
It is possible to remove fields from the Req object to save memory when the handler has no concept of requests/responses.</description>
    </item>
    
    <item>
      <title>cowboy_handler:terminate(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_handler.terminate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_handler.terminate/</guid>
      <description>Name cowboy_handler:terminate - Terminate the handler
Description terminate(Reason, PartialReq, State, Handler) -&amp;gt; ok Reason :: any() PartialReq :: map() State :: any() Handler :: module()  Call the optional terminate callback if it is defined.
Make sure to use this function at the end of the execution of modules that implement custom handler behaviors.
Arguments Reason Reason for termination.
 PartialReq The Req object.
It is possible to remove fields from the Req object to save memory when the handler has no concept of requests/responses.</description>
    </item>
    
    <item>
      <title>cowboy_handler:terminate(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_handler.terminate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_handler.terminate/</guid>
      <description>Name cowboy_handler:terminate - Terminate the handler
Description terminate(Reason, PartialReq, State, Handler) -&amp;gt; ok Reason :: any() PartialReq :: map() State :: any() Handler :: module()  Call the optional terminate callback if it is defined.
Make sure to use this function at the end of the execution of modules that implement custom handler behaviors.
Arguments Reason Reason for termination.
 PartialReq The Req object.
It is possible to remove fields from the Req object to save memory when the handler has no concept of requests/responses.</description>
    </item>
    
    <item>
      <title>cowboy_http(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_http/</guid>
      <description>Name cowboy_http - HTTP/1.1
Description The module cowboy_http implements HTTP/1.1 and HTTP/1.0 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, env =&amp;gt; cowboy_middleware:env(), idle_timeout =&amp;gt; timeout(), inactivity_timeout =&amp;gt; timeout(), max_empty_lines =&amp;gt; non_neg_integer(), max_header_name_length =&amp;gt; non_neg_integer(), max_header_value_length =&amp;gt; non_neg_integer(), max_headers =&amp;gt; non_neg_integer(), max_keepalive =&amp;gt; non_neg_integer(), max_method_length =&amp;gt; non_neg_integer(), max_request_line_length =&amp;gt; non_neg_integer(), middlewares =&amp;gt; [module()], request_timeout =&amp;gt; timeout(), shutdown_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/1.</description>
    </item>
    
    <item>
      <title>cowboy_http(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_http/</guid>
      <description>Name cowboy_http - HTTP/1.1
Description The module cowboy_http implements HTTP/1.1 and HTTP/1.0 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, env =&amp;gt; cowboy_middleware:env(), idle_timeout =&amp;gt; timeout(), inactivity_timeout =&amp;gt; timeout(), max_empty_lines =&amp;gt; non_neg_integer(), max_header_name_length =&amp;gt; non_neg_integer(), max_header_value_length =&amp;gt; non_neg_integer(), max_headers =&amp;gt; non_neg_integer(), max_keepalive =&amp;gt; non_neg_integer(), max_method_length =&amp;gt; non_neg_integer(), max_request_line_length =&amp;gt; non_neg_integer(), middlewares =&amp;gt; [module()], request_timeout =&amp;gt; timeout(), shutdown_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/1.</description>
    </item>
    
    <item>
      <title>cowboy_http(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_http/</guid>
      <description>Name cowboy_http - HTTP/1.1
Description The module cowboy_http implements HTTP/1.1 and HTTP/1.0 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, env =&amp;gt; cowboy_middleware:env(), idle_timeout =&amp;gt; timeout(), inactivity_timeout =&amp;gt; timeout(), max_empty_lines =&amp;gt; non_neg_integer(), max_header_name_length =&amp;gt; non_neg_integer(), max_header_value_length =&amp;gt; non_neg_integer(), max_headers =&amp;gt; non_neg_integer(), max_keepalive =&amp;gt; non_neg_integer(), max_method_length =&amp;gt; non_neg_integer(), max_request_line_length =&amp;gt; non_neg_integer(), max_skip_body_length =&amp;gt; non_neg_integer(), middlewares =&amp;gt; [module()], request_timeout =&amp;gt; timeout(), shutdown_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/1.</description>
    </item>
    
    <item>
      <title>cowboy_http(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_http/</guid>
      <description>Name cowboy_http - HTTP/1.1
Description The module cowboy_http implements HTTP/1.1 and HTTP/1.0 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, env =&amp;gt; cowboy_middleware:env(), idle_timeout =&amp;gt; timeout(), inactivity_timeout =&amp;gt; timeout(), max_empty_lines =&amp;gt; non_neg_integer(), max_header_name_length =&amp;gt; non_neg_integer(), max_header_value_length =&amp;gt; non_neg_integer(), max_headers =&amp;gt; non_neg_integer(), max_keepalive =&amp;gt; non_neg_integer(), max_method_length =&amp;gt; non_neg_integer(), max_request_line_length =&amp;gt; non_neg_integer(), max_skip_body_length =&amp;gt; non_neg_integer(), middlewares =&amp;gt; [module()], request_timeout =&amp;gt; timeout(), shutdown_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/1.</description>
    </item>
    
    <item>
      <title>cowboy_http(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_http/</guid>
      <description>Name cowboy_http - HTTP/1.1
Description The module cowboy_http implements HTTP/1.1 and HTTP/1.0 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, env =&amp;gt; cowboy_middleware:env(), idle_timeout =&amp;gt; timeout(), inactivity_timeout =&amp;gt; timeout(), max_empty_lines =&amp;gt; non_neg_integer(), max_header_name_length =&amp;gt; non_neg_integer(), max_header_value_length =&amp;gt; non_neg_integer(), max_headers =&amp;gt; non_neg_integer(), max_keepalive =&amp;gt; non_neg_integer(), max_method_length =&amp;gt; non_neg_integer(), max_request_line_length =&amp;gt; non_neg_integer(), max_skip_body_length =&amp;gt; non_neg_integer(), middlewares =&amp;gt; [module()], request_timeout =&amp;gt; timeout(), shutdown_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/1.</description>
    </item>
    
    <item>
      <title>cowboy_http(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_http/</guid>
      <description>Name cowboy_http - HTTP/1.1
Description The module cowboy_http implements HTTP/1.1 and HTTP/1.0 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, env =&amp;gt; cowboy_middleware:env(), idle_timeout =&amp;gt; timeout(), inactivity_timeout =&amp;gt; timeout(), linger_timeout =&amp;gt; timeout(), max_empty_lines =&amp;gt; non_neg_integer(), max_header_name_length =&amp;gt; non_neg_integer(), max_header_value_length =&amp;gt; non_neg_integer(), max_headers =&amp;gt; non_neg_integer(), max_keepalive =&amp;gt; non_neg_integer(), max_method_length =&amp;gt; non_neg_integer(), max_request_line_length =&amp;gt; non_neg_integer(), max_skip_body_length =&amp;gt; non_neg_integer(), middlewares =&amp;gt; [module()], request_timeout =&amp;gt; timeout(), shutdown_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/1.</description>
    </item>
    
    <item>
      <title>cowboy_http(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_http/</guid>
      <description>Name cowboy_http - HTTP/1.1
Description The module cowboy_http implements HTTP/1.1 and HTTP/1.0 as a Ranch protocol.
Options opts() :: #{ chunked =&amp;gt; boolean(), connection_type =&amp;gt; worker | supervisor, http10_keepalive =&amp;gt; boolean(), idle_timeout =&amp;gt; timeout(), inactivity_timeout =&amp;gt; timeout(), linger_timeout =&amp;gt; timeout(), max_empty_lines =&amp;gt; non_neg_integer(), max_header_name_length =&amp;gt; non_neg_integer(), max_header_value_length =&amp;gt; non_neg_integer(), max_headers =&amp;gt; non_neg_integer(), max_keepalive =&amp;gt; non_neg_integer(), max_method_length =&amp;gt; non_neg_integer(), max_request_line_length =&amp;gt; non_neg_integer(), max_skip_body_length =&amp;gt; non_neg_integer(), proxy_header =&amp;gt; boolean(), request_timeout =&amp;gt; timeout(), sendfile =&amp;gt; boolean(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/1.</description>
    </item>
    
    <item>
      <title>cowboy_http2(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_http2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_http2/</guid>
      <description>Name cowboy_http2 - HTTP/2
Description The module cowboy_http2 implements HTTP/2 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, env =&amp;gt; cowboy_middleware:env(), inactivity_timeout =&amp;gt; timeout(), middlewares =&amp;gt; [module()], preface_timeout =&amp;gt; timeout(), shutdown_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/2 protocol.
This configuration is passed to Cowboy when starting listeners using cowboy:start_clear/3 or cowboy:start_tls/3 functions.
It can be updated without restarting listeners using the Ranch functions ranch:get_protocol_options/1 and ranch:set_protocol_options/2.</description>
    </item>
    
    <item>
      <title>cowboy_http2(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_http2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_http2/</guid>
      <description>Name cowboy_http2 - HTTP/2
Description The module cowboy_http2 implements HTTP/2 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, env =&amp;gt; cowboy_middleware:env(), inactivity_timeout =&amp;gt; timeout(), middlewares =&amp;gt; [module()], preface_timeout =&amp;gt; timeout(), shutdown_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/2 protocol.
This configuration is passed to Cowboy when starting listeners using cowboy:start_clear/3 or cowboy:start_tls/3 functions.
It can be updated without restarting listeners using the Ranch functions ranch:get_protocol_options/1 and ranch:set_protocol_options/2.</description>
    </item>
    
    <item>
      <title>cowboy_http2(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_http2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_http2/</guid>
      <description>Name cowboy_http2 - HTTP/2
Description The module cowboy_http2 implements HTTP/2 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, env =&amp;gt; cowboy_middleware:env(), inactivity_timeout =&amp;gt; timeout(), middlewares =&amp;gt; [module()], preface_timeout =&amp;gt; timeout(), shutdown_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/2 protocol.
This configuration is passed to Cowboy when starting listeners using cowboy:start_clear/3 or cowboy:start_tls/3 functions.
It can be updated without restarting listeners using the Ranch functions ranch:get_protocol_options/1 and ranch:set_protocol_options/2.</description>
    </item>
    
    <item>
      <title>cowboy_http2(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_http2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_http2/</guid>
      <description>Name cowboy_http2 - HTTP/2
Description The module cowboy_http2 implements HTTP/2 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, env =&amp;gt; cowboy_middleware:env(), inactivity_timeout =&amp;gt; timeout(), middlewares =&amp;gt; [module()], preface_timeout =&amp;gt; timeout(), shutdown_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/2 protocol.
This configuration is passed to Cowboy when starting listeners using cowboy:start_clear/3 or cowboy:start_tls/3 functions.
It can be updated without restarting listeners using the Ranch functions ranch:get_protocol_options/1 and ranch:set_protocol_options/2.</description>
    </item>
    
    <item>
      <title>cowboy_http2(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_http2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_http2/</guid>
      <description>Name cowboy_http2 - HTTP/2
Description The module cowboy_http2 implements HTTP/2 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, enable_connect_protocol =&amp;gt; boolean(), env =&amp;gt; cowboy_middleware:env(), inactivity_timeout =&amp;gt; timeout(), initial_connection_window_size =&amp;gt; 65535..16#7fffffff, initial_stream_window_size =&amp;gt; 0..16#7fffffff, max_concurrent_streams =&amp;gt; non_neg_integer() | infinity, max_decode_table_size =&amp;gt; non_neg_integer(), max_encode_table_size =&amp;gt; non_neg_integer(), max_frame_size_received =&amp;gt; 16384..16777215, max_frame_size_sent =&amp;gt; 16384..16777215 | infinity, middlewares =&amp;gt; [module()], preface_timeout =&amp;gt; timeout(), settings_timeout =&amp;gt; timeout(), shutdown_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/2 protocol.</description>
    </item>
    
    <item>
      <title>cowboy_http2(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_http2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_http2/</guid>
      <description>Name cowboy_http2 - HTTP/2
Description The module cowboy_http2 implements HTTP/2 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, enable_connect_protocol =&amp;gt; boolean(), env =&amp;gt; cowboy_middleware:env(), inactivity_timeout =&amp;gt; timeout(), initial_connection_window_size =&amp;gt; 65535..16#7fffffff, initial_stream_window_size =&amp;gt; 0..16#7fffffff, max_concurrent_streams =&amp;gt; non_neg_integer() | infinity, max_decode_table_size =&amp;gt; non_neg_integer(), max_encode_table_size =&amp;gt; non_neg_integer(), max_frame_size_received =&amp;gt; 16384..16777215, max_frame_size_sent =&amp;gt; 16384..16777215 | infinity, middlewares =&amp;gt; [module()], preface_timeout =&amp;gt; timeout(), settings_timeout =&amp;gt; timeout(), shutdown_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/2 protocol.</description>
    </item>
    
    <item>
      <title>cowboy_http2(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_http2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_http2/</guid>
      <description>Name cowboy_http2 - HTTP/2
Description The module cowboy_http2 implements HTTP/2 as a Ranch protocol.
Options opts() :: #{ connection_type =&amp;gt; worker | supervisor, enable_connect_protocol =&amp;gt; boolean(), idle_timeout =&amp;gt; timeout(), inactivity_timeout =&amp;gt; timeout(), initial_connection_window_size =&amp;gt; 65535..16#7fffffff, initial_stream_window_size =&amp;gt; 0..16#7fffffff, max_concurrent_streams =&amp;gt; non_neg_integer() | infinity, max_decode_table_size =&amp;gt; non_neg_integer(), max_encode_table_size =&amp;gt; non_neg_integer(), max_frame_size_received =&amp;gt; 16384..16777215, max_frame_size_sent =&amp;gt; 16384..16777215 | infinity, preface_timeout =&amp;gt; timeout(), proxy_header =&amp;gt; boolean(), sendfile =&amp;gt; boolean(), settings_timeout =&amp;gt; timeout(), stream_handlers =&amp;gt; [module()] }  Configuration for the HTTP/2 protocol.</description>
    </item>
    
    <item>
      <title>cowboy_loop(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_loop/</guid>
      <description>Name cowboy_loop - Loop handlers
Description The module cowboy_loop defines a callback interface for long running HTTP connections.
You should switch to this behavior for long polling, server-sent events and similar long-running requests.
There are generally two usage patterns:
Loop until receiving a specific message, then send a response and stop execution (for example long polling);  Or initiate a response in init/2 and stream the body in info/3 as necessary (for example server-sent events).</description>
    </item>
    
    <item>
      <title>cowboy_loop(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_loop/</guid>
      <description>Name cowboy_loop - Loop handlers
Description The module cowboy_loop defines a callback interface for long running HTTP connections.
You should switch to this behavior for long polling, server-sent events and similar long-running requests.
There are generally two usage patterns:
Loop until receiving a specific message, then send a response and stop execution (for example long polling);  Or initiate a response in init/2 and stream the body in info/3 as necessary (for example server-sent events).</description>
    </item>
    
    <item>
      <title>cowboy_loop(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_loop/</guid>
      <description>Name cowboy_loop - Loop handlers
Description The module cowboy_loop defines a callback interface for long running HTTP connections.
You should switch to this behavior for long polling, server-sent events and similar long-running requests.
There are generally two usage patterns:
Loop until receiving a specific message, then send a response and stop execution (for example long polling);  Or initiate a response in init/2 and stream the body in info/3 as necessary (for example server-sent events).</description>
    </item>
    
    <item>
      <title>cowboy_loop(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_loop/</guid>
      <description>Name cowboy_loop - Loop handlers
Description The module cowboy_loop defines a callback interface for long running HTTP connections.
You should switch to this behavior for long polling, server-sent events and similar long-running requests.
There are generally two usage patterns:
Loop until receiving a specific message, then send a response and stop execution (for example long polling);  Or initiate a response in init/2 and stream the body in info/3 as necessary (for example server-sent events).</description>
    </item>
    
    <item>
      <title>cowboy_loop(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_loop/</guid>
      <description>Name cowboy_loop - Loop handlers
Description The module cowboy_loop defines a callback interface for long running HTTP connections.
You should switch to this behavior for long polling, server-sent events and similar long-running requests.
There are generally two usage patterns:
Loop until receiving a specific message, then send a response and stop execution (for example long polling);  Or initiate a response in init/2 and stream the body in info/3 as necessary (for example server-sent events).</description>
    </item>
    
    <item>
      <title>cowboy_loop(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_loop/</guid>
      <description>Name cowboy_loop - Loop handlers
Description The module cowboy_loop defines a callback interface for long running HTTP connections.
You should switch to this behavior for long polling, server-sent events and similar long-running requests.
There are generally two usage patterns:
Loop until receiving a specific message, then send a response and stop execution (for example long polling);  Or initiate a response in init/2 and stream the body in info/3 as necessary (for example server-sent events).</description>
    </item>
    
    <item>
      <title>cowboy_loop(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_loop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_loop/</guid>
      <description>Name cowboy_loop - Loop handlers
Description The module cowboy_loop defines a callback interface for long running HTTP connections.
You should switch to this behavior for long polling, server-sent events and similar long-running requests.
There are generally two usage patterns:
Loop until receiving a specific message, then send a response and stop execution (for example long polling);  Or initiate a response in init/2 and stream the body in info/3 as necessary (for example server-sent events).</description>
    </item>
    
    <item>
      <title>cowboy_middleware(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_middleware/</guid>
      <description>Name cowboy_middleware - Middlewares
Description The module cowboy_middleware defines a callback interface for Cowboy middlewares.
Middlewares process the request sequentially in the order they are configured.
Callbacks Middlewares implement the following interface:
execute(Req, Env) -&amp;gt; {ok, Req, Env} | {suspend, module(), atom(), [any()]} | {stop, Req} Req :: cowboy_req:req() Env :: cowboy_middleware:env()  The execute/2 is the only callback that needs to be implemented. It must execute the middleware and return with instructions for Cowboy.</description>
    </item>
    
    <item>
      <title>cowboy_middleware(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_middleware/</guid>
      <description>Name cowboy_middleware - Middlewares
Description The module cowboy_middleware defines a callback interface for Cowboy middlewares.
Middlewares process the request sequentially in the order they are configured.
Callbacks Middlewares implement the following interface:
execute(Req, Env) -&amp;gt; {ok, Req, Env} | {suspend, module(), atom(), [any()]} | {stop, Req} Req :: cowboy_req:req() Env :: cowboy_middleware:env()  The execute/2 is the only callback that needs to be implemented. It must execute the middleware and return with instructions for Cowboy.</description>
    </item>
    
    <item>
      <title>cowboy_middleware(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_middleware/</guid>
      <description>Name cowboy_middleware - Middlewares
Description The module cowboy_middleware defines a callback interface for Cowboy middlewares.
Middlewares process the request sequentially in the order they are configured.
Callbacks Middlewares implement the following interface:
execute(Req, Env) -&amp;gt; {ok, Req, Env} | {suspend, module(), atom(), [any()]} | {stop, Req} Req :: cowboy_req:req() Env :: cowboy_middleware:env()  The execute/2 is the only callback that needs to be implemented. It must execute the middleware and return with instructions for Cowboy.</description>
    </item>
    
    <item>
      <title>cowboy_middleware(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_middleware/</guid>
      <description>Name cowboy_middleware - Middlewares
Description The module cowboy_middleware defines a callback interface for Cowboy middlewares.
Middlewares process the request sequentially in the order they are configured.
Callbacks Middlewares implement the following interface:
execute(Req, Env) -&amp;gt; {ok, Req, Env} | {suspend, module(), atom(), [any()]} | {stop, Req} Req :: cowboy_req:req() Env :: cowboy_middleware:env()  The execute/2 is the only callback that needs to be implemented. It must execute the middleware and return with instructions for Cowboy.</description>
    </item>
    
    <item>
      <title>cowboy_middleware(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_middleware/</guid>
      <description>Name cowboy_middleware - Middlewares
Description The module cowboy_middleware defines a callback interface for Cowboy middlewares.
Middlewares process the request sequentially in the order they are configured.
Callbacks Middlewares implement the following interface:
execute(Req, Env) -&amp;gt; {ok, Req, Env} | {suspend, module(), atom(), [any()]} | {stop, Req} Req :: cowboy_req:req() Env :: cowboy_middleware:env()  The execute/2 is the only callback that needs to be implemented. It must execute the middleware and return with instructions for Cowboy.</description>
    </item>
    
    <item>
      <title>cowboy_middleware(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_middleware/</guid>
      <description>Name cowboy_middleware - Middlewares
Description The module cowboy_middleware defines a callback interface for Cowboy middlewares.
Middlewares process the request sequentially in the order they are configured.
Callbacks Middlewares implement the following interface:
execute(Req, Env) -&amp;gt; {ok, Req, Env} | {suspend, module(), atom(), [any()]} | {stop, Req} Req :: cowboy_req:req() Env :: cowboy_middleware:env()  The execute/2 is the only callback that needs to be implemented. It must execute the middleware and return with instructions for Cowboy.</description>
    </item>
    
    <item>
      <title>cowboy_middleware(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_middleware/</guid>
      <description>Name cowboy_middleware - Middlewares
Description The module cowboy_middleware defines a callback interface for Cowboy middlewares.
Middlewares process the request sequentially in the order they are configured.
Callbacks Middlewares implement the following interface:
execute(Req, Env) -&amp;gt; {ok, Req, Env} | {suspend, module(), atom(), [any()]} | {stop, Req} Req :: cowboy_req:req() Env :: cowboy_middleware:env()  The execute/2 is the only callback that needs to be implemented. It must execute the middleware and return with instructions for Cowboy.</description>
    </item>
    
    <item>
      <title>cowboy_req(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req/</guid>
      <description>Name cowboy_req - HTTP request and response
Description The module cowboy_req provides functions to access, manipulate and respond to requests.
There are four types of functions in this module. They can be differentiated by their name and their return type:
Type Name pattern Return type access no verb, parse_*, match_* Value  question has_* boolean()  modification set_* Req  action any other verb ok | {Result, Value, Req}   Any Req returned must be used in place of the one passed as argument.</description>
    </item>
    
    <item>
      <title>cowboy_req(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req/</guid>
      <description>Name cowboy_req - HTTP request and response
Description The module cowboy_req provides functions to access, manipulate and respond to requests.
There are four types of functions in this module. They can be differentiated by their name and their return type:
Type Name pattern Return type access no verb, parse_*, match_* Value  question has_* boolean()  modification set_* Req  action any other verb ok | {Result, Value, Req}   Any Req returned must be used in place of the one passed as argument.</description>
    </item>
    
    <item>
      <title>cowboy_req(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req/</guid>
      <description>Name cowboy_req - HTTP request and response
Description The module cowboy_req provides functions to access, manipulate and respond to requests.
There are four types of functions in this module. They can be differentiated by their name and their return type:
Type Name pattern Return type access no verb, parse_*, match_* Value  question has_* boolean()  modification set_* Req  action any other verb ok | {Result, Value, Req}   Any Req returned must be used in place of the one passed as argument.</description>
    </item>
    
    <item>
      <title>cowboy_req(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req/</guid>
      <description>Name cowboy_req - HTTP request and response
Description The module cowboy_req provides functions to access, manipulate and respond to requests.
There are four types of functions in this module. They can be differentiated by their name and their return type:
Type Name pattern Return type access no verb, parse_*, match_* Value  question has_* boolean()  modification set_* Req  action any other verb ok | {Result, Value, Req}   Any Req returned must be used in place of the one passed as argument.</description>
    </item>
    
    <item>
      <title>cowboy_req(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req/</guid>
      <description>Name cowboy_req - HTTP request and response
Description The module cowboy_req provides functions to access, manipulate and respond to requests.
There are four types of functions in this module. They can be differentiated by their name and their return type:
Type Name pattern Return type access no verb, parse_*, match_* Value  question has_* boolean()  modification set_* Req  action any other verb ok | {Result, Value, Req}   Any Req returned must be used in place of the one passed as argument.</description>
    </item>
    
    <item>
      <title>cowboy_req(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req/</guid>
      <description>Name cowboy_req - HTTP request and response
Description The module cowboy_req provides functions to access, manipulate and respond to requests.
There are four types of functions in this module. They can be differentiated by their name and their return type:
Type Name pattern Return type access no verb, parse_*, match_* Value  question has_* boolean()  modification set_* Req  action any other verb ok | {Result, Value, Req}   Any Req returned must be used in place of the one passed as argument.</description>
    </item>
    
    <item>
      <title>cowboy_req(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req/</guid>
      <description>Name cowboy_req - HTTP request and response
Description The module cowboy_req provides functions to access, manipulate and respond to requests.
There are four types of functions in this module. They can be differentiated by their name and their return type:
Type Name pattern Return type access no verb, parse_*, match_* Value  question has_* boolean()  modification set_* Req  action any other verb ok | {Result, Value, Req}   Any Req returned must be used in place of the one passed as argument.</description>
    </item>
    
    <item>
      <title>cowboy_req:binding(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.binding/</guid>
      <description>Name cowboy_req:binding - Access a value bound from the route
Description binding(Name, Req) -&amp;gt; binding(Name, Req, undefined) binding(Name, Req, Default) -&amp;gt; any() | Default Name :: atom() Req :: cowboy_req:req() Default :: any()  Return the value for the given binding.
Arguments Name Desired binding name as an atom.
 Req The Req object.
 Default Default value returned when the binding is missing.
  Return value By default the value is a case sensitive binary string, however constraints may change the type of this value (for example automatically converting numbers to integer).</description>
    </item>
    
    <item>
      <title>cowboy_req:binding(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.binding/</guid>
      <description>Name cowboy_req:binding - Access a value bound from the route
Description binding(Name, Req) -&amp;gt; binding(Name, Req, undefined) binding(Name, Req, Default) -&amp;gt; any() | Default Name :: atom() Req :: cowboy_req:req() Default :: any()  Return the value for the given binding.
Arguments Name Desired binding name as an atom.
 Req The Req object.
 Default Default value returned when the binding is missing.
  Return value By default the value is a case sensitive binary string, however constraints may change the type of this value (for example automatically converting numbers to integer).</description>
    </item>
    
    <item>
      <title>cowboy_req:binding(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.binding/</guid>
      <description>Name cowboy_req:binding - Access a value bound from the route
Description binding(Name, Req) -&amp;gt; binding(Name, Req, undefined) binding(Name, Req, Default) -&amp;gt; any() | Default Name :: atom() Req :: cowboy_req:req() Default :: any()  Return the value for the given binding.
Arguments Name Desired binding name as an atom.
 Req The Req object.
 Default Default value returned when the binding is missing.
  Return value By default the value is a case sensitive binary string, however constraints may change the type of this value (for example automatically converting numbers to integer).</description>
    </item>
    
    <item>
      <title>cowboy_req:binding(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.binding/</guid>
      <description>Name cowboy_req:binding - Access a value bound from the route
Description binding(Name, Req) -&amp;gt; binding(Name, Req, undefined) binding(Name, Req, Default) -&amp;gt; any() | Default Name :: atom() Req :: cowboy_req:req() Default :: any()  Return the value for the given binding.
Arguments Name Desired binding name as an atom.
 Req The Req object.
 Default Default value returned when the binding is missing.
  Return value By default the value is a case sensitive binary string, however constraints may change the type of this value (for example automatically converting numbers to integer).</description>
    </item>
    
    <item>
      <title>cowboy_req:binding(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.binding/</guid>
      <description>Name cowboy_req:binding - Access a value bound from the route
Description binding(Name, Req) -&amp;gt; binding(Name, Req, undefined) binding(Name, Req, Default) -&amp;gt; any() | Default Name :: atom() Req :: cowboy_req:req() Default :: any()  Return the value for the given binding.
Arguments Name Desired binding name as an atom.
 Req The Req object.
 Default Default value returned when the binding is missing.
  Return value By default the value is a case sensitive binary string, however constraints may change the type of this value (for example automatically converting numbers to integer).</description>
    </item>
    
    <item>
      <title>cowboy_req:binding(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.binding/</guid>
      <description>Name cowboy_req:binding - Access a value bound from the route
Description binding(Name, Req) -&amp;gt; binding(Name, Req, undefined) binding(Name, Req, Default) -&amp;gt; any() | Default Name :: atom() Req :: cowboy_req:req() Default :: any()  Return the value for the given binding.
Arguments Name Desired binding name as an atom.
 Req The Req object.
 Default Default value returned when the binding is missing.
  Return value By default the value is a case sensitive binary string, however constraints may change the type of this value (for example automatically converting numbers to integer).</description>
    </item>
    
    <item>
      <title>cowboy_req:binding(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.binding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.binding/</guid>
      <description>Name cowboy_req:binding - Access a value bound from the route
Description binding(Name, Req) -&amp;gt; binding(Name, Req, undefined) binding(Name, Req, Default) -&amp;gt; any() | Default Name :: atom() Req :: cowboy_req:req() Default :: any()  Return the value for the given binding.
Arguments Name Desired binding name as an atom.
 Req The Req object.
 Default Default value returned when the binding is missing.
  Return value By default the value is a case sensitive binary string, however constraints may change the type of this value (for example automatically converting numbers to integer).</description>
    </item>
    
    <item>
      <title>cowboy_req:bindings(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.bindings/</guid>
      <description>Name cowboy_req:bindings - Access all values bound from the route
Description bindings(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:bindings()  Return a map containing all bindings.
Arguments Req The Req object.
  Return value By default values are case sensitive binary strings, however constraints may change the type of this value (for example automatically converting numbers to integer).
Changelog 2.0: Only the values are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:bindings(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.bindings/</guid>
      <description>Name cowboy_req:bindings - Access all values bound from the route
Description bindings(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:bindings()  Return a map containing all bindings.
Arguments Req The Req object.
  Return value By default values are case sensitive binary strings, however constraints may change the type of this value (for example automatically converting numbers to integer).
Changelog 2.0: Only the values are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:bindings(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.bindings/</guid>
      <description>Name cowboy_req:bindings - Access all values bound from the route
Description bindings(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:bindings()  Return a map containing all bindings.
Arguments Req The Req object.
  Return value By default values are case sensitive binary strings, however constraints may change the type of this value (for example automatically converting numbers to integer).
Changelog 2.0: Only the values are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:bindings(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.bindings/</guid>
      <description>Name cowboy_req:bindings - Access all values bound from the route
Description bindings(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:bindings()  Return a map containing all bindings.
Arguments Req The Req object.
  Return value By default values are case sensitive binary strings, however constraints may change the type of this value (for example automatically converting numbers to integer).
Changelog 2.0: Only the values are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:bindings(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.bindings/</guid>
      <description>Name cowboy_req:bindings - Access all values bound from the route
Description bindings(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:bindings()  Return a map containing all bindings.
Arguments Req The Req object.
  Return value By default values are case sensitive binary strings, however constraints may change the type of this value (for example automatically converting numbers to integer).
Changelog 2.0: Only the values are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:bindings(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.bindings/</guid>
      <description>Name cowboy_req:bindings - Access all values bound from the route
Description bindings(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:bindings()  Return a map containing all bindings.
Arguments Req The Req object.
  Return value By default values are case sensitive binary strings, however constraints may change the type of this value (for example automatically converting numbers to integer).
Changelog 2.0: Only the values are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:bindings(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.bindings/</guid>
      <description>Name cowboy_req:bindings - Access all values bound from the route
Description bindings(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:bindings()  Return a map containing all bindings.
Arguments Req The Req object.
  Return value By default values are case sensitive binary strings, however constraints may change the type of this value (for example automatically converting numbers to integer).
Changelog 2.0: Only the values are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:body_length(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.body_length/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.body_length/</guid>
      <description>Name cowboy_req:body_length - Body length
Description body_length(Req :: cowboy_req:req()) -&amp;gt; undefined | non_neg_integer()  Return the length of the request body.
The length is not always known before reading the body. In those cases Cowboy will return undefined. The body length is available after the body has been fully read.
Arguments Req The Req object.
  Return value The length of the request body, or undefined if it is not known.</description>
    </item>
    
    <item>
      <title>cowboy_req:body_length(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.body_length/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.body_length/</guid>
      <description>Name cowboy_req:body_length - Body length
Description body_length(Req :: cowboy_req:req()) -&amp;gt; undefined | non_neg_integer()  Return the length of the request body.
The length is not always known before reading the body. In those cases Cowboy will return undefined. The body length is available after the body has been fully read.
Arguments Req The Req object.
  Return value The length of the request body, or undefined if it is not known.</description>
    </item>
    
    <item>
      <title>cowboy_req:body_length(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.body_length/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.body_length/</guid>
      <description>Name cowboy_req:body_length - Body length
Description body_length(Req :: cowboy_req:req()) -&amp;gt; undefined | non_neg_integer()  Return the length of the request body.
The length is not always known before reading the body. In those cases Cowboy will return undefined. The body length is available after the body has been fully read.
Arguments Req The Req object.
  Return value The length of the request body, or undefined if it is not known.</description>
    </item>
    
    <item>
      <title>cowboy_req:body_length(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.body_length/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.body_length/</guid>
      <description>Name cowboy_req:body_length - Body length
Description body_length(Req :: cowboy_req:req()) -&amp;gt; undefined | non_neg_integer()  Return the length of the request body.
The length is not always known before reading the body. In those cases Cowboy will return undefined. The body length is available after the body has been fully read.
Arguments Req The Req object.
  Return value The length of the request body, or undefined if it is not known.</description>
    </item>
    
    <item>
      <title>cowboy_req:body_length(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.body_length/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.body_length/</guid>
      <description>Name cowboy_req:body_length - Body length
Description body_length(Req :: cowboy_req:req()) -&amp;gt; undefined | non_neg_integer()  Return the length of the request body.
The length is not always known before reading the body. In those cases Cowboy will return undefined. The body length is available after the body has been fully read.
Arguments Req The Req object.
  Return value The length of the request body, or undefined if it is not known.</description>
    </item>
    
    <item>
      <title>cowboy_req:body_length(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.body_length/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.body_length/</guid>
      <description>Name cowboy_req:body_length - Body length
Description body_length(Req :: cowboy_req:req()) -&amp;gt; undefined | non_neg_integer()  Return the length of the request body.
The length is not always known before reading the body. In those cases Cowboy will return undefined. The body length is available after the body has been fully read.
Arguments Req The Req object.
  Return value The length of the request body, or undefined if it is not known.</description>
    </item>
    
    <item>
      <title>cowboy_req:body_length(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.body_length/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.body_length/</guid>
      <description>Name cowboy_req:body_length - Body length
Description body_length(Req :: cowboy_req:req()) -&amp;gt; undefined | non_neg_integer()  Return the length of the request body.
The length is not always known before reading the body. In those cases Cowboy will return undefined. The body length is available after the body has been fully read.
Arguments Req The Req object.
  Return value The length of the request body, or undefined if it is not known.</description>
    </item>
    
    <item>
      <title>cowboy_req:cert(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.cert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.cert/</guid>
      <description>Name cowboy_req:cert - Client TLS certificate
Description cert(Req :: cowboy_req:req()) -&amp;gt; binary() | undefined  Return the peer&amp;apos;s TLS certificate.
Using the default configuration this function will always return undefined. You need to explicitly configure Cowboy to request the client certificate. To do this you need to set the verify transport option to verify_peer:
{ok, _} = cowboy:start_tls(example, [ {port, 8443}, {cert, &#34;path/to/cert.pem&#34;}, {verify, verify_peer} ], #{ env =&amp;gt; #{dispatch =&amp;gt; Dispatch} }).</description>
    </item>
    
    <item>
      <title>cowboy_req:cert(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.cert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.cert/</guid>
      <description>Name cowboy_req:cert - Client TLS certificate
Description cert(Req :: cowboy_req:req()) -&amp;gt; binary() | undefined  Return the peer&amp;apos;s TLS certificate.
Using the default configuration this function will always return undefined. You need to explicitly configure Cowboy to request the client certificate. To do this you need to set the verify transport option to verify_peer:
{ok, _} = cowboy:start_tls(example, [ {port, 8443}, {cert, &#34;path/to/cert.pem&#34;}, {verify, verify_peer} ], #{ env =&amp;gt; #{dispatch =&amp;gt; Dispatch} }).</description>
    </item>
    
    <item>
      <title>cowboy_req:cert(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.cert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.cert/</guid>
      <description>Name cowboy_req:cert - Client TLS certificate
Description cert(Req :: cowboy_req:req()) -&amp;gt; binary() | undefined  Return the peer&amp;apos;s TLS certificate.
Using the default configuration this function will always return undefined. You need to explicitly configure Cowboy to request the client certificate. To do this you need to set the verify transport option to verify_peer:
{ok, _} = cowboy:start_tls(example, [ {port, 8443}, {cert, &#34;path/to/cert.pem&#34;}, {verify, verify_peer} ], #{ env =&amp;gt; #{dispatch =&amp;gt; Dispatch} }).</description>
    </item>
    
    <item>
      <title>cowboy_req:cert(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.cert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.cert/</guid>
      <description>Name cowboy_req:cert - Client TLS certificate
Description cert(Req :: cowboy_req:req()) -&amp;gt; binary() | undefined  Return the peer&amp;apos;s TLS certificate.
Using the default configuration this function will always return undefined. You need to explicitly configure Cowboy to request the client certificate. To do this you need to set the verify transport option to verify_peer:
{ok, _} = cowboy:start_tls(example, [ {port, 8443}, {cert, &#34;path/to/cert.pem&#34;}, {verify, verify_peer} ], #{ env =&amp;gt; #{dispatch =&amp;gt; Dispatch} }).</description>
    </item>
    
    <item>
      <title>cowboy_req:cert(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.cert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.cert/</guid>
      <description>Name cowboy_req:cert - Client TLS certificate
Description cert(Req :: cowboy_req:req()) -&amp;gt; binary() | undefined  Return the peer&amp;apos;s TLS certificate.
Using the default configuration this function will always return undefined. You need to explicitly configure Cowboy to request the client certificate. To do this you need to set the verify transport option to verify_peer:
{ok, _} = cowboy:start_tls(example, [ {port, 8443}, {cert, &#34;path/to/cert.pem&#34;}, {verify, verify_peer} ], #{ env =&amp;gt; #{dispatch =&amp;gt; Dispatch} }).</description>
    </item>
    
    <item>
      <title>cowboy_req:cert(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.cert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.cert/</guid>
      <description>Name cowboy_req:cert - Client TLS certificate
Description cert(Req :: cowboy_req:req()) -&amp;gt; binary() | undefined  Return the peer&amp;apos;s TLS certificate.
Using the default configuration this function will always return undefined. You need to explicitly configure Cowboy to request the client certificate. To do this you need to set the verify transport option to verify_peer:
{ok, _} = cowboy:start_tls(example, [ {port, 8443}, {certfile, &#34;path/to/cert.pem&#34;}, {verify, verify_peer} ], #{ env =&amp;gt; #{dispatch =&amp;gt; Dispatch} }).</description>
    </item>
    
    <item>
      <title>cowboy_req:delete_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.delete_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.delete_resp_header/</guid>
      <description>Name cowboy_req:delete_resp_header - Delete a response header
Description delete_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive  Delete the given response header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.
 Req The Req object.
  Return value A new Req object is returned.</description>
    </item>
    
    <item>
      <title>cowboy_req:delete_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.delete_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.delete_resp_header/</guid>
      <description>Name cowboy_req:delete_resp_header - Delete a response header
Description delete_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive  Delete the given response header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.
 Req The Req object.
  Return value A new Req object is returned.</description>
    </item>
    
    <item>
      <title>cowboy_req:delete_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.delete_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.delete_resp_header/</guid>
      <description>Name cowboy_req:delete_resp_header - Delete a response header
Description delete_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive  Delete the given response header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.
 Req The Req object.
  Return value A new Req object is returned.</description>
    </item>
    
    <item>
      <title>cowboy_req:delete_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.delete_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.delete_resp_header/</guid>
      <description>Name cowboy_req:delete_resp_header - Delete a response header
Description delete_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive  Delete the given response header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.
 Req The Req object.
  Return value A new Req object is returned.</description>
    </item>
    
    <item>
      <title>cowboy_req:delete_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.delete_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.delete_resp_header/</guid>
      <description>Name cowboy_req:delete_resp_header - Delete a response header
Description delete_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive  Delete the given response header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.
 Req The Req object.
  Return value A new Req object is returned.</description>
    </item>
    
    <item>
      <title>cowboy_req:delete_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.delete_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.delete_resp_header/</guid>
      <description>Name cowboy_req:delete_resp_header - Delete a response header
Description delete_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive  Delete the given response header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.
 Req The Req object.
  Return value A new Req object is returned.</description>
    </item>
    
    <item>
      <title>cowboy_req:delete_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.delete_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.delete_resp_header/</guid>
      <description>Name cowboy_req:delete_resp_header - Delete a response header
Description delete_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive  Delete the given response header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.
 Req The Req object.
  Return value A new Req object is returned.</description>
    </item>
    
    <item>
      <title>cowboy_req:has_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.has_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.has_body/</guid>
      <description>Name cowboy_req:has_body - Is there a request body?
Description has_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether the request has a body.
Arguments Req The Req object.
  Return value A boolean indicating whether the request has a body.
Changelog 1.0: Function introduced.   Examples Ensure the request has a body true = cowboy_req:has_body(Req).  See also cowboy_req(3), cowboy_req:body_length(3), cowboy_req:read_body(3), cowboy_req:read_urlencoded_body(3), cowboy_req:read_part(3), cowboy_req:read_part_body(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:has_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.has_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.has_body/</guid>
      <description>Name cowboy_req:has_body - Is there a request body?
Description has_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether the request has a body.
Arguments Req The Req object.
  Return value A boolean indicating whether the request has a body.
Changelog 1.0: Function introduced.   Examples Ensure the request has a body true = cowboy_req:has_body(Req).  See also cowboy_req(3), cowboy_req:body_length(3), cowboy_req:read_body(3), cowboy_req:read_urlencoded_body(3), cowboy_req:read_part(3), cowboy_req:read_part_body(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:has_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.has_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.has_body/</guid>
      <description>Name cowboy_req:has_body - Is there a request body?
Description has_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether the request has a body.
Arguments Req The Req object.
  Return value A boolean indicating whether the request has a body.
Changelog 1.0: Function introduced.   Examples Ensure the request has a body true = cowboy_req:has_body(Req).  See also cowboy_req(3), cowboy_req:body_length(3), cowboy_req:read_body(3), cowboy_req:read_urlencoded_body(3), cowboy_req:read_part(3), cowboy_req:read_part_body(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:has_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.has_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.has_body/</guid>
      <description>Name cowboy_req:has_body - Is there a request body?
Description has_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether the request has a body.
Arguments Req The Req object.
  Return value A boolean indicating whether the request has a body.
Changelog 1.0: Function introduced.   Examples Ensure the request has a body true = cowboy_req:has_body(Req).  See also cowboy_req(3), cowboy_req:body_length(3), cowboy_req:read_body(3), cowboy_req:read_urlencoded_body(3), cowboy_req:read_part(3), cowboy_req:read_part_body(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:has_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.has_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.has_body/</guid>
      <description>Name cowboy_req:has_body - Is there a request body?
Description has_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether the request has a body.
Arguments Req The Req object.
  Return value A boolean indicating whether the request has a body.
Changelog 1.0: Function introduced.   Examples Ensure the request has a body true = cowboy_req:has_body(Req).  See also cowboy_req(3), cowboy_req:body_length(3), cowboy_req:read_body(3), cowboy_req:read_urlencoded_body(3), cowboy_req:read_part(3), cowboy_req:read_part_body(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:has_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.has_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.has_body/</guid>
      <description>Name cowboy_req:has_body - Is there a request body?
Description has_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether the request has a body.
Arguments Req The Req object.
  Return value A boolean indicating whether the request has a body.
Changelog 1.0: Function introduced.   Examples Ensure the request has a body true = cowboy_req:has_body(Req).  See also cowboy_req(3), cowboy_req:body_length(3), cowboy_req:read_body(3), cowboy_req:read_urlencoded_body(3), cowboy_req:read_part(3), cowboy_req:read_part_body(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:has_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.has_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.has_body/</guid>
      <description>Name cowboy_req:has_body - Is there a request body?
Description has_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether the request has a body.
Arguments Req The Req object.
  Return value A boolean indicating whether the request has a body.
Changelog 1.0: Function introduced.   Examples Ensure the request has a body true = cowboy_req:has_body(Req).  See also cowboy_req(3), cowboy_req:body_length(3), cowboy_req:read_body(3), cowboy_req:read_urlencoded_body(3), cowboy_req:read_part(3), cowboy_req:read_part_body(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.has_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.has_resp_body/</guid>
      <description>Name cowboy_req:has_resp_body - Is there a response body?
Description has_resp_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether a response body has been set.
Arguments Req The Req object.
  Return value A boolean indicating whether a response body has been set.
This function will return false when an empty response body has been set.
Changelog 1.0: Function introduced.   Examples Check whether a body has been set false = cowboy_req:has_resp_body(Req0), Req1 = cowboy_req:set_resp_body(&amp;lt;&amp;lt;&#34;</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.has_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.has_resp_body/</guid>
      <description>Name cowboy_req:has_resp_body - Is there a response body?
Description has_resp_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether a response body has been set.
Arguments Req The Req object.
  Return value A boolean indicating whether a response body has been set.
This function will return false when an empty response body has been set.
Changelog 1.0: Function introduced.   Examples Check whether a body has been set false = cowboy_req:has_resp_body(Req0), Req1 = cowboy_req:set_resp_body(&amp;lt;&amp;lt;&#34;</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.has_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.has_resp_body/</guid>
      <description>Name cowboy_req:has_resp_body - Is there a response body?
Description has_resp_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether a response body has been set.
Arguments Req The Req object.
  Return value A boolean indicating whether a response body has been set.
This function will return false when an empty response body has been set.
Changelog 1.0: Function introduced.   Examples Check whether a body has been set false = cowboy_req:has_resp_body(Req0), Req1 = cowboy_req:set_resp_body(&amp;lt;&amp;lt;&#34;</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.has_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.has_resp_body/</guid>
      <description>Name cowboy_req:has_resp_body - Is there a response body?
Description has_resp_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether a response body has been set.
Arguments Req The Req object.
  Return value A boolean indicating whether a response body has been set.
This function will return false when an empty response body has been set.
Changelog 1.0: Function introduced.   Examples Check whether a body has been set false = cowboy_req:has_resp_body(Req0), Req1 = cowboy_req:set_resp_body(&amp;lt;&amp;lt;&#34;</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.has_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.has_resp_body/</guid>
      <description>Name cowboy_req:has_resp_body - Is there a response body?
Description has_resp_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether a response body has been set.
Arguments Req The Req object.
  Return value A boolean indicating whether a response body has been set.
This function will return false when an empty response body has been set.
Changelog 1.0: Function introduced.   Examples Check whether a body has been set false = cowboy_req:has_resp_body(Req0), Req1 = cowboy_req:set_resp_body(&amp;lt;&amp;lt;&#34;</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.has_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.has_resp_body/</guid>
      <description>Name cowboy_req:has_resp_body - Is there a response body?
Description has_resp_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether a response body has been set.
Arguments Req The Req object.
  Return value A boolean indicating whether a response body has been set.
This function will return false when an empty response body has been set.
Changelog 1.0: Function introduced.   Examples Check whether a body has been set false = cowboy_req:has_resp_body(Req0), Req1 = cowboy_req:set_resp_body(&amp;lt;&amp;lt;&#34;</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.has_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.has_resp_body/</guid>
      <description>Name cowboy_req:has_resp_body - Is there a response body?
Description has_resp_body(Req :: cowboy_req:req()) -&amp;gt; boolean()  Return whether a response body has been set.
Arguments Req The Req object.
  Return value A boolean indicating whether a response body has been set.
This function will return false when an empty response body has been set.
Changelog 1.0: Function introduced.   Examples Check whether a body has been set false = cowboy_req:has_resp_body(Req0), Req1 = cowboy_req:set_resp_body(&amp;lt;&amp;lt;&#34;</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.has_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.has_resp_header/</guid>
      <description>Name cowboy_req:has_resp_header - Is the given response header set?
Description has_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; boolean() Name :: binary() %% lowercase; case insensitive  Return whether the given response header has been set.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.has_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.has_resp_header/</guid>
      <description>Name cowboy_req:has_resp_header - Is the given response header set?
Description has_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; boolean() Name :: binary() %% lowercase; case insensitive  Return whether the given response header has been set.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.has_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.has_resp_header/</guid>
      <description>Name cowboy_req:has_resp_header - Is the given response header set?
Description has_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; boolean() Name :: binary() %% lowercase; case insensitive  Return whether the given response header has been set.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.has_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.has_resp_header/</guid>
      <description>Name cowboy_req:has_resp_header - Is the given response header set?
Description has_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; boolean() Name :: binary() %% lowercase; case insensitive  Return whether the given response header has been set.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.has_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.has_resp_header/</guid>
      <description>Name cowboy_req:has_resp_header - Is the given response header set?
Description has_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; boolean() Name :: binary() %% lowercase; case insensitive  Return whether the given response header has been set.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.has_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.has_resp_header/</guid>
      <description>Name cowboy_req:has_resp_header - Is the given response header set?
Description has_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; boolean() Name :: binary() %% lowercase; case insensitive  Return whether the given response header has been set.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.</description>
    </item>
    
    <item>
      <title>cowboy_req:has_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.has_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.has_resp_header/</guid>
      <description>Name cowboy_req:has_resp_header - Is the given response header set?
Description has_resp_header(Name, Req :: cowboy_req:req()) -&amp;gt; boolean() Name :: binary() %% lowercase; case insensitive  Return whether the given response header has been set.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Arguments Name Header name as a lowercase binary string.</description>
    </item>
    
    <item>
      <title>cowboy_req:header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.header/</guid>
      <description>Name cowboy_req:header - HTTP header
Description header(Name, Req) -&amp;gt; header(Name, Req, undefined) header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Headers can also be obtained using pattern matching:</description>
    </item>
    
    <item>
      <title>cowboy_req:header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.header/</guid>
      <description>Name cowboy_req:header - HTTP header
Description header(Name, Req) -&amp;gt; header(Name, Req, undefined) header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Headers can also be obtained using pattern matching:</description>
    </item>
    
    <item>
      <title>cowboy_req:header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.header/</guid>
      <description>Name cowboy_req:header - HTTP header
Description header(Name, Req) -&amp;gt; header(Name, Req, undefined) header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Headers can also be obtained using pattern matching:</description>
    </item>
    
    <item>
      <title>cowboy_req:header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.header/</guid>
      <description>Name cowboy_req:header - HTTP header
Description header(Name, Req) -&amp;gt; header(Name, Req, undefined) header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Headers can also be obtained using pattern matching:</description>
    </item>
    
    <item>
      <title>cowboy_req:header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.header/</guid>
      <description>Name cowboy_req:header - HTTP header
Description header(Name, Req) -&amp;gt; header(Name, Req, undefined) header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Headers can also be obtained using pattern matching:</description>
    </item>
    
    <item>
      <title>cowboy_req:header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.header/</guid>
      <description>Name cowboy_req:header - HTTP header
Description header(Name, Req) -&amp;gt; header(Name, Req, undefined) header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Headers can also be obtained using pattern matching:</description>
    </item>
    
    <item>
      <title>cowboy_req:header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.header/</guid>
      <description>Name cowboy_req:header - HTTP header
Description header(Name, Req) -&amp;gt; header(Name, Req, undefined) header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Headers can also be obtained using pattern matching:</description>
    </item>
    
    <item>
      <title>cowboy_req:headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.headers/</guid>
      <description>Name cowboy_req:headers - HTTP headers
Description headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all request headers.
Request headers can also be obtained using pattern matching:
#{headers := Headers} = Req.  Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Only the headers are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.headers/</guid>
      <description>Name cowboy_req:headers - HTTP headers
Description headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all request headers.
Request headers can also be obtained using pattern matching:
#{headers := Headers} = Req.  Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Only the headers are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.headers/</guid>
      <description>Name cowboy_req:headers - HTTP headers
Description headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all request headers.
Request headers can also be obtained using pattern matching:
#{headers := Headers} = Req.  Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Only the headers are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.headers/</guid>
      <description>Name cowboy_req:headers - HTTP headers
Description headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all request headers.
Request headers can also be obtained using pattern matching:
#{headers := Headers} = Req.  Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Only the headers are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.headers/</guid>
      <description>Name cowboy_req:headers - HTTP headers
Description headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all request headers.
Request headers can also be obtained using pattern matching:
#{headers := Headers} = Req.  Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Only the headers are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.headers/</guid>
      <description>Name cowboy_req:headers - HTTP headers
Description headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all request headers.
Request headers can also be obtained using pattern matching:
#{headers := Headers} = Req.  Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Only the headers are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.headers/</guid>
      <description>Name cowboy_req:headers - HTTP headers
Description headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all request headers.
Request headers can also be obtained using pattern matching:
#{headers := Headers} = Req.  Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Only the headers are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.host/</guid>
      <description>Name cowboy_req:host - URI host name
Description host(Req :: cowboy_req:req()) -&amp;gt; Host :: binary()  Return the host name of the effective request URI.
The host name can also be obtained using pattern matching:
#{host := Host} = Req.  Arguments Req The Req object.
  Return value The host name is returned as a lowercase binary string. It is case insensitive.
Changelog 2.0: Only the host name is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.host/</guid>
      <description>Name cowboy_req:host - URI host name
Description host(Req :: cowboy_req:req()) -&amp;gt; Host :: binary()  Return the host name of the effective request URI.
The host name can also be obtained using pattern matching:
#{host := Host} = Req.  Arguments Req The Req object.
  Return value The host name is returned as a lowercase binary string. It is case insensitive.
Changelog 2.0: Only the host name is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.host/</guid>
      <description>Name cowboy_req:host - URI host name
Description host(Req :: cowboy_req:req()) -&amp;gt; Host :: binary()  Return the host name of the effective request URI.
The host name can also be obtained using pattern matching:
#{host := Host} = Req.  Arguments Req The Req object.
  Return value The host name is returned as a lowercase binary string. It is case insensitive.
Changelog 2.0: Only the host name is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.host/</guid>
      <description>Name cowboy_req:host - URI host name
Description host(Req :: cowboy_req:req()) -&amp;gt; Host :: binary()  Return the host name of the effective request URI.
The host name can also be obtained using pattern matching:
#{host := Host} = Req.  Arguments Req The Req object.
  Return value The host name is returned as a lowercase binary string. It is case insensitive.
Changelog 2.0: Only the host name is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.host/</guid>
      <description>Name cowboy_req:host - URI host name
Description host(Req :: cowboy_req:req()) -&amp;gt; Host :: binary()  Return the host name of the effective request URI.
The host name can also be obtained using pattern matching:
#{host := Host} = Req.  Arguments Req The Req object.
  Return value The host name is returned as a lowercase binary string. It is case insensitive.
Changelog 2.0: Only the host name is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.host/</guid>
      <description>Name cowboy_req:host - URI host name
Description host(Req :: cowboy_req:req()) -&amp;gt; Host :: binary()  Return the host name of the effective request URI.
The host name can also be obtained using pattern matching:
#{host := Host} = Req.  Arguments Req The Req object.
  Return value The host name is returned as a lowercase binary string. It is case insensitive.
Changelog 2.0: Only the host name is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.host/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.host/</guid>
      <description>Name cowboy_req:host - URI host name
Description host(Req :: cowboy_req:req()) -&amp;gt; Host :: binary()  Return the host name of the effective request URI.
The host name can also be obtained using pattern matching:
#{host := Host} = Req.  Arguments Req The Req object.
  Return value The host name is returned as a lowercase binary string. It is case insensitive.
Changelog 2.0: Only the host name is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.host_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.host_info/</guid>
      <description>Name cowboy_req:host_info - Access the route&amp;apos;s heading host segments
Description host_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the heading host segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case insensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.host_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.host_info/</guid>
      <description>Name cowboy_req:host_info - Access the route&amp;apos;s heading host segments
Description host_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the heading host segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case insensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.host_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.host_info/</guid>
      <description>Name cowboy_req:host_info - Access the route&amp;apos;s heading host segments
Description host_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the heading host segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case insensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.host_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.host_info/</guid>
      <description>Name cowboy_req:host_info - Access the route&amp;apos;s heading host segments
Description host_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the heading host segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case insensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.host_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.host_info/</guid>
      <description>Name cowboy_req:host_info - Access the route&amp;apos;s heading host segments
Description host_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the heading host segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case insensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.host_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.host_info/</guid>
      <description>Name cowboy_req:host_info - Access the route&amp;apos;s heading host segments
Description host_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the heading host segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case insensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:host_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.host_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.host_info/</guid>
      <description>Name cowboy_req:host_info - Access the route&amp;apos;s heading host segments
Description host_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the heading host segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case insensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:inform(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.inform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.inform/</guid>
      <description>Name cowboy_req:inform - Send an informational response
Description inform(Status, Req :: cowboy_req:req()) -&amp;gt; inform(StatusCode, #{}, Req) inform(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; ok Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send an informational response.
Informational responses use a status code between 100 and 199. They cannot include a body. This function will not use any of the previously set headers. All headers to be sent must be given directly.
Any number of informational responses can be sent as long as they are sent before the proper response.</description>
    </item>
    
    <item>
      <title>cowboy_req:inform(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.inform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.inform/</guid>
      <description>Name cowboy_req:inform - Send an informational response
Description inform(Status, Req :: cowboy_req:req()) -&amp;gt; inform(StatusCode, #{}, Req) inform(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; ok Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send an informational response.
Informational responses use a status code between 100 and 199. They cannot include a body. This function will not use any of the previously set headers. All headers to be sent must be given directly.
Any number of informational responses can be sent as long as they are sent before the proper response.</description>
    </item>
    
    <item>
      <title>cowboy_req:inform(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.inform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.inform/</guid>
      <description>Name cowboy_req:inform - Send an informational response
Description inform(Status, Req :: cowboy_req:req()) -&amp;gt; inform(StatusCode, #{}, Req) inform(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; ok Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send an informational response.
Informational responses use a status code between 100 and 199. They cannot include a body. This function will not use any of the previously set headers. All headers to be sent must be given directly.
Any number of informational responses can be sent as long as they are sent before the proper response.</description>
    </item>
    
    <item>
      <title>cowboy_req:inform(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.inform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.inform/</guid>
      <description>Name cowboy_req:inform - Send an informational response
Description inform(Status, Req :: cowboy_req:req()) -&amp;gt; inform(StatusCode, #{}, Req) inform(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; ok Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send an informational response.
Informational responses use a status code between 100 and 199. They cannot include a body. This function will not use any of the previously set headers. All headers to be sent must be given directly.
Any number of informational responses can be sent as long as they are sent before the proper response.</description>
    </item>
    
    <item>
      <title>cowboy_req:inform(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.inform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.inform/</guid>
      <description>Name cowboy_req:inform - Send an informational response
Description inform(Status, Req :: cowboy_req:req()) -&amp;gt; inform(StatusCode, #{}, Req) inform(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; ok Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send an informational response.
Informational responses use a status code between 100 and 199. They cannot include a body. This function will not use any of the previously set headers. All headers to be sent must be given directly.
Any number of informational responses can be sent as long as they are sent before the proper response.</description>
    </item>
    
    <item>
      <title>cowboy_req:inform(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.inform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.inform/</guid>
      <description>Name cowboy_req:inform - Send an informational response
Description inform(Status, Req :: cowboy_req:req()) -&amp;gt; inform(StatusCode, #{}, Req) inform(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; ok Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send an informational response.
Informational responses use a status code between 100 and 199. They cannot include a body. This function will not use any of the previously set headers. All headers to be sent must be given directly.
Any number of informational responses can be sent as long as they are sent before the proper response.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.match_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.match_cookies/</guid>
      <description>Name cowboy_req:match_cookies - Match cookies against constraints
Description match_cookies(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the cookies and match specific values against constraints.
Cowboy will only return the cookie values specified in the fields list, and ignore all others. Fields can be either the name of the cookie requested; the name along with a list of constraints; or the name, a list of constraints and a default value in case the cookie is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.match_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.match_cookies/</guid>
      <description>Name cowboy_req:match_cookies - Match cookies against constraints
Description match_cookies(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the cookies and match specific values against constraints.
Cowboy will only return the cookie values specified in the fields list, and ignore all others. Fields can be either the name of the cookie requested; the name along with a list of constraints; or the name, a list of constraints and a default value in case the cookie is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.match_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.match_cookies/</guid>
      <description>Name cowboy_req:match_cookies - Match cookies against constraints
Description match_cookies(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the cookies and match specific values against constraints.
Cowboy will only return the cookie values specified in the fields list, and ignore all others. Fields can be either the name of the cookie requested; the name along with a list of constraints; or the name, a list of constraints and a default value in case the cookie is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.match_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.match_cookies/</guid>
      <description>Name cowboy_req:match_cookies - Match cookies against constraints
Description match_cookies(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the cookies and match specific values against constraints.
Cowboy will only return the cookie values specified in the fields list, and ignore all others. Fields can be either the name of the cookie requested; the name along with a list of constraints; or the name, a list of constraints and a default value in case the cookie is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.match_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.match_cookies/</guid>
      <description>Name cowboy_req:match_cookies - Match cookies against constraints
Description match_cookies(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the cookies and match specific values against constraints.
Cowboy will only return the cookie values specified in the fields list, and ignore all others. Fields can be either the name of the cookie requested; the name along with a list of constraints; or the name, a list of constraints and a default value in case the cookie is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.match_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.match_cookies/</guid>
      <description>Name cowboy_req:match_cookies - Match cookies against constraints
Description match_cookies(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the cookies and match specific values against constraints.
Cowboy will only return the cookie values specified in the fields list, and ignore all others. Fields can be either the name of the cookie requested; the name along with a list of constraints; or the name, a list of constraints and a default value in case the cookie is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.match_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.match_cookies/</guid>
      <description>Name cowboy_req:match_cookies - Match cookies against constraints
Description match_cookies(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the cookies and match specific values against constraints.
Cowboy will only return the cookie values specified in the fields list, and ignore all others. Fields can be either the name of the cookie requested; the name along with a list of constraints; or the name, a list of constraints and a default value in case the cookie is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.match_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.match_qs/</guid>
      <description>Name cowboy_req:match_qs - Match the query string against constraints
Description match_qs(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the query string and match specific values against constraints.
Cowboy will only return the query string values specified in the fields list, and ignore all others. Fields can be either the key requested; the key along with a list of constraints; or the key, a list of constraints and a default value in case the key is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.match_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.match_qs/</guid>
      <description>Name cowboy_req:match_qs - Match the query string against constraints
Description match_qs(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the query string and match specific values against constraints.
Cowboy will only return the query string values specified in the fields list, and ignore all others. Fields can be either the key requested; the key along with a list of constraints; or the key, a list of constraints and a default value in case the key is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.match_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.match_qs/</guid>
      <description>Name cowboy_req:match_qs - Match the query string against constraints
Description match_qs(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the query string and match specific values against constraints.
Cowboy will only return the query string values specified in the fields list, and ignore all others. Fields can be either the key requested; the key along with a list of constraints; or the key, a list of constraints and a default value in case the key is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.match_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.match_qs/</guid>
      <description>Name cowboy_req:match_qs - Match the query string against constraints
Description match_qs(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the query string and match specific values against constraints.
Cowboy will only return the query string values specified in the fields list, and ignore all others. Fields can be either the key requested; the key along with a list of constraints; or the key, a list of constraints and a default value in case the key is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.match_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.match_qs/</guid>
      <description>Name cowboy_req:match_qs - Match the query string against constraints
Description match_qs(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the query string and match specific values against constraints.
Cowboy will only return the query string values specified in the fields list, and ignore all others. Fields can be either the key requested; the key along with a list of constraints; or the key, a list of constraints and a default value in case the key is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.match_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.match_qs/</guid>
      <description>Name cowboy_req:match_qs - Match the query string against constraints
Description match_qs(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the query string and match specific values against constraints.
Cowboy will only return the query string values specified in the fields list, and ignore all others. Fields can be either the key requested; the key along with a list of constraints; or the key, a list of constraints and a default value in case the key is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:match_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.match_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.match_qs/</guid>
      <description>Name cowboy_req:match_qs - Match the query string against constraints
Description match_qs(Fields :: cowboy:fields(), Req :: cowboy_req:req()) -&amp;gt; #{atom() =&amp;gt; any()}  Parse the query string and match specific values against constraints.
Cowboy will only return the query string values specified in the fields list, and ignore all others. Fields can be either the key requested; the key along with a list of constraints; or the key, a list of constraints and a default value in case the key is missing.</description>
    </item>
    
    <item>
      <title>cowboy_req:method(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.method/</guid>
      <description>Name cowboy_req:method - HTTP method
Description method(Req :: cowboy_req:req()) -&amp;gt; Method :: binary()  Return the request&amp;apos;s HTTP method.
The method can also be obtained using pattern matching:
#{method := Method} = Req.  Arguments Req The Req object.
  Return value The request&amp;apos;s HTTP method is returned as a binary string. While methods are case sensitive, standard methods are always uppercase.
Changelog 2.0: Only the method is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:method(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.method/</guid>
      <description>Name cowboy_req:method - HTTP method
Description method(Req :: cowboy_req:req()) -&amp;gt; Method :: binary()  Return the request&amp;apos;s HTTP method.
The method can also be obtained using pattern matching:
#{method := Method} = Req.  Arguments Req The Req object.
  Return value The request&amp;apos;s HTTP method is returned as a binary string. While methods are case sensitive, standard methods are always uppercase.
Changelog 2.0: Only the method is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:method(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.method/</guid>
      <description>Name cowboy_req:method - HTTP method
Description method(Req :: cowboy_req:req()) -&amp;gt; Method :: binary()  Return the request&amp;apos;s HTTP method.
The method can also be obtained using pattern matching:
#{method := Method} = Req.  Arguments Req The Req object.
  Return value The request&amp;apos;s HTTP method is returned as a binary string. While methods are case sensitive, standard methods are always uppercase.
Changelog 2.0: Only the method is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:method(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.method/</guid>
      <description>Name cowboy_req:method - HTTP method
Description method(Req :: cowboy_req:req()) -&amp;gt; Method :: binary()  Return the request&amp;apos;s HTTP method.
The method can also be obtained using pattern matching:
#{method := Method} = Req.  Arguments Req The Req object.
  Return value The request&amp;apos;s HTTP method is returned as a binary string. While methods are case sensitive, standard methods are always uppercase.
Changelog 2.0: Only the method is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:method(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.method/</guid>
      <description>Name cowboy_req:method - HTTP method
Description method(Req :: cowboy_req:req()) -&amp;gt; Method :: binary()  Return the request&amp;apos;s HTTP method.
The method can also be obtained using pattern matching:
#{method := Method} = Req.  Arguments Req The Req object.
  Return value The request&amp;apos;s HTTP method is returned as a binary string. While methods are case sensitive, standard methods are always uppercase.
Changelog 2.0: Only the method is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:method(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.method/</guid>
      <description>Name cowboy_req:method - HTTP method
Description method(Req :: cowboy_req:req()) -&amp;gt; Method :: binary()  Return the request&amp;apos;s HTTP method.
The method can also be obtained using pattern matching:
#{method := Method} = Req.  Arguments Req The Req object.
  Return value The request&amp;apos;s HTTP method is returned as a binary string. While methods are case sensitive, standard methods are always uppercase.
Changelog 2.0: Only the method is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:method(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.method/</guid>
      <description>Name cowboy_req:method - HTTP method
Description method(Req :: cowboy_req:req()) -&amp;gt; Method :: binary()  Return the request&amp;apos;s HTTP method.
The method can also be obtained using pattern matching:
#{method := Method} = Req.  Arguments Req The Req object.
  Return value The request&amp;apos;s HTTP method is returned as a binary string. While methods are case sensitive, standard methods are always uppercase.
Changelog 2.0: Only the method is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.parse_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.parse_cookies/</guid>
      <description>Name cowboy_req:parse_cookies - Parse cookie headers
Description parse_cookies(Req) -&amp;gt; [{Name, Value}] Name :: binary() %% case sensitive Value :: binary() %% case sensitive  Parse cookie headers.
Alias for cowboy_req:parse_header(&amp;lt;&amp;lt;&amp;quot;cookie&amp;quot;&amp;gt;&amp;gt;, Req).
When the cookie header is missing, [] is returned.
While an empty cookie header is not valid, some clients do send it. Cowboy will in this case also return [].
Arguments Req The Req object.
  Return value The cookies are returned as a list of key/values.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.parse_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.parse_cookies/</guid>
      <description>Name cowboy_req:parse_cookies - Parse cookie headers
Description parse_cookies(Req) -&amp;gt; [{Name, Value}] Name :: binary() %% case sensitive Value :: binary() %% case sensitive  Parse cookie headers.
Alias for cowboy_req:parse_header(&amp;lt;&amp;lt;&amp;quot;cookie&amp;quot;&amp;gt;&amp;gt;, Req).
When the cookie header is missing, [] is returned.
While an empty cookie header is not valid, some clients do send it. Cowboy will in this case also return [].
Arguments Req The Req object.
  Return value The cookies are returned as a list of key/values.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.parse_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.parse_cookies/</guid>
      <description>Name cowboy_req:parse_cookies - Parse cookie headers
Description parse_cookies(Req) -&amp;gt; [{Name, Value}] Name :: binary() %% case sensitive Value :: binary() %% case sensitive  Parse cookie headers.
Alias for cowboy_req:parse_header(&amp;lt;&amp;lt;&amp;quot;cookie&amp;quot;&amp;gt;&amp;gt;, Req).
When the cookie header is missing, [] is returned.
While an empty cookie header is not valid, some clients do send it. Cowboy will in this case also return [].
Arguments Req The Req object.
  Return value The cookies are returned as a list of key/values.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.parse_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.parse_cookies/</guid>
      <description>Name cowboy_req:parse_cookies - Parse cookie headers
Description parse_cookies(Req) -&amp;gt; [{Name, Value}] Name :: binary() %% case sensitive Value :: binary() %% case sensitive  Parse cookie headers.
Alias for cowboy_req:parse_header(&amp;lt;&amp;lt;&amp;quot;cookie&amp;quot;&amp;gt;&amp;gt;, Req).
When the cookie header is missing, [] is returned.
While an empty cookie header is not valid, some clients do send it. Cowboy will in this case also return [].
Arguments Req The Req object.
  Return value The cookies are returned as a list of key/values.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.parse_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.parse_cookies/</guid>
      <description>Name cowboy_req:parse_cookies - Parse cookie headers
Description parse_cookies(Req) -&amp;gt; [{Name, Value}] Name :: binary() %% case sensitive Value :: binary() %% case sensitive  Parse cookie headers.
Alias for cowboy_req:parse_header(&amp;lt;&amp;lt;&amp;quot;cookie&amp;quot;&amp;gt;&amp;gt;, Req).
When the cookie header is missing, [] is returned.
While an empty cookie header is not valid, some clients do send it. Cowboy will in this case also return [].
Arguments Req The Req object.
  Return value The cookies are returned as a list of key/values.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.parse_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.parse_cookies/</guid>
      <description>Name cowboy_req:parse_cookies - Parse cookie headers
Description parse_cookies(Req) -&amp;gt; [{Name, Value}] Name :: binary() %% case sensitive Value :: binary() %% case sensitive  Parse cookie headers.
Alias for cowboy_req:parse_header(&amp;lt;&amp;lt;&amp;quot;cookie&amp;quot;&amp;gt;&amp;gt;, Req).
When the cookie header is missing, [] is returned.
While an empty cookie header is not valid, some clients do send it. Cowboy will in this case also return [].
Arguments Req The Req object.
  Return value The cookies are returned as a list of key/values.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_cookies(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.parse_cookies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.parse_cookies/</guid>
      <description>Name cowboy_req:parse_cookies - Parse cookie headers
Description parse_cookies(Req) -&amp;gt; [{Name, Value}] Name :: binary() %% case sensitive Value :: binary() %% case sensitive  Parse cookie headers.
Alias for cowboy_req:parse_header(&amp;lt;&amp;lt;&amp;quot;cookie&amp;quot;&amp;gt;&amp;gt;, Req).
When the cookie header is missing, [] is returned.
While an empty cookie header is not valid, some clients do send it. Cowboy will in this case also return [].
Arguments Req The Req object.
  Return value The cookies are returned as a list of key/values.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.parse_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.parse_header/</guid>
      <description>Name cowboy_req:parse_header - Parse the given HTTP header
Description parse_header(Name, Req) -&amp;gt; ParsedValue | Default parse_header(Name, Req, Default) -&amp;gt; ParsedValue | Default Name :: binary() Req :: cowboy_req:req() ParsedValue :: any() Default :: any()  Parse the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
The type of the parsed value varies depending on the header.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.parse_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.parse_header/</guid>
      <description>Name cowboy_req:parse_header - Parse the given HTTP header
Description parse_header(Name, Req) -&amp;gt; ParsedValue | Default parse_header(Name, Req, Default) -&amp;gt; ParsedValue | Default Name :: binary() Req :: cowboy_req:req() ParsedValue :: any() Default :: any()  Parse the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
The type of the parsed value varies depending on the header.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.parse_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.parse_header/</guid>
      <description>Name cowboy_req:parse_header - Parse the given HTTP header
Description parse_header(Name, Req) -&amp;gt; ParsedValue | Default parse_header(Name, Req, Default) -&amp;gt; ParsedValue | Default Name :: binary() Req :: cowboy_req:req() ParsedValue :: any() Default :: any()  Parse the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
The type of the parsed value varies depending on the header.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.parse_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.parse_header/</guid>
      <description>Name cowboy_req:parse_header - Parse the given HTTP header
Description parse_header(Name, Req) -&amp;gt; ParsedValue | Default parse_header(Name, Req, Default) -&amp;gt; ParsedValue | Default Name :: binary() Req :: cowboy_req:req() ParsedValue :: any() Default :: any()  Parse the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
The type of the parsed value varies depending on the header.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.parse_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.parse_header/</guid>
      <description>Name cowboy_req:parse_header - Parse the given HTTP header
Description parse_header(Name, Req) -&amp;gt; ParsedValue | Default parse_header(Name, Req, Default) -&amp;gt; ParsedValue | Default Name :: binary() Req :: cowboy_req:req() ParsedValue :: any() Default :: any()  Parse the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
The type of the parsed value varies depending on the header.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.parse_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.parse_header/</guid>
      <description>Name cowboy_req:parse_header - Parse the given HTTP header
Description parse_header(Name, Req) -&amp;gt; ParsedValue | Default parse_header(Name, Req, Default) -&amp;gt; ParsedValue | Default Name :: binary() Req :: cowboy_req:req() ParsedValue :: any() Default :: any()  Parse the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
The type of the parsed value varies depending on the header.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.parse_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.parse_header/</guid>
      <description>Name cowboy_req:parse_header - Parse the given HTTP header
Description parse_header(Name, Req) -&amp;gt; ParsedValue | Default parse_header(Name, Req, Default) -&amp;gt; ParsedValue | Default Name :: binary() Req :: cowboy_req:req() ParsedValue :: any() Default :: any()  Parse the given HTTP header.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
The type of the parsed value varies depending on the header.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.parse_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.parse_qs/</guid>
      <description>Name cowboy_req:parse_qs - Parse the query string
Description parse_qs(Req :: cowboy_req:req()) -&amp;gt; [{Key :: binary(), Value :: binary() | true}]  Parse the query string as a list of key/value pairs.
Arguments Req The Req object.
  Return value The parsed query string is returned as a list of key/value pairs. The key is a binary string. The value is either a binary string, or the atom true. Both key and value are case sensitive.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.parse_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.parse_qs/</guid>
      <description>Name cowboy_req:parse_qs - Parse the query string
Description parse_qs(Req :: cowboy_req:req()) -&amp;gt; [{Key :: binary(), Value :: binary() | true}]  Parse the query string as a list of key/value pairs.
Arguments Req The Req object.
  Return value The parsed query string is returned as a list of key/value pairs. The key is a binary string. The value is either a binary string, or the atom true. Both key and value are case sensitive.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.parse_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.parse_qs/</guid>
      <description>Name cowboy_req:parse_qs - Parse the query string
Description parse_qs(Req :: cowboy_req:req()) -&amp;gt; [{Key :: binary(), Value :: binary() | true}]  Parse the query string as a list of key/value pairs.
Arguments Req The Req object.
  Return value The parsed query string is returned as a list of key/value pairs. The key is a binary string. The value is either a binary string, or the atom true. Both key and value are case sensitive.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.parse_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.parse_qs/</guid>
      <description>Name cowboy_req:parse_qs - Parse the query string
Description parse_qs(Req :: cowboy_req:req()) -&amp;gt; [{Key :: binary(), Value :: binary() | true}]  Parse the query string as a list of key/value pairs.
Arguments Req The Req object.
  Return value The parsed query string is returned as a list of key/value pairs. The key is a binary string. The value is either a binary string, or the atom true. Both key and value are case sensitive.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.parse_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.parse_qs/</guid>
      <description>Name cowboy_req:parse_qs - Parse the query string
Description parse_qs(Req :: cowboy_req:req()) -&amp;gt; [{Key :: binary(), Value :: binary() | true}]  Parse the query string as a list of key/value pairs.
Arguments Req The Req object.
  Return value The parsed query string is returned as a list of key/value pairs. The key is a binary string. The value is either a binary string, or the atom true. Both key and value are case sensitive.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.parse_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.parse_qs/</guid>
      <description>Name cowboy_req:parse_qs - Parse the query string
Description parse_qs(Req :: cowboy_req:req()) -&amp;gt; [{Key :: binary(), Value :: binary() | true}]  Parse the query string as a list of key/value pairs.
Arguments Req The Req object.
  Return value The parsed query string is returned as a list of key/value pairs. The key is a binary string. The value is either a binary string, or the atom true. Both key and value are case sensitive.</description>
    </item>
    
    <item>
      <title>cowboy_req:parse_qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.parse_qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.parse_qs/</guid>
      <description>Name cowboy_req:parse_qs - Parse the query string
Description parse_qs(Req :: cowboy_req:req()) -&amp;gt; [{Key :: binary(), Value :: binary() | true}]  Parse the query string as a list of key/value pairs.
Arguments Req The Req object.
  Return value The parsed query string is returned as a list of key/value pairs. The key is a binary string. The value is either a binary string, or the atom true. Both key and value are case sensitive.</description>
    </item>
    
    <item>
      <title>cowboy_req:path(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.path/</guid>
      <description>Name cowboy_req:path - URI path
Description path(Req :: cowboy_req:req()) -&amp;gt; Path :: binary()  Return the path of the effective request URI.
The path can also be obtained using pattern matching:
#{path := Path} = Req.  Arguments Req The Req object.
  Return value The path is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the path is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.path/</guid>
      <description>Name cowboy_req:path - URI path
Description path(Req :: cowboy_req:req()) -&amp;gt; Path :: binary()  Return the path of the effective request URI.
The path can also be obtained using pattern matching:
#{path := Path} = Req.  Arguments Req The Req object.
  Return value The path is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the path is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.path/</guid>
      <description>Name cowboy_req:path - URI path
Description path(Req :: cowboy_req:req()) -&amp;gt; Path :: binary()  Return the path of the effective request URI.
The path can also be obtained using pattern matching:
#{path := Path} = Req.  Arguments Req The Req object.
  Return value The path is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the path is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.path/</guid>
      <description>Name cowboy_req:path - URI path
Description path(Req :: cowboy_req:req()) -&amp;gt; Path :: binary()  Return the path of the effective request URI.
The path can also be obtained using pattern matching:
#{path := Path} = Req.  Arguments Req The Req object.
  Return value The path is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the path is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.path/</guid>
      <description>Name cowboy_req:path - URI path
Description path(Req :: cowboy_req:req()) -&amp;gt; Path :: binary()  Return the path of the effective request URI.
The path can also be obtained using pattern matching:
#{path := Path} = Req.  Arguments Req The Req object.
  Return value The path is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the path is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.path/</guid>
      <description>Name cowboy_req:path - URI path
Description path(Req :: cowboy_req:req()) -&amp;gt; Path :: binary()  Return the path of the effective request URI.
The path can also be obtained using pattern matching:
#{path := Path} = Req.  Arguments Req The Req object.
  Return value The path is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the path is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.path/</guid>
      <description>Name cowboy_req:path - URI path
Description path(Req :: cowboy_req:req()) -&amp;gt; Path :: binary()  Return the path of the effective request URI.
The path can also be obtained using pattern matching:
#{path := Path} = Req.  Arguments Req The Req object.
  Return value The path is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the path is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.path_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.path_info/</guid>
      <description>Name cowboy_req:path_info - Access the route&amp;apos;s trailing path segments
Description path_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the trailing path segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case sensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.path_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.path_info/</guid>
      <description>Name cowboy_req:path_info - Access the route&amp;apos;s trailing path segments
Description path_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the trailing path segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case sensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.path_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.path_info/</guid>
      <description>Name cowboy_req:path_info - Access the route&amp;apos;s trailing path segments
Description path_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the trailing path segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case sensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.path_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.path_info/</guid>
      <description>Name cowboy_req:path_info - Access the route&amp;apos;s trailing path segments
Description path_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the trailing path segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case sensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.path_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.path_info/</guid>
      <description>Name cowboy_req:path_info - Access the route&amp;apos;s trailing path segments
Description path_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the trailing path segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case sensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.path_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.path_info/</guid>
      <description>Name cowboy_req:path_info - Access the route&amp;apos;s trailing path segments
Description path_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the trailing path segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case sensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:path_info(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.path_info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.path_info/</guid>
      <description>Name cowboy_req:path_info - Access the route&amp;apos;s trailing path segments
Description path_info(Req :: cowboy_req:req()) -&amp;gt; cowboy_router:tokens()  Return the tokens for the trailing path segments.
This is the part of the host name that was matched using the ... notation.
Arguments Req The Req object.
  Return value The tokens are returned as a list of case sensitive binary strings.
Changelog 2.0: Only the tokens are returned, they are no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:peer(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.peer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.peer/</guid>
      <description>Name cowboy_req:peer - Peer address and port
Description peer(Req :: cowboy_req:req()) -&amp;gt; Peer Peer :: {inet:ip_address(), inet:port_number()}  Return the peer&amp;apos;s IP address and port number.
The peer can also be obtained using pattern matching:
#{peer := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The peer&amp;apos;s IP address and port number.
The peer is not necessarily the client&amp;apos;s IP address and port. It is the IP address of the endpoint connecting directly to the server, which may be a gateway or a proxy.</description>
    </item>
    
    <item>
      <title>cowboy_req:peer(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.peer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.peer/</guid>
      <description>Name cowboy_req:peer - Peer address and port
Description peer(Req :: cowboy_req:req()) -&amp;gt; Info Info :: {inet:ip_address(), inet:port_number()}  Return the peer&amp;apos;s IP address and port number.
The peer information can also be obtained using pattern matching:
#{peer := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The peer&amp;apos;s IP address and port number.
The peer is not necessarily the client&amp;apos;s IP address and port. It is the IP address of the endpoint connecting directly to the server, which may be a gateway or a proxy.</description>
    </item>
    
    <item>
      <title>cowboy_req:peer(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.peer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.peer/</guid>
      <description>Name cowboy_req:peer - Peer address and port
Description peer(Req :: cowboy_req:req()) -&amp;gt; Info Info :: {inet:ip_address(), inet:port_number()}  Return the peer&amp;apos;s IP address and port number.
The peer information can also be obtained using pattern matching:
#{peer := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The peer&amp;apos;s IP address and port number.
The peer is not necessarily the client&amp;apos;s IP address and port. It is the IP address of the endpoint connecting directly to the server, which may be a gateway or a proxy.</description>
    </item>
    
    <item>
      <title>cowboy_req:peer(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.peer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.peer/</guid>
      <description>Name cowboy_req:peer - Peer address and port
Description peer(Req :: cowboy_req:req()) -&amp;gt; Info Info :: {inet:ip_address(), inet:port_number()}  Return the peer&amp;apos;s IP address and port number.
The peer information can also be obtained using pattern matching:
#{peer := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The peer&amp;apos;s IP address and port number.
The peer is not necessarily the client&amp;apos;s IP address and port. It is the IP address of the endpoint connecting directly to the server, which may be a gateway or a proxy.</description>
    </item>
    
    <item>
      <title>cowboy_req:peer(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.peer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.peer/</guid>
      <description>Name cowboy_req:peer - Peer address and port
Description peer(Req :: cowboy_req:req()) -&amp;gt; Info Info :: {inet:ip_address(), inet:port_number()}  Return the peer&amp;apos;s IP address and port number.
The peer information can also be obtained using pattern matching:
#{peer := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The peer&amp;apos;s IP address and port number.
The peer is not necessarily the client&amp;apos;s IP address and port. It is the IP address of the endpoint connecting directly to the server, which may be a gateway or a proxy.</description>
    </item>
    
    <item>
      <title>cowboy_req:peer(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.peer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.peer/</guid>
      <description>Name cowboy_req:peer - Peer address and port
Description peer(Req :: cowboy_req:req()) -&amp;gt; Info Info :: {inet:ip_address(), inet:port_number()}  Return the peer&amp;apos;s IP address and port number.
The peer information can also be obtained using pattern matching:
#{peer := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The peer&amp;apos;s IP address and port number.
The peer is not necessarily the client&amp;apos;s IP address and port. It is the IP address of the endpoint connecting directly to the server, which may be a gateway or a proxy.</description>
    </item>
    
    <item>
      <title>cowboy_req:peer(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.peer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.peer/</guid>
      <description>Name cowboy_req:peer - Peer address and port
Description peer(Req :: cowboy_req:req()) -&amp;gt; Info Info :: {inet:ip_address(), inet:port_number()}  Return the peer&amp;apos;s IP address and port number.
The peer information can also be obtained using pattern matching:
#{peer := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The peer&amp;apos;s IP address and port number.
The peer is not necessarily the client&amp;apos;s IP address and port. It is the IP address of the endpoint connecting directly to the server, which may be a gateway or a proxy.</description>
    </item>
    
    <item>
      <title>cowboy_req:port(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.port/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.port/</guid>
      <description>Name cowboy_req:port - URI port number
Description port(Req :: cowboy_req:req()) -&amp;gt; Port :: inet:port_number()  Return the port number of the effective request URI.
Note that the port number returned by this function is obtained by parsing the host header. It may be different from the port the peer used to connect to Cowboy.
The port number can also be obtained using pattern matching:
#{port := Port} = Req.  Arguments Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:port(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.port/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.port/</guid>
      <description>Name cowboy_req:port - URI port number
Description port(Req :: cowboy_req:req()) -&amp;gt; Port :: inet:port_number()  Return the port number of the effective request URI.
Note that the port number returned by this function is obtained by parsing the host header. It may be different from the port the peer used to connect to Cowboy.
The port number can also be obtained using pattern matching:
#{port := Port} = Req.  Arguments Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:port(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.port/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.port/</guid>
      <description>Name cowboy_req:port - URI port number
Description port(Req :: cowboy_req:req()) -&amp;gt; Port :: inet:port_number()  Return the port number of the effective request URI.
Note that the port number returned by this function is obtained by parsing the host header. It may be different from the port the peer used to connect to Cowboy.
The port number can also be obtained using pattern matching:
#{port := Port} = Req.  Arguments Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:port(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.port/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.port/</guid>
      <description>Name cowboy_req:port - URI port number
Description port(Req :: cowboy_req:req()) -&amp;gt; Port :: inet:port_number()  Return the port number of the effective request URI.
Note that the port number returned by this function is obtained by parsing the host header. It may be different from the port the peer used to connect to Cowboy.
The port number can also be obtained using pattern matching:
#{port := Port} = Req.  Arguments Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:port(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.port/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.port/</guid>
      <description>Name cowboy_req:port - URI port number
Description port(Req :: cowboy_req:req()) -&amp;gt; Port :: inet:port_number()  Return the port number of the effective request URI.
Note that the port number returned by this function is obtained by parsing the host header. It may be different from the port the peer used to connect to Cowboy.
The port number can also be obtained using pattern matching:
#{port := Port} = Req.  Arguments Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:port(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.port/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.port/</guid>
      <description>Name cowboy_req:port - URI port number
Description port(Req :: cowboy_req:req()) -&amp;gt; Port :: inet:port_number()  Return the port number of the effective request URI.
Note that the port number returned by this function is obtained by parsing the host header. It may be different from the port the peer used to connect to Cowboy.
The port number can also be obtained using pattern matching:
#{port := Port} = Req.  Arguments Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:port(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.port/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.port/</guid>
      <description>Name cowboy_req:port - URI port number
Description port(Req :: cowboy_req:req()) -&amp;gt; Port :: inet:port_number()  Return the port number of the effective request URI.
Note that the port number returned by this function is obtained by parsing the host header. It may be different from the port the peer used to connect to Cowboy.
The port number can also be obtained using pattern matching:
#{port := Port} = Req.  Arguments Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:push(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.push/</guid>
      <description>Name cowboy_req:push - Push a resource to the client
Description push(Path, Headers, Req :: cowboy_req:req()) -&amp;gt; push(Path, Headers, Req, #{}) push(Path, Headers, Req :: cowboy_req:req(), Opts) -&amp;gt; ok Path :: iodata() %% case sensitive Headers :: cowboy:http_headers() Opts :: cowboy_req:push_opts()  Push a resource to the client.
Cowboy handles push requests the same way as if they came from the client, including the creation of a request handling process, routing and middlewares and so on.</description>
    </item>
    
    <item>
      <title>cowboy_req:push(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.push/</guid>
      <description>Name cowboy_req:push - Push a resource to the client
Description push(Path, Headers, Req :: cowboy_req:req()) -&amp;gt; push(Path, Headers, Req, #{}) push(Path, Headers, Req :: cowboy_req:req(), Opts) -&amp;gt; ok Path :: iodata() %% case sensitive Headers :: cowboy:http_headers() Opts :: cowboy_req:push_opts()  Push a resource to the client.
Cowboy handles push requests the same way as if they came from the client, including the creation of a request handling process, routing and middlewares and so on.</description>
    </item>
    
    <item>
      <title>cowboy_req:push(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.push/</guid>
      <description>Name cowboy_req:push - Push a resource to the client
Description push(Path, Headers, Req :: cowboy_req:req()) -&amp;gt; push(Path, Headers, Req, #{}) push(Path, Headers, Req :: cowboy_req:req(), Opts) -&amp;gt; ok Path :: iodata() %% case sensitive Headers :: cowboy:http_headers() Opts :: cowboy_req:push_opts()  Push a resource to the client.
Cowboy handles push requests the same way as if they came from the client, including the creation of a request handling process, routing and middlewares and so on.</description>
    </item>
    
    <item>
      <title>cowboy_req:push(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.push/</guid>
      <description>Name cowboy_req:push - Push a resource to the client
Description push(Path, Headers, Req :: cowboy_req:req()) -&amp;gt; push(Path, Headers, Req, #{}) push(Path, Headers, Req :: cowboy_req:req(), Opts) -&amp;gt; ok Path :: iodata() %% case sensitive Headers :: cowboy:http_headers() Opts :: cowboy_req:push_opts()  Push a resource to the client.
Cowboy handles push requests the same way as if they came from the client, including the creation of a request handling process, routing and middlewares and so on.</description>
    </item>
    
    <item>
      <title>cowboy_req:push(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.push/</guid>
      <description>Name cowboy_req:push - Push a resource to the client
Description push(Path, Headers, Req :: cowboy_req:req()) -&amp;gt; push(Path, Headers, Req, #{}) push(Path, Headers, Req :: cowboy_req:req(), Opts) -&amp;gt; ok Path :: iodata() %% case sensitive Headers :: cowboy:http_headers() Opts :: cowboy_req:push_opts()  Push a resource to the client.
Cowboy handles push requests the same way as if they came from the client, including the creation of a request handling process, routing and middlewares and so on.</description>
    </item>
    
    <item>
      <title>cowboy_req:push(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.push/</guid>
      <description>Name cowboy_req:push - Push a resource to the client
Description push(Path, Headers, Req :: cowboy_req:req()) -&amp;gt; push(Path, Headers, Req, #{}) push(Path, Headers, Req :: cowboy_req:req(), Opts) -&amp;gt; ok Path :: iodata() %% case sensitive Headers :: cowboy:http_headers() Opts :: cowboy_req:push_opts()  Push a resource to the client.
Cowboy handles push requests the same way as if they came from the client, including the creation of a request handling process, routing and middlewares and so on.</description>
    </item>
    
    <item>
      <title>cowboy_req:push(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.push/</guid>
      <description>Name cowboy_req:push - Push a resource to the client
Description push(Path, Headers, Req :: cowboy_req:req()) -&amp;gt; push(Path, Headers, Req, #{}) push(Path, Headers, Req :: cowboy_req:req(), Opts) -&amp;gt; ok Path :: iodata() %% case sensitive Headers :: cowboy:http_headers() Opts :: cowboy_req:push_opts()  Push a resource to the client.
Cowboy handles push requests the same way as if they came from the client, including the creation of a request handling process, routing and middlewares and so on.</description>
    </item>
    
    <item>
      <title>cowboy_req:qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.qs/</guid>
      <description>Name cowboy_req:qs - URI query string
Description qs(Req :: cowboy_req:req()) -&amp;gt; Qs :: binary()  Return the query string of the effective request URI.
The query string can also be obtained using pattern matching:
#{qs := Qs} = Req.  Arguments Req The Req object.
  Return value The query string is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the query string is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.qs/</guid>
      <description>Name cowboy_req:qs - URI query string
Description qs(Req :: cowboy_req:req()) -&amp;gt; Qs :: binary()  Return the query string of the effective request URI.
The query string can also be obtained using pattern matching:
#{qs := Qs} = Req.  Arguments Req The Req object.
  Return value The query string is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the query string is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.qs/</guid>
      <description>Name cowboy_req:qs - URI query string
Description qs(Req :: cowboy_req:req()) -&amp;gt; Qs :: binary()  Return the query string of the effective request URI.
The query string can also be obtained using pattern matching:
#{qs := Qs} = Req.  Arguments Req The Req object.
  Return value The query string is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the query string is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.qs/</guid>
      <description>Name cowboy_req:qs - URI query string
Description qs(Req :: cowboy_req:req()) -&amp;gt; Qs :: binary()  Return the query string of the effective request URI.
The query string can also be obtained using pattern matching:
#{qs := Qs} = Req.  Arguments Req The Req object.
  Return value The query string is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the query string is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.qs/</guid>
      <description>Name cowboy_req:qs - URI query string
Description qs(Req :: cowboy_req:req()) -&amp;gt; Qs :: binary()  Return the query string of the effective request URI.
The query string can also be obtained using pattern matching:
#{qs := Qs} = Req.  Arguments Req The Req object.
  Return value The query string is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the query string is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.qs/</guid>
      <description>Name cowboy_req:qs - URI query string
Description qs(Req :: cowboy_req:req()) -&amp;gt; Qs :: binary()  Return the query string of the effective request URI.
The query string can also be obtained using pattern matching:
#{qs := Qs} = Req.  Arguments Req The Req object.
  Return value The query string is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the query string is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:qs(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.qs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.qs/</guid>
      <description>Name cowboy_req:qs - URI query string
Description qs(Req :: cowboy_req:req()) -&amp;gt; Qs :: binary()  Return the query string of the effective request URI.
The query string can also be obtained using pattern matching:
#{qs := Qs} = Req.  Arguments Req The Req object.
  Return value The query string is returned as a binary string. It is case sensitive.
Changelog 2.0: Only the query string is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_and_match_urlencoded_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.read_and_match_urlencoded_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.read_and_match_urlencoded_body/</guid>
      <description>Name cowboy_req:read_and_match_urlencoded_body - Read, parse and match a urlencoded request body against constraints
Description read_and_match_urlencoded_body(Fields, Req) -&amp;gt; read_and_match_urlencoded_body(Fields, Req, #{}) read_and_match_urlencoded_body(Fields, Req, Opts) -&amp;gt; {ok, Body, Req} Fields :: cowboy:fields() Req :: cowboy_req:req() Opts :: cowboy_req:read_body_opts() Body :: #{atom() =&amp;gt; any()}  Read, parse and match a urlencoded request body against constraints.
This function reads the request body and parses it as application/x-www-form-urlencoded. It then applies the given field constraints to the urlencoded data and returns the result as a map.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_and_match_urlencoded_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.read_and_match_urlencoded_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.read_and_match_urlencoded_body/</guid>
      <description>Name cowboy_req:read_and_match_urlencoded_body - Read, parse and match a urlencoded request body against constraints
Description read_and_match_urlencoded_body(Fields, Req) -&amp;gt; read_and_match_urlencoded_body(Fields, Req, #{}) read_and_match_urlencoded_body(Fields, Req, Opts) -&amp;gt; {ok, Body, Req} Fields :: cowboy:fields() Req :: cowboy_req:req() Opts :: cowboy_req:read_body_opts() Body :: #{atom() =&amp;gt; any()}  Read, parse and match a urlencoded request body against constraints.
This function reads the request body and parses it as application/x-www-form-urlencoded. It then applies the given field constraints to the urlencoded data and returns the result as a map.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.read_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.read_body/</guid>
      <description>Name cowboy_req:read_body - Read the request body
Description read_body(Req :: cowboy_req:req()) -&amp;gt; read_body(Req, #{}) read_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the request body.
This function reads a chunk of the request body. A more tuple is returned when more data remains to be read. Call the function repeatedly until an ok tuple is returned to read the entire body.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.read_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.read_body/</guid>
      <description>Name cowboy_req:read_body - Read the request body
Description read_body(Req :: cowboy_req:req()) -&amp;gt; read_body(Req, #{}) read_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the request body.
This function reads a chunk of the request body. A more tuple is returned when more data remains to be read. Call the function repeatedly until an ok tuple is returned to read the entire body.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.read_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.read_body/</guid>
      <description>Name cowboy_req:read_body - Read the request body
Description read_body(Req :: cowboy_req:req()) -&amp;gt; read_body(Req, #{}) read_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the request body.
This function reads a chunk of the request body. A more tuple is returned when more data remains to be read. Call the function repeatedly until an ok tuple is returned to read the entire body.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.read_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.read_body/</guid>
      <description>Name cowboy_req:read_body - Read the request body
Description read_body(Req :: cowboy_req:req()) -&amp;gt; read_body(Req, #{}) read_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the request body.
This function reads a chunk of the request body. A more tuple is returned when more data remains to be read. Call the function repeatedly until an ok tuple is returned to read the entire body.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.read_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.read_body/</guid>
      <description>Name cowboy_req:read_body - Read the request body
Description read_body(Req :: cowboy_req:req()) -&amp;gt; read_body(Req, #{}) read_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the request body.
This function reads a chunk of the request body. A more tuple is returned when more data remains to be read. Call the function repeatedly until an ok tuple is returned to read the entire body.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.read_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.read_body/</guid>
      <description>Name cowboy_req:read_body - Read the request body
Description read_body(Req :: cowboy_req:req()) -&amp;gt; read_body(Req, #{}) read_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the request body.
This function reads a chunk of the request body. A more tuple is returned when more data remains to be read. Call the function repeatedly until an ok tuple is returned to read the entire body.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.read_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.read_body/</guid>
      <description>Name cowboy_req:read_body - Read the request body
Description read_body(Req :: cowboy_req:req()) -&amp;gt; read_body(Req, #{}) read_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the request body.
This function reads a chunk of the request body. A more tuple is returned when more data remains to be read. Call the function repeatedly until an ok tuple is returned to read the entire body.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.read_part/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.read_part/</guid>
      <description>Name cowboy_req:read_part - Read the next multipart headers
Description read_part(Req :: cowboy_req:req()) -&amp;gt; read_part(Req, #{}) read_part(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Headers, Req} | {done, Req} Opts :: cowboy_req:read_body_opts() Headers :: #{binary() =&amp;gt; binary()}  Read the next part of a multipart body.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function parses and returns headers.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.read_part/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.read_part/</guid>
      <description>Name cowboy_req:read_part - Read the next multipart headers
Description read_part(Req :: cowboy_req:req()) -&amp;gt; read_part(Req, #{}) read_part(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Headers, Req} | {done, Req} Opts :: cowboy_req:read_body_opts() Headers :: #{binary() =&amp;gt; binary()}  Read the next part of a multipart body.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function parses and returns headers.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.read_part/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.read_part/</guid>
      <description>Name cowboy_req:read_part - Read the next multipart headers
Description read_part(Req :: cowboy_req:req()) -&amp;gt; read_part(Req, #{}) read_part(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Headers, Req} | {done, Req} Opts :: cowboy_req:read_body_opts() Headers :: #{binary() =&amp;gt; binary()}  Read the next part of a multipart body.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function parses and returns headers.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.read_part/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.read_part/</guid>
      <description>Name cowboy_req:read_part - Read the next multipart headers
Description read_part(Req :: cowboy_req:req()) -&amp;gt; read_part(Req, #{}) read_part(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Headers, Req} | {done, Req} Opts :: cowboy_req:read_body_opts() Headers :: #{binary() =&amp;gt; binary()}  Read the next part of a multipart body.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function parses and returns headers.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.read_part/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.read_part/</guid>
      <description>Name cowboy_req:read_part - Read the next multipart headers
Description read_part(Req :: cowboy_req:req()) -&amp;gt; read_part(Req, #{}) read_part(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Headers, Req} | {done, Req} Opts :: cowboy_req:read_body_opts() Headers :: #{binary() =&amp;gt; binary()}  Read the next part of a multipart body.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function parses and returns headers.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.read_part/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.read_part/</guid>
      <description>Name cowboy_req:read_part - Read the next multipart headers
Description read_part(Req :: cowboy_req:req()) -&amp;gt; read_part(Req, #{}) read_part(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Headers, Req} | {done, Req} Opts :: cowboy_req:read_body_opts() Headers :: #{binary() =&amp;gt; binary()}  Read the next part of a multipart body.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function parses and returns headers.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.read_part/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.read_part/</guid>
      <description>Name cowboy_req:read_part - Read the next multipart headers
Description read_part(Req :: cowboy_req:req()) -&amp;gt; read_part(Req, #{}) read_part(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Headers, Req} | {done, Req} Opts :: cowboy_req:read_body_opts() Headers :: #{binary() =&amp;gt; binary()}  Read the next part of a multipart body.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function parses and returns headers.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.read_part_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.read_part_body/</guid>
      <description>Name cowboy_req:read_part_body - Read the current part&amp;apos;s body
Description read_part_body(Req :: cowboy_req:req()) -&amp;gt; read_part_body(Req, #{}) read_part_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the body of the current part of the multipart message.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function returns the body of the current part.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.read_part_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.read_part_body/</guid>
      <description>Name cowboy_req:read_part_body - Read the current part&amp;apos;s body
Description read_part_body(Req :: cowboy_req:req()) -&amp;gt; read_part_body(Req, #{}) read_part_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the body of the current part of the multipart message.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function returns the body of the current part.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.read_part_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.read_part_body/</guid>
      <description>Name cowboy_req:read_part_body - Read the current part&amp;apos;s body
Description read_part_body(Req :: cowboy_req:req()) -&amp;gt; read_part_body(Req, #{}) read_part_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the body of the current part of the multipart message.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function returns the body of the current part.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.read_part_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.read_part_body/</guid>
      <description>Name cowboy_req:read_part_body - Read the current part&amp;apos;s body
Description read_part_body(Req :: cowboy_req:req()) -&amp;gt; read_part_body(Req, #{}) read_part_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the body of the current part of the multipart message.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function returns the body of the current part.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.read_part_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.read_part_body/</guid>
      <description>Name cowboy_req:read_part_body - Read the current part&amp;apos;s body
Description read_part_body(Req :: cowboy_req:req()) -&amp;gt; read_part_body(Req, #{}) read_part_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the body of the current part of the multipart message.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function returns the body of the current part.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.read_part_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.read_part_body/</guid>
      <description>Name cowboy_req:read_part_body - Read the current part&amp;apos;s body
Description read_part_body(Req :: cowboy_req:req()) -&amp;gt; read_part_body(Req, #{}) read_part_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the body of the current part of the multipart message.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function returns the body of the current part.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_part_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.read_part_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.read_part_body/</guid>
      <description>Name cowboy_req:read_part_body - Read the current part&amp;apos;s body
Description read_part_body(Req :: cowboy_req:req()) -&amp;gt; read_part_body(Req, #{}) read_part_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Data :: binary(), Req} | {more, Data :: binary(), Req} Opts :: cowboy_req:read_body_opts()  Read the body of the current part of the multipart message.
This function reads the request body and parses it as multipart. Each parts of a multipart representation have their own headers and body. This function returns the body of the current part.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_urlencoded_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.read_urlencoded_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.read_urlencoded_body/</guid>
      <description>Name cowboy_req:read_urlencoded_body - Read and parse a urlencoded request body
Description read_urlencoded_body(Req :: cowboy_req:req()) -&amp;gt; read_urlencoded_body(Req, #{}) read_urlencoded_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Body, Req} Opts :: cowboy_req:read_body_opts() Body :: [{Key :: binary(), Value :: binary() | true}]  Read and parse a urlencoded request body.
This function reads the request body and parses it as application/x-www-form-urlencoded. It returns a list of key/values.
The urlencoded media type is used by Web browsers when submitting HTML forms using the POST method.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_urlencoded_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.read_urlencoded_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.read_urlencoded_body/</guid>
      <description>Name cowboy_req:read_urlencoded_body - Read and parse a urlencoded request body
Description read_urlencoded_body(Req :: cowboy_req:req()) -&amp;gt; read_urlencoded_body(Req, #{}) read_urlencoded_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Body, Req} Opts :: cowboy_req:read_body_opts() Body :: [{Key :: binary(), Value :: binary() | true}]  Read and parse a urlencoded request body.
This function reads the request body and parses it as application/x-www-form-urlencoded. It returns a list of key/values.
The urlencoded media type is used by Web browsers when submitting HTML forms using the POST method.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_urlencoded_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.read_urlencoded_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.read_urlencoded_body/</guid>
      <description>Name cowboy_req:read_urlencoded_body - Read and parse a urlencoded request body
Description read_urlencoded_body(Req :: cowboy_req:req()) -&amp;gt; read_urlencoded_body(Req, #{}) read_urlencoded_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Body, Req} Opts :: cowboy_req:read_body_opts() Body :: [{Key :: binary(), Value :: binary() | true}]  Read and parse a urlencoded request body.
This function reads the request body and parses it as application/x-www-form-urlencoded. It returns a list of key/values.
The urlencoded media type is used by Web browsers when submitting HTML forms using the POST method.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_urlencoded_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.read_urlencoded_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.read_urlencoded_body/</guid>
      <description>Name cowboy_req:read_urlencoded_body - Read and parse a urlencoded request body
Description read_urlencoded_body(Req :: cowboy_req:req()) -&amp;gt; read_urlencoded_body(Req, #{}) read_urlencoded_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Body, Req} Opts :: cowboy_req:read_body_opts() Body :: [{Key :: binary(), Value :: binary() | true}]  Read and parse a urlencoded request body.
This function reads the request body and parses it as application/x-www-form-urlencoded. It returns a list of key/values.
The urlencoded media type is used by Web browsers when submitting HTML forms using the POST method.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_urlencoded_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.read_urlencoded_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.read_urlencoded_body/</guid>
      <description>Name cowboy_req:read_urlencoded_body - Read and parse a urlencoded request body
Description read_urlencoded_body(Req :: cowboy_req:req()) -&amp;gt; read_urlencoded_body(Req, #{}) read_urlencoded_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Body, Req} Opts :: cowboy_req:read_body_opts() Body :: [{Key :: binary(), Value :: binary() | true}]  Read and parse a urlencoded request body.
This function reads the request body and parses it as application/x-www-form-urlencoded. It returns a list of key/values.
The urlencoded media type is used by Web browsers when submitting HTML forms using the POST method.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_urlencoded_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.read_urlencoded_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.read_urlencoded_body/</guid>
      <description>Name cowboy_req:read_urlencoded_body - Read and parse a urlencoded request body
Description read_urlencoded_body(Req :: cowboy_req:req()) -&amp;gt; read_urlencoded_body(Req, #{}) read_urlencoded_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Body, Req} Opts :: cowboy_req:read_body_opts() Body :: [{Key :: binary(), Value :: binary() | true}]  Read and parse a urlencoded request body.
This function reads the request body and parses it as application/x-www-form-urlencoded. It returns a list of key/values.
The urlencoded media type is used by Web browsers when submitting HTML forms using the POST method.</description>
    </item>
    
    <item>
      <title>cowboy_req:read_urlencoded_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.read_urlencoded_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.read_urlencoded_body/</guid>
      <description>Name cowboy_req:read_urlencoded_body - Read and parse a urlencoded request body
Description read_urlencoded_body(Req :: cowboy_req:req()) -&amp;gt; read_urlencoded_body(Req, #{}) read_urlencoded_body(Req :: cowboy_req:req(), Opts) -&amp;gt; {ok, Body, Req} Opts :: cowboy_req:read_body_opts() Body :: [{Key :: binary(), Value :: binary() | true}]  Read and parse a urlencoded request body.
This function reads the request body and parses it as application/x-www-form-urlencoded. It returns a list of key/values.
The urlencoded media type is used by Web browsers when submitting HTML forms using the POST method.</description>
    </item>
    
    <item>
      <title>cowboy_req:reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.reply/</guid>
      <description>Name cowboy_req:reply - Send the response
Description reply(Status, Req :: cowboy_req:req()) -&amp;gt; reply(StatusCode, #{}, Req) reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req reply(Status, Headers, Body, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers() Body :: cowboy_req:resp_body()  Send the response.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.reply/</guid>
      <description>Name cowboy_req:reply - Send the response
Description reply(Status, Req :: cowboy_req:req()) -&amp;gt; reply(StatusCode, #{}, Req) reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req reply(Status, Headers, Body, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers() Body :: cowboy_req:resp_body()  Send the response.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.reply/</guid>
      <description>Name cowboy_req:reply - Send the response
Description reply(Status, Req :: cowboy_req:req()) -&amp;gt; reply(StatusCode, #{}, Req) reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req reply(Status, Headers, Body, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers() Body :: cowboy_req:resp_body()  Send the response.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.reply/</guid>
      <description>Name cowboy_req:reply - Send the response
Description reply(Status, Req :: cowboy_req:req()) -&amp;gt; reply(StatusCode, #{}, Req) reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req reply(Status, Headers, Body, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers() Body :: cowboy_req:resp_body()  Send the response.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.reply/</guid>
      <description>Name cowboy_req:reply - Send the response
Description reply(Status, Req :: cowboy_req:req()) -&amp;gt; reply(StatusCode, #{}, Req) reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req reply(Status, Headers, Body, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers() Body :: cowboy_req:resp_body()  Send the response.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.reply/</guid>
      <description>Name cowboy_req:reply - Send the response
Description reply(Status, Req :: cowboy_req:req()) -&amp;gt; reply(StatusCode, #{}, Req) reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req reply(Status, Headers, Body, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers() Body :: cowboy_req:resp_body()  Send the response.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.reply/</guid>
      <description>Name cowboy_req:reply - Send the response
Description reply(Status, Req :: cowboy_req:req()) -&amp;gt; reply(StatusCode, #{}, Req) reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req reply(Status, Headers, Body, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers() Body :: cowboy_req:resp_body()  Send the response.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.resp_header/</guid>
      <description>Name cowboy_req:resp_header - Response header
Description resp_header(Name, Req) -&amp;gt; resp_header(Name, Req, undefined) resp_header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given response header.
The response header must have been set previously using cowboy_req:set_resp_header(3) or cowboy_req:set_resp_headers(3).
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.resp_header/</guid>
      <description>Name cowboy_req:resp_header - Response header
Description resp_header(Name, Req) -&amp;gt; resp_header(Name, Req, undefined) resp_header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given response header.
The response header must have been set previously using cowboy_req:set_resp_header(3) or cowboy_req:set_resp_headers(3).
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.resp_header/</guid>
      <description>Name cowboy_req:resp_header - Response header
Description resp_header(Name, Req) -&amp;gt; resp_header(Name, Req, undefined) resp_header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given response header.
The response header must have been set previously using cowboy_req:set_resp_header(3) or cowboy_req:set_resp_headers(3).
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.resp_header/</guid>
      <description>Name cowboy_req:resp_header - Response header
Description resp_header(Name, Req) -&amp;gt; resp_header(Name, Req, undefined) resp_header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given response header.
The response header must have been set previously using cowboy_req:set_resp_header(3) or cowboy_req:set_resp_headers(3).
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.resp_header/</guid>
      <description>Name cowboy_req:resp_header - Response header
Description resp_header(Name, Req) -&amp;gt; resp_header(Name, Req, undefined) resp_header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given response header.
The response header must have been set previously using cowboy_req:set_resp_header(3) or cowboy_req:set_resp_headers(3).
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.resp_header/</guid>
      <description>Name cowboy_req:resp_header - Response header
Description resp_header(Name, Req) -&amp;gt; resp_header(Name, Req, undefined) resp_header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given response header.
The response header must have been set previously using cowboy_req:set_resp_header(3) or cowboy_req:set_resp_headers(3).
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.resp_header/</guid>
      <description>Name cowboy_req:resp_header - Response header
Description resp_header(Name, Req) -&amp;gt; resp_header(Name, Req, undefined) resp_header(Name, Req, Default) -&amp;gt; binary() | Default Name :: binary() %% lowercase; case insensitive Req :: cowboy_req:req() Default :: any()  Return the value for the given response header.
The response header must have been set previously using cowboy_req:set_resp_header(3) or cowboy_req:set_resp_headers(3).
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.resp_headers/</guid>
      <description>Name cowboy_req:resp_headers - Response headers
Description resp_headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all response headers.
Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Function introduced.   Examples Get all response headers Headers = cowboy_req:resp_headers(Req).  See also cowboy_req(3), cowboy_req:resp_header(3), cowboy_req:set_resp_header(3), cowboy_req:set_resp_headers(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.resp_headers/</guid>
      <description>Name cowboy_req:resp_headers - Response headers
Description resp_headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all response headers.
Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Function introduced.   Examples Get all response headers Headers = cowboy_req:resp_headers(Req).  See also cowboy_req(3), cowboy_req:resp_header(3), cowboy_req:set_resp_header(3), cowboy_req:set_resp_headers(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.resp_headers/</guid>
      <description>Name cowboy_req:resp_headers - Response headers
Description resp_headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all response headers.
Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Function introduced.   Examples Get all response headers Headers = cowboy_req:resp_headers(Req).  See also cowboy_req(3), cowboy_req:resp_header(3), cowboy_req:set_resp_header(3), cowboy_req:set_resp_headers(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.resp_headers/</guid>
      <description>Name cowboy_req:resp_headers - Response headers
Description resp_headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all response headers.
Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Function introduced.   Examples Get all response headers Headers = cowboy_req:resp_headers(Req).  See also cowboy_req(3), cowboy_req:resp_header(3), cowboy_req:set_resp_header(3), cowboy_req:set_resp_headers(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.resp_headers/</guid>
      <description>Name cowboy_req:resp_headers - Response headers
Description resp_headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all response headers.
Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Function introduced.   Examples Get all response headers Headers = cowboy_req:resp_headers(Req).  See also cowboy_req(3), cowboy_req:resp_header(3), cowboy_req:set_resp_header(3), cowboy_req:set_resp_headers(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.resp_headers/</guid>
      <description>Name cowboy_req:resp_headers - Response headers
Description resp_headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all response headers.
Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Function introduced.   Examples Get all response headers Headers = cowboy_req:resp_headers(Req).  See also cowboy_req(3), cowboy_req:resp_header(3), cowboy_req:set_resp_header(3), cowboy_req:set_resp_headers(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.resp_headers/</guid>
      <description>Name cowboy_req:resp_headers - Response headers
Description resp_headers(Req :: cowboy_req:req()) -&amp;gt; cowboy:http_headers()  Return all response headers.
Arguments Req The Req object.
  Return value Headers are returned as a map with keys being lowercase binary strings, and values as binary strings.
Changelog 2.0: Function introduced.   Examples Get all response headers Headers = cowboy_req:resp_headers(Req).  See also cowboy_req(3), cowboy_req:resp_header(3), cowboy_req:set_resp_header(3), cowboy_req:set_resp_headers(3)</description>
    </item>
    
    <item>
      <title>cowboy_req:scheme(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.scheme/</guid>
      <description>Name cowboy_req:scheme - URI scheme
Description scheme(Req :: cowboy_req:req()) -&amp;gt; Scheme :: binary()  Return the scheme of the effective request URI.
The scheme can also be obtained using pattern matching:
#{scheme := Scheme} = Req.  Arguments Req The Req object.
  Return value The scheme is returned as a binary. It is case insensitive.
Cowboy will only set the scheme to &amp;lt;&amp;lt;&amp;quot;http&amp;quot;&amp;gt;&amp;gt; or &amp;lt;&amp;lt;&amp;quot;https&amp;quot;&amp;gt;&amp;gt;.
Changelog 2.0: Function introduced.</description>
    </item>
    
    <item>
      <title>cowboy_req:scheme(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.scheme/</guid>
      <description>Name cowboy_req:scheme - URI scheme
Description scheme(Req :: cowboy_req:req()) -&amp;gt; Scheme :: binary()  Return the scheme of the effective request URI.
The scheme can also be obtained using pattern matching:
#{scheme := Scheme} = Req.  Arguments Req The Req object.
  Return value The scheme is returned as a binary. It is case insensitive.
Cowboy will only set the scheme to &amp;lt;&amp;lt;&amp;quot;http&amp;quot;&amp;gt;&amp;gt; or &amp;lt;&amp;lt;&amp;quot;https&amp;quot;&amp;gt;&amp;gt;.
Changelog 2.0: Function introduced.</description>
    </item>
    
    <item>
      <title>cowboy_req:scheme(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.scheme/</guid>
      <description>Name cowboy_req:scheme - URI scheme
Description scheme(Req :: cowboy_req:req()) -&amp;gt; Scheme :: binary()  Return the scheme of the effective request URI.
The scheme can also be obtained using pattern matching:
#{scheme := Scheme} = Req.  Arguments Req The Req object.
  Return value The scheme is returned as a binary. It is case insensitive.
Cowboy will only set the scheme to &amp;lt;&amp;lt;&amp;quot;http&amp;quot;&amp;gt;&amp;gt; or &amp;lt;&amp;lt;&amp;quot;https&amp;quot;&amp;gt;&amp;gt;.
Changelog 2.0: Function introduced.</description>
    </item>
    
    <item>
      <title>cowboy_req:scheme(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.scheme/</guid>
      <description>Name cowboy_req:scheme - URI scheme
Description scheme(Req :: cowboy_req:req()) -&amp;gt; Scheme :: binary()  Return the scheme of the effective request URI.
The scheme can also be obtained using pattern matching:
#{scheme := Scheme} = Req.  Arguments Req The Req object.
  Return value The scheme is returned as a binary. It is case insensitive.
Cowboy will only set the scheme to &amp;lt;&amp;lt;&amp;quot;http&amp;quot;&amp;gt;&amp;gt; or &amp;lt;&amp;lt;&amp;quot;https&amp;quot;&amp;gt;&amp;gt;.
Changelog 2.0: Function introduced.</description>
    </item>
    
    <item>
      <title>cowboy_req:scheme(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.scheme/</guid>
      <description>Name cowboy_req:scheme - URI scheme
Description scheme(Req :: cowboy_req:req()) -&amp;gt; Scheme :: binary()  Return the scheme of the effective request URI.
The scheme can also be obtained using pattern matching:
#{scheme := Scheme} = Req.  Arguments Req The Req object.
  Return value The scheme is returned as a binary. It is case insensitive.
Cowboy will only set the scheme to &amp;lt;&amp;lt;&amp;quot;http&amp;quot;&amp;gt;&amp;gt; or &amp;lt;&amp;lt;&amp;quot;https&amp;quot;&amp;gt;&amp;gt;.
Changelog 2.0: Function introduced.</description>
    </item>
    
    <item>
      <title>cowboy_req:scheme(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.scheme/</guid>
      <description>Name cowboy_req:scheme - URI scheme
Description scheme(Req :: cowboy_req:req()) -&amp;gt; Scheme :: binary()  Return the scheme of the effective request URI.
The scheme can also be obtained using pattern matching:
#{scheme := Scheme} = Req.  Arguments Req The Req object.
  Return value The scheme is returned as a binary. It is case insensitive.
Cowboy will only set the scheme to &amp;lt;&amp;lt;&amp;quot;http&amp;quot;&amp;gt;&amp;gt; or &amp;lt;&amp;lt;&amp;quot;https&amp;quot;&amp;gt;&amp;gt;.
Changelog 2.0: Function introduced.</description>
    </item>
    
    <item>
      <title>cowboy_req:scheme(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.scheme/</guid>
      <description>Name cowboy_req:scheme - URI scheme
Description scheme(Req :: cowboy_req:req()) -&amp;gt; Scheme :: binary()  Return the scheme of the effective request URI.
The scheme can also be obtained using pattern matching:
#{scheme := Scheme} = Req.  Arguments Req The Req object.
  Return value The scheme is returned as a binary. It is case insensitive.
Cowboy will only set the scheme to &amp;lt;&amp;lt;&amp;quot;http&amp;quot;&amp;gt;&amp;gt; or &amp;lt;&amp;lt;&amp;quot;https&amp;quot;&amp;gt;&amp;gt;.
Changelog 2.0: Function introduced.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.set_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.set_resp_body/</guid>
      <description>Name cowboy_req:set_resp_body - Set the response body
Description set_resp_body(Body, Req :: cowboy_req:req()) -&amp;gt; Req Body :: cowboy_req:resp_body()  Set the response body.
The response body will be sent when a reply is initiated. Note that the functions stream_reply/2,3 and reply/4 will override the body set by this function.
This function can also be used to remove a response body that was set previously. To do so, simply call this function with an empty body.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.set_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.set_resp_body/</guid>
      <description>Name cowboy_req:set_resp_body - Set the response body
Description set_resp_body(Body, Req :: cowboy_req:req()) -&amp;gt; Req Body :: cowboy_req:resp_body()  Set the response body.
The response body will be sent when a reply is initiated. Note that the functions stream_reply/2,3 and reply/4 will override the body set by this function.
This function can also be used to remove a response body that was set previously. To do so, simply call this function with an empty body.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.set_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.set_resp_body/</guid>
      <description>Name cowboy_req:set_resp_body - Set the response body
Description set_resp_body(Body, Req :: cowboy_req:req()) -&amp;gt; Req Body :: cowboy_req:resp_body()  Set the response body.
The response body will be sent when a reply is initiated. Note that the functions stream_reply/2,3 and reply/4 will override the body set by this function.
This function can also be used to remove a response body that was set previously. To do so, simply call this function with an empty body.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.set_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.set_resp_body/</guid>
      <description>Name cowboy_req:set_resp_body - Set the response body
Description set_resp_body(Body, Req :: cowboy_req:req()) -&amp;gt; Req Body :: cowboy_req:resp_body()  Set the response body.
The response body will be sent when a reply is initiated. Note that the functions stream_reply/2,3 and reply/4 will override the body set by this function.
This function can also be used to remove a response body that was set previously. To do so, simply call this function with an empty body.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.set_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.set_resp_body/</guid>
      <description>Name cowboy_req:set_resp_body - Set the response body
Description set_resp_body(Body, Req :: cowboy_req:req()) -&amp;gt; Req Body :: cowboy_req:resp_body()  Set the response body.
The response body will be sent when a reply is initiated. Note that the functions stream_reply/2,3 and reply/4 will override the body set by this function.
This function can also be used to remove a response body that was set previously. To do so, simply call this function with an empty body.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.set_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.set_resp_body/</guid>
      <description>Name cowboy_req:set_resp_body - Set the response body
Description set_resp_body(Body, Req :: cowboy_req:req()) -&amp;gt; Req Body :: cowboy_req:resp_body()  Set the response body.
The response body will be sent when a reply is initiated. Note that the functions stream_reply/2,3 and reply/4 will override the body set by this function.
This function can also be used to remove a response body that was set previously. To do so, simply call this function with an empty body.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.set_resp_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.set_resp_body/</guid>
      <description>Name cowboy_req:set_resp_body - Set the response body
Description set_resp_body(Body, Req :: cowboy_req:req()) -&amp;gt; Req Body :: cowboy_req:resp_body()  Set the response body.
The response body will be sent when a reply is initiated. Note that the functions stream_reply/2,3 and reply/4 will override the body set by this function.
This function can also be used to remove a response body that was set previously. To do so, simply call this function with an empty body.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_cookie(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.set_resp_cookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.set_resp_cookie/</guid>
      <description>Name cowboy_req:set_resp_cookie - Set a cookie
Description set_resp_cookie(Name, Value, Req :: cowboy_req:req()) -&amp;gt; set_resp_cookie(Name, Value, [], Req) set_resp_cookie(Name, Value, Req :: cowboy_req:req(), Opts) -&amp;gt; Req Name :: binary() %% case sensitive Value :: iodata() %% case sensitive Opts :: cow_cookie:cookie_opts()  Set a cookie to be sent with the response.
Note that cookie names are case sensitive.
Arguments Name Cookie name.
 Value Cookie value.
 Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_cookie(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.set_resp_cookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.set_resp_cookie/</guid>
      <description>Name cowboy_req:set_resp_cookie - Set a cookie
Description set_resp_cookie(Name, Value, Req :: cowboy_req:req()) -&amp;gt; set_resp_cookie(Name, Value, [], Req) set_resp_cookie(Name, Value, Req :: cowboy_req:req(), Opts) -&amp;gt; Req Name :: binary() %% case sensitive Value :: iodata() %% case sensitive Opts :: cow_cookie:cookie_opts()  Set a cookie to be sent with the response.
Note that cookie names are case sensitive.
Arguments Name Cookie name.
 Value Cookie value.
 Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_cookie(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.set_resp_cookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.set_resp_cookie/</guid>
      <description>Name cowboy_req:set_resp_cookie - Set a cookie
Description set_resp_cookie(Name, Value, Req :: cowboy_req:req()) -&amp;gt; set_resp_cookie(Name, Value, [], Req) set_resp_cookie(Name, Value, Req :: cowboy_req:req(), Opts) -&amp;gt; Req Name :: binary() %% case sensitive Value :: iodata() %% case sensitive Opts :: cow_cookie:cookie_opts()  Set a cookie to be sent with the response.
Note that cookie names are case sensitive.
Arguments Name Cookie name.
 Value Cookie value.
 Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_cookie(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.set_resp_cookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.set_resp_cookie/</guid>
      <description>Name cowboy_req:set_resp_cookie - Set a cookie
Description set_resp_cookie(Name, Value, Req :: cowboy_req:req()) -&amp;gt; set_resp_cookie(Name, Value, [], Req) set_resp_cookie(Name, Value, Req :: cowboy_req:req(), Opts) -&amp;gt; Req Name :: binary() %% case sensitive Value :: iodata() %% case sensitive Opts :: cow_cookie:cookie_opts()  Set a cookie to be sent with the response.
Note that cookie names are case sensitive.
Arguments Name Cookie name.
 Value Cookie value.
 Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_cookie(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.set_resp_cookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.set_resp_cookie/</guid>
      <description>Name cowboy_req:set_resp_cookie - Set a cookie
Description set_resp_cookie(Name, Value, Req :: cowboy_req:req()) -&amp;gt; set_resp_cookie(Name, Value, [], Req) set_resp_cookie(Name, Value, Req :: cowboy_req:req(), Opts) -&amp;gt; Req Name :: binary() %% case sensitive Value :: iodata() %% case sensitive Opts :: cow_cookie:cookie_opts()  Set a cookie to be sent with the response.
Note that cookie names are case sensitive.
Arguments Name Cookie name.
 Value Cookie value.
 Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_cookie(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.set_resp_cookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.set_resp_cookie/</guid>
      <description>Name cowboy_req:set_resp_cookie - Set a cookie
Description set_resp_cookie(Name, Value, Req :: cowboy_req:req()) -&amp;gt; set_resp_cookie(Name, Value, [], Req) set_resp_cookie(Name, Value, Req :: cowboy_req:req(), Opts) -&amp;gt; Req Name :: binary() %% case sensitive Value :: iodata() %% case sensitive Opts :: cow_cookie:cookie_opts()  Set a cookie to be sent with the response.
Note that cookie names are case sensitive.
Arguments Name Cookie name.
 Value Cookie value.
 Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_cookie(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.set_resp_cookie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.set_resp_cookie/</guid>
      <description>Name cowboy_req:set_resp_cookie - Set a cookie
Description set_resp_cookie(Name, Value, Req :: cowboy_req:req()) -&amp;gt; set_resp_cookie(Name, Value, Req, #{}) set_resp_cookie(Name, Value, Req :: cowboy_req:req(), Opts) -&amp;gt; Req Name :: binary() %% case sensitive Value :: iodata() %% case sensitive Opts :: cow_cookie:cookie_opts()  Set a cookie to be sent with the response.
Note that cookie names are case sensitive.
Arguments Name Cookie name.
 Value Cookie value.
 Req The Req object.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.set_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.set_resp_header/</guid>
      <description>Name cowboy_req:set_resp_header - Set a response header
Description set_resp_header(Name, Value, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive Value :: iodata() %% case depends on header  Set a header to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.set_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.set_resp_header/</guid>
      <description>Name cowboy_req:set_resp_header - Set a response header
Description set_resp_header(Name, Value, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive Value :: iodata() %% case depends on header  Set a header to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.set_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.set_resp_header/</guid>
      <description>Name cowboy_req:set_resp_header - Set a response header
Description set_resp_header(Name, Value, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive Value :: iodata() %% case depends on header  Set a header to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.set_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.set_resp_header/</guid>
      <description>Name cowboy_req:set_resp_header - Set a response header
Description set_resp_header(Name, Value, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive Value :: iodata() %% case depends on header  Set a header to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.set_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.set_resp_header/</guid>
      <description>Name cowboy_req:set_resp_header - Set a response header
Description set_resp_header(Name, Value, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive Value :: iodata() %% case depends on header  Set a header to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.set_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.set_resp_header/</guid>
      <description>Name cowboy_req:set_resp_header - Set a response header
Description set_resp_header(Name, Value, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive Value :: iodata() %% case depends on header  Set a header to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_header(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.set_resp_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.set_resp_header/</guid>
      <description>Name cowboy_req:set_resp_header - Set a response header
Description set_resp_header(Name, Value, Req :: cowboy_req:req()) -&amp;gt; Req Name :: binary() %% lowercase; case insensitive Value :: iodata() %% case depends on header  Set a header to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.set_resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.set_resp_headers/</guid>
      <description>Name cowboy_req:set_resp_headers - Set several response headers
Description set_resp_headers(Headers, Req :: cowboy_req:req()) -&amp;gt; Req Headers :: cowboy:http_headers()  Set several headers to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may be overwritten by those set from the reply functions.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.set_resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.set_resp_headers/</guid>
      <description>Name cowboy_req:set_resp_headers - Set several response headers
Description set_resp_headers(Headers, Req :: cowboy_req:req()) -&amp;gt; Req Headers :: cowboy:http_headers()  Set several headers to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may be overwritten by those set from the reply functions.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.set_resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.set_resp_headers/</guid>
      <description>Name cowboy_req:set_resp_headers - Set several response headers
Description set_resp_headers(Headers, Req :: cowboy_req:req()) -&amp;gt; Req Headers :: cowboy:http_headers()  Set several headers to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may be overwritten by those set from the reply functions.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.set_resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.set_resp_headers/</guid>
      <description>Name cowboy_req:set_resp_headers - Set several response headers
Description set_resp_headers(Headers, Req :: cowboy_req:req()) -&amp;gt; Req Headers :: cowboy:http_headers()  Set several headers to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may be overwritten by those set from the reply functions.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.set_resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.set_resp_headers/</guid>
      <description>Name cowboy_req:set_resp_headers - Set several response headers
Description set_resp_headers(Headers, Req :: cowboy_req:req()) -&amp;gt; Req Headers :: cowboy:http_headers()  Set several headers to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may be overwritten by those set from the reply functions.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.set_resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.set_resp_headers/</guid>
      <description>Name cowboy_req:set_resp_headers - Set several response headers
Description set_resp_headers(Headers, Req :: cowboy_req:req()) -&amp;gt; Req Headers :: cowboy:http_headers()  Set several headers to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may be overwritten by those set from the reply functions.</description>
    </item>
    
    <item>
      <title>cowboy_req:set_resp_headers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.set_resp_headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.set_resp_headers/</guid>
      <description>Name cowboy_req:set_resp_headers - Set several response headers
Description set_resp_headers(Headers, Req :: cowboy_req:req()) -&amp;gt; Req Headers :: cowboy:http_headers()  Set several headers to be sent with the response.
The header name must be given as a lowercase binary string. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may be overwritten by those set from the reply functions.</description>
    </item>
    
    <item>
      <title>cowboy_req:sock(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.sock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.sock/</guid>
      <description>Name cowboy_req:sock - Socket address and port
Description sock(Req :: cowboy_req:req()) -&amp;gt; Info Info :: {inet:ip_address(), inet:port_number()}  Return the socket&amp;apos;s IP address and port number.
The socket information can also be obtained using pattern matching:
#{sock := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The socket&amp;apos;s local IP address and port number.
Changelog 2.1: Function introduced.   Examples Get the socket&amp;apos;s IP address and port number.</description>
    </item>
    
    <item>
      <title>cowboy_req:sock(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.sock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.sock/</guid>
      <description>Name cowboy_req:sock - Socket address and port
Description sock(Req :: cowboy_req:req()) -&amp;gt; Info Info :: {inet:ip_address(), inet:port_number()}  Return the socket&amp;apos;s IP address and port number.
The socket information can also be obtained using pattern matching:
#{sock := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The socket&amp;apos;s local IP address and port number.
Changelog 2.1: Function introduced.   Examples Get the socket&amp;apos;s IP address and port number.</description>
    </item>
    
    <item>
      <title>cowboy_req:sock(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.sock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.sock/</guid>
      <description>Name cowboy_req:sock - Socket address and port
Description sock(Req :: cowboy_req:req()) -&amp;gt; Info Info :: {inet:ip_address(), inet:port_number()}  Return the socket&amp;apos;s IP address and port number.
The socket information can also be obtained using pattern matching:
#{sock := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The socket&amp;apos;s local IP address and port number.
Changelog 2.1: Function introduced.   Examples Get the socket&amp;apos;s IP address and port number.</description>
    </item>
    
    <item>
      <title>cowboy_req:sock(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.sock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.sock/</guid>
      <description>Name cowboy_req:sock - Socket address and port
Description sock(Req :: cowboy_req:req()) -&amp;gt; Info Info :: {inet:ip_address(), inet:port_number()}  Return the socket&amp;apos;s IP address and port number.
The socket information can also be obtained using pattern matching:
#{sock := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The socket&amp;apos;s local IP address and port number.
Changelog 2.1: Function introduced.   Examples Get the socket&amp;apos;s IP address and port number.</description>
    </item>
    
    <item>
      <title>cowboy_req:sock(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.sock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.sock/</guid>
      <description>Name cowboy_req:sock - Socket address and port
Description sock(Req :: cowboy_req:req()) -&amp;gt; Info Info :: {inet:ip_address(), inet:port_number()}  Return the socket&amp;apos;s IP address and port number.
The socket information can also be obtained using pattern matching:
#{sock := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The socket&amp;apos;s local IP address and port number.
Changelog 2.1: Function introduced.   Examples Get the socket&amp;apos;s IP address and port number.</description>
    </item>
    
    <item>
      <title>cowboy_req:sock(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.sock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.sock/</guid>
      <description>Name cowboy_req:sock - Socket address and port
Description sock(Req :: cowboy_req:req()) -&amp;gt; Info Info :: {inet:ip_address(), inet:port_number()}  Return the socket&amp;apos;s IP address and port number.
The socket information can also be obtained using pattern matching:
#{sock := {IP, Port}} = Req.  Arguments Req The Req object.
  Return value The socket&amp;apos;s local IP address and port number.
Changelog 2.1: Function introduced.   Examples Get the socket&amp;apos;s IP address and port number.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.stream_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.stream_body/</guid>
      <description>Name cowboy_req:stream_body - Stream the response body
Description stream_body(Data, IsFin, Req :: cowboy_req:req()) -&amp;gt; ok Data :: iodata() IsFin :: fin | nofin  Stream the response body.
This function may be called as many times as needed after initiating a response using the cowboy_req:stream_reply(3) function.
The second argument indicates if this call is the final call. Use the nofin value until you know no more data will be sent. The final call should use fin (possibly with an empty data value).</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.stream_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.stream_body/</guid>
      <description>Name cowboy_req:stream_body - Stream the response body
Description stream_body(Data, IsFin, Req :: cowboy_req:req()) -&amp;gt; ok Data :: iodata() IsFin :: fin | nofin  Stream the response body.
This function may be called as many times as needed after initiating a response using the cowboy_req:stream_reply(3) function.
The second argument indicates if this call is the final call. Use the nofin value until you know no more data will be sent. The final call should use fin (possibly with an empty data value).</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.stream_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.stream_body/</guid>
      <description>Name cowboy_req:stream_body - Stream the response body
Description stream_body(Data, IsFin, Req :: cowboy_req:req()) -&amp;gt; ok Data :: iodata() IsFin :: fin | nofin  Stream the response body.
This function may be called as many times as needed after initiating a response using the cowboy_req:stream_reply(3) function.
The second argument indicates if this call is the final call. Use the nofin value until you know no more data will be sent. The final call should use fin (possibly with an empty data value) or be a call to the cowboy_req:stream_trailers(3) function.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.stream_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.stream_body/</guid>
      <description>Name cowboy_req:stream_body - Stream the response body
Description stream_body(Data, IsFin, Req :: cowboy_req:req()) -&amp;gt; ok Data :: iodata() IsFin :: fin | nofin  Stream the response body.
This function may be called as many times as needed after initiating a response using the cowboy_req:stream_reply(3) function.
The second argument indicates if this call is the final call. Use the nofin value until you know no more data will be sent. The final call should use fin (possibly with an empty data value) or be a call to the cowboy_req:stream_trailers(3) function.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.stream_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.stream_body/</guid>
      <description>Name cowboy_req:stream_body - Stream the response body
Description stream_body(Data, IsFin, Req :: cowboy_req:req()) -&amp;gt; ok Data :: iodata() IsFin :: fin | nofin  Stream the response body.
This function may be called as many times as needed after initiating a response using the cowboy_req:stream_reply(3) function.
The second argument indicates if this call is the final call. Use the nofin value until you know no more data will be sent. The final call should use fin (possibly with an empty data value) or be a call to the cowboy_req:stream_trailers(3) function.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.stream_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.stream_body/</guid>
      <description>Name cowboy_req:stream_body - Stream the response body
Description stream_body(Data, IsFin, Req :: cowboy_req:req()) -&amp;gt; ok Data :: iodata() IsFin :: fin | nofin  Stream the response body.
This function may be called as many times as needed after initiating a response using the cowboy_req:stream_reply(3) function.
The second argument indicates if this call is the final call. Use the nofin value until you know no more data will be sent. The final call should use fin (possibly with an empty data value) or be a call to the cowboy_req:stream_trailers(3) function.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_body(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.stream_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.stream_body/</guid>
      <description>Name cowboy_req:stream_body - Stream the response body
Description stream_body(Data, IsFin, Req :: cowboy_req:req()) -&amp;gt; ok Data :: cowboy_req:resp_body() IsFin :: fin | nofin  Stream the response body.
This function may be called as many times as needed after initiating a response using the cowboy_req:stream_reply(3) function.
The second argument indicates if this call is the final call. Use the nofin value until you know no more data will be sent. The final call should use fin (possibly with an empty data value) or be a call to the cowboy_req:stream_trailers(3) function.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_events(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.stream_events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.stream_events/</guid>
      <description>Name cowboy_req:stream_events - Stream events
Description stream_events(Events, IsFin, Req :: cowboy_req:req()) -&amp;gt; ok Events :: Event | [Event] IsFin :: fin | nofin Event :: #{ comment =&amp;gt; iodata(), data =&amp;gt; iodata(), event =&amp;gt; iodata() | atom(), id =&amp;gt; iodata(), retry =&amp;gt; non_neg_integer() }  Stream events.
This function should only be used for text/event-stream responses when using server-sent events. Cowboy will automatically encode the given events to their text representation.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_events(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.stream_events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.stream_events/</guid>
      <description>Name cowboy_req:stream_events - Stream events
Description stream_events(Events, IsFin, Req :: cowboy_req:req()) -&amp;gt; ok Events :: Event | [Event] IsFin :: fin | nofin Event :: #{ comment =&amp;gt; iodata(), data =&amp;gt; iodata(), event =&amp;gt; iodata() | atom(), id =&amp;gt; iodata(), retry =&amp;gt; non_neg_integer() }  Stream events.
This function should only be used for text/event-stream responses when using server-sent events. Cowboy will automatically encode the given events to their text representation.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.stream_reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.stream_reply/</guid>
      <description>Name cowboy_req:stream_reply - Send the response headers
Description stream_reply(Status, Req :: cowboy_req:req()) -&amp;gt; stream_reply(StatusCode, #{}, Req) stream_reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send the response headers.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may overwrite those set by set_resp_header/3.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.stream_reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.stream_reply/</guid>
      <description>Name cowboy_req:stream_reply - Send the response headers
Description stream_reply(Status, Req :: cowboy_req:req()) -&amp;gt; stream_reply(StatusCode, #{}, Req) stream_reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send the response headers.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may overwrite those set by set_resp_header/3.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.stream_reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.stream_reply/</guid>
      <description>Name cowboy_req:stream_reply - Send the response headers
Description stream_reply(Status, Req :: cowboy_req:req()) -&amp;gt; stream_reply(StatusCode, #{}, Req) stream_reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send the response headers.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may overwrite those set by set_resp_header/3.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.stream_reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.stream_reply/</guid>
      <description>Name cowboy_req:stream_reply - Send the response headers
Description stream_reply(Status, Req :: cowboy_req:req()) -&amp;gt; stream_reply(StatusCode, #{}, Req) stream_reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send the response headers.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may overwrite those set by set_resp_header/3.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.stream_reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.stream_reply/</guid>
      <description>Name cowboy_req:stream_reply - Send the response headers
Description stream_reply(Status, Req :: cowboy_req:req()) -&amp;gt; stream_reply(StatusCode, #{}, Req) stream_reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send the response headers.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may overwrite those set by set_resp_header/3.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.stream_reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.stream_reply/</guid>
      <description>Name cowboy_req:stream_reply - Send the response headers
Description stream_reply(Status, Req :: cowboy_req:req()) -&amp;gt; stream_reply(StatusCode, #{}, Req) stream_reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send the response headers.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may overwrite those set by set_resp_header/3.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_reply(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.stream_reply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.stream_reply/</guid>
      <description>Name cowboy_req:stream_reply - Send the response headers
Description stream_reply(Status, Req :: cowboy_req:req()) -&amp;gt; stream_reply(StatusCode, #{}, Req) stream_reply(Status, Headers, Req :: cowboy_req:req()) -&amp;gt; Req Status :: cowboy:http_status() Headers :: cowboy:http_headers()  Send the response headers.
The header names must be given as lowercase binary strings. While header names are case insensitive, Cowboy requires them to be given as lowercase to function properly.
Cowboy does not allow duplicate header names. Headers set by this function may overwrite those set by set_resp_header/3.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_trailers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.stream_trailers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.stream_trailers/</guid>
      <description>Name cowboy_req:stream_trailers - Send the response trailers
Description stream_trailers(Trailers, Req :: cowboy_req:req()) -&amp;gt; ok Trailers :: cowboy:http_headers()  Send the response trailers and terminate the stream.
This function can only be called once, after initiating a response using cowboy_req:stream_reply(3) and sending zero or more body chunks using cowboy_req:stream_body(3) with the nofin argument set. The function stream_trailers/2 implies fin and automatically terminate the response.
You must list all field names sent in trailers in the trailer header, otherwise they might be dropped by intermediaries or clients.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_trailers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.stream_trailers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.stream_trailers/</guid>
      <description>Name cowboy_req:stream_trailers - Send the response trailers
Description stream_trailers(Trailers, Req :: cowboy_req:req()) -&amp;gt; ok Trailers :: cowboy:http_headers()  Send the response trailers and terminate the stream.
This function can only be called once, after initiating a response using cowboy_req:stream_reply(3) and sending zero or more body chunks using cowboy_req:stream_body(3) with the nofin argument set. The function stream_trailers/2 implies fin and automatically terminate the response.
You must list all field names sent in trailers in the trailer header, otherwise they might be dropped by intermediaries or clients.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_trailers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.stream_trailers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.stream_trailers/</guid>
      <description>Name cowboy_req:stream_trailers - Send the response trailers
Description stream_trailers(Trailers, Req :: cowboy_req:req()) -&amp;gt; ok Trailers :: cowboy:http_headers()  Send the response trailers and terminate the stream.
This function can only be called once, after initiating a response using cowboy_req:stream_reply(3) and sending zero or more body chunks using cowboy_req:stream_body(3) with the nofin argument set. The function stream_trailers/2 implies fin and automatically terminate the response.
You must list all field names sent in trailers in the trailer header, otherwise they might be dropped by intermediaries or clients.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_trailers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.stream_trailers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.stream_trailers/</guid>
      <description>Name cowboy_req:stream_trailers - Send the response trailers
Description stream_trailers(Trailers, Req :: cowboy_req:req()) -&amp;gt; ok Trailers :: cowboy:http_headers()  Send the response trailers and terminate the stream.
This function can only be called once, after initiating a response using cowboy_req:stream_reply(3) and sending zero or more body chunks using cowboy_req:stream_body(3) with the nofin argument set. The function stream_trailers/2 implies fin and automatically terminate the response.
You must list all field names sent in trailers in the trailer header, otherwise they might be dropped by intermediaries or clients.</description>
    </item>
    
    <item>
      <title>cowboy_req:stream_trailers(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.stream_trailers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.stream_trailers/</guid>
      <description>Name cowboy_req:stream_trailers - Send the response trailers
Description stream_trailers(Trailers, Req :: cowboy_req:req()) -&amp;gt; ok Trailers :: cowboy:http_headers()  Send the response trailers and terminate the stream.
This function can only be called once, after initiating a response using cowboy_req:stream_reply(3) and sending zero or more body chunks using cowboy_req:stream_body(3) with the nofin argument set. The function stream_trailers/2 implies fin and automatically terminate the response.
You must list all field names sent in trailers in the trailer header, otherwise they might be dropped by intermediaries or clients.</description>
    </item>
    
    <item>
      <title>cowboy_req:uri(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.uri/</guid>
      <description>Name cowboy_req:uri - Reconstructed URI
Description uri(Req :: cowboy_req:req()) -&amp;gt; uri(Req, #{}) uri(Req :: cowboy_req:req(), Opts) -&amp;gt; URI :: iodata() Opts :: #{ scheme =&amp;gt; iodata() | undefined, host =&amp;gt; iodata() | undefined, port =&amp;gt; inet:port_number() | undefined, path =&amp;gt; iodata() | undefined, qs =&amp;gt; iodata() | undefined, fragment =&amp;gt; iodata() | undefined }  Reconstruct the effective request URI, optionally modifying components.
By default Cowboy will build a URI using the components found in the request.</description>
    </item>
    
    <item>
      <title>cowboy_req:uri(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.uri/</guid>
      <description>Name cowboy_req:uri - Reconstructed URI
Description uri(Req :: cowboy_req:req()) -&amp;gt; uri(Req, #{}) uri(Req :: cowboy_req:req(), Opts) -&amp;gt; URI :: iodata() Opts :: #{ scheme =&amp;gt; iodata() | undefined, host =&amp;gt; iodata() | undefined, port =&amp;gt; inet:port_number() | undefined, path =&amp;gt; iodata() | undefined, qs =&amp;gt; iodata() | undefined, fragment =&amp;gt; iodata() | undefined }  Reconstruct the effective request URI, optionally modifying components.
By default Cowboy will build a URI using the components found in the request.</description>
    </item>
    
    <item>
      <title>cowboy_req:uri(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.uri/</guid>
      <description>Name cowboy_req:uri - Reconstructed URI
Description uri(Req :: cowboy_req:req()) -&amp;gt; uri(Req, #{}) uri(Req :: cowboy_req:req(), Opts) -&amp;gt; URI :: iodata() Opts :: #{ scheme =&amp;gt; iodata() | undefined, host =&amp;gt; iodata() | undefined, port =&amp;gt; inet:port_number() | undefined, path =&amp;gt; iodata() | undefined, qs =&amp;gt; iodata() | undefined, fragment =&amp;gt; iodata() | undefined }  Reconstruct the effective request URI, optionally modifying components.
By default Cowboy will build a URI using the components found in the request.</description>
    </item>
    
    <item>
      <title>cowboy_req:uri(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.uri/</guid>
      <description>Name cowboy_req:uri - Reconstructed URI
Description uri(Req :: cowboy_req:req()) -&amp;gt; uri(Req, #{}) uri(Req :: cowboy_req:req(), Opts) -&amp;gt; URI :: iodata() Opts :: #{ scheme =&amp;gt; iodata() | undefined, host =&amp;gt; iodata() | undefined, port =&amp;gt; inet:port_number() | undefined, path =&amp;gt; iodata() | undefined, qs =&amp;gt; iodata() | undefined, fragment =&amp;gt; iodata() | undefined }  Reconstruct the effective request URI, optionally modifying components.
By default Cowboy will build a URI using the components found in the request.</description>
    </item>
    
    <item>
      <title>cowboy_req:uri(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.uri/</guid>
      <description>Name cowboy_req:uri - Reconstructed URI
Description uri(Req :: cowboy_req:req()) -&amp;gt; uri(Req, #{}) uri(Req :: cowboy_req:req(), Opts) -&amp;gt; URI :: iodata() Opts :: #{ scheme =&amp;gt; iodata() | undefined, host =&amp;gt; iodata() | undefined, port =&amp;gt; inet:port_number() | undefined, path =&amp;gt; iodata() | undefined, qs =&amp;gt; iodata() | undefined, fragment =&amp;gt; iodata() | undefined }  Reconstruct the effective request URI, optionally modifying components.
By default Cowboy will build a URI using the components found in the request.</description>
    </item>
    
    <item>
      <title>cowboy_req:uri(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.uri/</guid>
      <description>Name cowboy_req:uri - Reconstructed URI
Description uri(Req :: cowboy_req:req()) -&amp;gt; uri(Req, #{}) uri(Req :: cowboy_req:req(), Opts) -&amp;gt; URI :: iodata() Opts :: #{ scheme =&amp;gt; iodata() | undefined, host =&amp;gt; iodata() | undefined, port =&amp;gt; inet:port_number() | undefined, path =&amp;gt; iodata() | undefined, qs =&amp;gt; iodata() | undefined, fragment =&amp;gt; iodata() | undefined }  Reconstruct the effective request URI, optionally modifying components.
By default Cowboy will build a URI using the components found in the request.</description>
    </item>
    
    <item>
      <title>cowboy_req:uri(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.uri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.uri/</guid>
      <description>Name cowboy_req:uri - Reconstructed URI
Description uri(Req :: cowboy_req:req()) -&amp;gt; uri(Req, #{}) uri(Req :: cowboy_req:req(), Opts) -&amp;gt; URI :: iodata() Opts :: #{ scheme =&amp;gt; iodata() | undefined, host =&amp;gt; iodata() | undefined, port =&amp;gt; inet:port_number() | undefined, path =&amp;gt; iodata() | undefined, qs =&amp;gt; iodata() | undefined, fragment =&amp;gt; iodata() | undefined }  Reconstruct the effective request URI, optionally modifying components.
By default Cowboy will build a URI using the components found in the request.</description>
    </item>
    
    <item>
      <title>cowboy_req:version(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_req.version/</guid>
      <description>Name cowboy_req:version - HTTP version
Description version(Req :: cowboy_req:req()) -&amp;gt; Version :: cowboy:http_version()  Return the HTTP version used for the request.
The version can also be obtained using pattern matching:
#{version := Version} = Req.  Arguments Req The Req object.
  Return value The HTTP version used for the request is returned as an atom. It is provided for informative purposes only.
Changelog 2.0: Only the version is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:version(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_req.version/</guid>
      <description>Name cowboy_req:version - HTTP version
Description version(Req :: cowboy_req:req()) -&amp;gt; Version :: cowboy:http_version()  Return the HTTP version used for the request.
The version can also be obtained using pattern matching:
#{version := Version} = Req.  Arguments Req The Req object.
  Return value The HTTP version used for the request is returned as an atom. It is provided for informative purposes only.
Changelog 2.0: Only the version is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:version(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_req.version/</guid>
      <description>Name cowboy_req:version - HTTP version
Description version(Req :: cowboy_req:req()) -&amp;gt; Version :: cowboy:http_version()  Return the HTTP version used for the request.
The version can also be obtained using pattern matching:
#{version := Version} = Req.  Arguments Req The Req object.
  Return value The HTTP version used for the request is returned as an atom. It is provided for informative purposes only.
Changelog 2.0: Only the version is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:version(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_req.version/</guid>
      <description>Name cowboy_req:version - HTTP version
Description version(Req :: cowboy_req:req()) -&amp;gt; Version :: cowboy:http_version()  Return the HTTP version used for the request.
The version can also be obtained using pattern matching:
#{version := Version} = Req.  Arguments Req The Req object.
  Return value The HTTP version used for the request is returned as an atom. It is provided for informative purposes only.
Changelog 2.0: Only the version is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:version(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_req.version/</guid>
      <description>Name cowboy_req:version - HTTP version
Description version(Req :: cowboy_req:req()) -&amp;gt; Version :: cowboy:http_version()  Return the HTTP version used for the request.
The version can also be obtained using pattern matching:
#{version := Version} = Req.  Arguments Req The Req object.
  Return value The HTTP version used for the request is returned as an atom. It is provided for informative purposes only.
Changelog 2.0: Only the version is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:version(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_req.version/</guid>
      <description>Name cowboy_req:version - HTTP version
Description version(Req :: cowboy_req:req()) -&amp;gt; Version :: cowboy:http_version()  Return the HTTP version used for the request.
The version can also be obtained using pattern matching:
#{version := Version} = Req.  Arguments Req The Req object.
  Return value The HTTP version used for the request is returned as an atom. It is provided for informative purposes only.
Changelog 2.0: Only the version is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_req:version(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_req.version/</guid>
      <description>Name cowboy_req:version - HTTP version
Description version(Req :: cowboy_req:req()) -&amp;gt; Version :: cowboy:http_version()  Return the HTTP version used for the request.
The version can also be obtained using pattern matching:
#{version := Version} = Req.  Arguments Req The Req object.
  Return value The HTTP version used for the request is returned as an atom. It is provided for informative purposes only.
Changelog 2.0: Only the version is returned, it is no longer wrapped in a tuple.</description>
    </item>
    
    <item>
      <title>cowboy_rest(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_rest/</guid>
      <description>Name cowboy_rest - REST handlers
Description The module cowboy_rest implements the HTTP state machine.
Implementing REST handlers is not enough to provide a REST interface; this interface must also follow the REST constraints including HATEOAS (hypermedia as the engine of application state).
Callbacks REST handlers implement the following interface:
init(Req, State) -&amp;gt; {cowboy_rest, Req, State} Callback(Req, State) -&amp;gt; {Result, Req, State} | {stop, Req, State} terminate(Reason, Req, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() State :: any() Reason :: normal | {crash, error | exit | throw, any()} Callback - see below Result - see below Default - see below  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_rest(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_rest/</guid>
      <description>Name cowboy_rest - REST handlers
Description The module cowboy_rest implements the HTTP state machine.
Implementing REST handlers is not enough to provide a REST interface; this interface must also follow the REST constraints including HATEOAS (hypermedia as the engine of application state).
Callbacks REST handlers implement the following interface:
init(Req, State) -&amp;gt; {cowboy_rest, Req, State} Callback(Req, State) -&amp;gt; {Result, Req, State} | {stop, Req, State} | {{switch_handler, Module}, Req, State} | {{switch_handler, Module, Opts}, Req, State} terminate(Reason, Req, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() State :: any() Module :: module() Opts :: any() Reason :: normal | {crash, error | exit | throw, any()} Callback - see below Result - see below Default - see below  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_rest(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_rest/</guid>
      <description>Name cowboy_rest - REST handlers
Description The module cowboy_rest implements the HTTP state machine.
Implementing REST handlers is not enough to provide a REST interface; this interface must also follow the REST constraints including HATEOAS (hypermedia as the engine of application state).
Callbacks REST handlers implement the following interface:
init(Req, State) -&amp;gt; {cowboy_rest, Req, State} Callback(Req, State) -&amp;gt; {Result, Req, State} | {stop, Req, State} | {{switch_handler, Module}, Req, State} | {{switch_handler, Module, Opts}, Req, State} terminate(Reason, Req, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() State :: any() Module :: module() Opts :: any() Reason :: normal | {crash, error | exit | throw, any()} Callback - see below Result - see below Default - see below  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_rest(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_rest/</guid>
      <description>Name cowboy_rest - REST handlers
Description The module cowboy_rest implements the HTTP state machine.
Implementing REST handlers is not enough to provide a REST interface; this interface must also follow the REST constraints including HATEOAS (hypermedia as the engine of application state).
Callbacks REST handlers implement the following interface:
init(Req, State) -&amp;gt; {cowboy_rest, Req, State} Callback(Req, State) -&amp;gt; {Result, Req, State} | {stop, Req, State} | {{switch_handler, Module}, Req, State} | {{switch_handler, Module, Opts}, Req, State} terminate(Reason, Req, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() State :: any() Module :: module() Opts :: any() Reason :: normal | {crash, error | exit | throw, any()} Callback - see below Result - see below Default - see below  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_rest(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_rest/</guid>
      <description>Name cowboy_rest - REST handlers
Description The module cowboy_rest implements the HTTP state machine.
Implementing REST handlers is not enough to provide a REST interface; this interface must also follow the REST constraints including HATEOAS (hypermedia as the engine of application state).
Callbacks REST handlers implement the following interface:
init(Req, State) -&amp;gt; {cowboy_rest, Req, State} Callback(Req, State) -&amp;gt; {Result, Req, State} | {stop, Req, State} | {{switch_handler, Module}, Req, State} | {{switch_handler, Module, Opts}, Req, State} terminate(Reason, Req, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() State :: any() Module :: module() Opts :: any() Reason :: normal | {crash, error | exit | throw, any()} Callback - see below Result - see below Default - see below  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_rest(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_rest/</guid>
      <description>Name cowboy_rest - REST handlers
Description The module cowboy_rest implements the HTTP state machine.
Implementing REST handlers is not enough to provide a REST interface; this interface must also follow the REST constraints including HATEOAS (hypermedia as the engine of application state).
Callbacks REST handlers implement the following interface:
init(Req, State) -&amp;gt; {cowboy_rest, Req, State} Callback(Req, State) -&amp;gt; {Result, Req, State} | {stop, Req, State} | {{switch_handler, Module}, Req, State} | {{switch_handler, Module, Opts}, Req, State} terminate(Reason, Req, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() State :: any() Module :: module() Opts :: any() Reason :: normal | {crash, error | exit | throw, any()} Callback - see below Result - see below Default - see below  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_rest(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_rest/</guid>
      <description>Name cowboy_rest - REST handlers
Description The module cowboy_rest implements the HTTP state machine.
Implementing REST handlers is not enough to provide a REST interface; this interface must also follow the REST constraints including HATEOAS (hypermedia as the engine of application state).
Callbacks REST handlers implement the following interface:
init(Req, State) -&amp;gt; {cowboy_rest, Req, State} Callback(Req, State) -&amp;gt; {Result, Req, State} | {stop, Req, State} | {{switch_handler, Module}, Req, State} | {{switch_handler, Module, Opts}, Req, State} terminate(Reason, Req, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() State :: any() Module :: module() Opts :: any() Reason :: normal | {crash, error | exit | throw, any()} Callback - see below Result - see below Default - see below  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_router(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_router/</guid>
      <description>Name cowboy_router - Router middleware
Description The cowboy_router middleware maps the requested host and path to the handler to be used for processing the request.
The router takes the dispatch rules as input from the middleware environment. Dispatch rules are generated by calling the cowboy_router:compile(3) function.
When a route matches, the router sets the handler and handler_opts middleware environment values containing the handler module and initial state, respectively.
The router will stop execution when no route matches.</description>
    </item>
    
    <item>
      <title>cowboy_router(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_router/</guid>
      <description>Name cowboy_router - Router middleware
Description The cowboy_router middleware maps the requested host and path to the handler to be used for processing the request.
The router takes the dispatch rules as input from the middleware environment. Dispatch rules are generated by calling the cowboy_router:compile(3) function.
When a route matches, the router sets the handler and handler_opts middleware environment values containing the handler module and initial state, respectively.
The router will stop execution when no route matches.</description>
    </item>
    
    <item>
      <title>cowboy_router(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_router/</guid>
      <description>Name cowboy_router - Router middleware
Description The cowboy_router middleware maps the requested host and path to the handler to be used for processing the request.
The router takes the dispatch rules as input from the middleware environment. Dispatch rules are generated by calling the cowboy_router:compile(3) function.
When a route matches, the router sets the handler and handler_opts middleware environment values containing the handler module and initial state, respectively.
The router will stop execution when no route matches.</description>
    </item>
    
    <item>
      <title>cowboy_router(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_router/</guid>
      <description>Name cowboy_router - Router middleware
Description The cowboy_router middleware maps the requested host and path to the handler to be used for processing the request.
The router takes the dispatch rules as input from the middleware environment. Dispatch rules are generated by calling the cowboy_router:compile(3) function.
When a route matches, the router sets the handler and handler_opts middleware environment values containing the handler module and initial state, respectively.
The router will stop execution when no route matches.</description>
    </item>
    
    <item>
      <title>cowboy_router(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_router/</guid>
      <description>Name cowboy_router - Router middleware
Description The cowboy_router middleware maps the requested host and path to the handler to be used for processing the request.
The router takes the dispatch rules as input from the middleware environment. Dispatch rules are generated by calling the cowboy_router:compile(3) function.
When a route matches, the router sets the handler and handler_opts middleware environment values containing the handler module and initial state, respectively.
The router will stop execution when no route matches.</description>
    </item>
    
    <item>
      <title>cowboy_router(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_router/</guid>
      <description>Name cowboy_router - Router middleware
Description The cowboy_router middleware maps the requested host and path to the handler to be used for processing the request.
The router takes the dispatch rules as input from the middleware environment. Dispatch rules are generated by calling the cowboy_router:compile(3) function.
When a route matches, the router sets the handler and handler_opts middleware environment values containing the handler module and initial state, respectively.
The router will stop execution when no route matches.</description>
    </item>
    
    <item>
      <title>cowboy_router(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_router/</guid>
      <description>Name cowboy_router - Router middleware
Description The cowboy_router middleware maps the requested host and path to the handler to be used for processing the request.
The router takes the dispatch rules as input from the middleware environment. Dispatch rules are generated by calling the cowboy_router:compile(3) function.
When a route matches, the router sets the handler and handler_opts middleware environment values containing the handler module and initial state, respectively.
The router will stop execution when no route matches.</description>
    </item>
    
    <item>
      <title>cowboy_router:compile(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_router.compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_router.compile/</guid>
      <description>Name cowboy_router:compile - Compile routes to the resources
Description compile(cowboy_router:routes()) -&amp;gt; cowboy_router:dispatch_rules()  Compile routes to the resources.
Takes a human readable list of routes and transforms it into a form more efficient to process.
Arguments Routes Human readable list of routes.
  Return value An opaque dispatch rules value is returned. This value must be given to Cowboy as a middleware environment value.
Changelog 1.0: Function introduced.   Examples Compile routes and start a listener Dispatch = cowboy_router:compile([ {&#39;_&#39;, [ {&#34;</description>
    </item>
    
    <item>
      <title>cowboy_router:compile(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_router.compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_router.compile/</guid>
      <description>Name cowboy_router:compile - Compile routes to the resources
Description compile(cowboy_router:routes()) -&amp;gt; cowboy_router:dispatch_rules()  Compile routes to the resources.
Takes a human readable list of routes and transforms it into a form more efficient to process.
Arguments Routes Human readable list of routes.
  Return value An opaque dispatch rules value is returned. This value must be given to Cowboy as a middleware environment value.
Changelog 1.0: Function introduced.   Examples Compile routes and start a listener Dispatch = cowboy_router:compile([ {&#39;_&#39;, [ {&#34;</description>
    </item>
    
    <item>
      <title>cowboy_router:compile(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_router.compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_router.compile/</guid>
      <description>Name cowboy_router:compile - Compile routes to the resources
Description compile(cowboy_router:routes()) -&amp;gt; cowboy_router:dispatch_rules()  Compile routes to the resources.
Takes a human readable list of routes and transforms it into a form more efficient to process.
Arguments Routes Human readable list of routes.
  Return value An opaque dispatch rules value is returned. This value must be given to Cowboy as a middleware environment value.
Changelog 1.0: Function introduced.   Examples Compile routes and start a listener Dispatch = cowboy_router:compile([ {&#39;_&#39;, [ {&#34;</description>
    </item>
    
    <item>
      <title>cowboy_router:compile(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_router.compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_router.compile/</guid>
      <description>Name cowboy_router:compile - Compile routes to the resources
Description compile(cowboy_router:routes()) -&amp;gt; cowboy_router:dispatch_rules()  Compile routes to the resources.
Takes a human readable list of routes and transforms it into a form more efficient to process.
Arguments Routes Human readable list of routes.
  Return value An opaque dispatch rules value is returned. This value must be given to Cowboy as a middleware environment value.
Changelog 1.0: Function introduced.   Examples Compile routes and start a listener Dispatch = cowboy_router:compile([ {&#39;_&#39;, [ {&#34;</description>
    </item>
    
    <item>
      <title>cowboy_router:compile(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_router.compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_router.compile/</guid>
      <description>Name cowboy_router:compile - Compile routes to the resources
Description compile(cowboy_router:routes()) -&amp;gt; cowboy_router:dispatch_rules()  Compile routes to the resources.
Takes a human readable list of routes and transforms it into a form more efficient to process.
Arguments Routes Human readable list of routes.
  Return value An opaque dispatch rules value is returned. This value must be given to Cowboy as a middleware environment value.
Changelog 1.0: Function introduced.   Examples Compile routes and start a listener Dispatch = cowboy_router:compile([ {&#39;_&#39;, [ {&#34;</description>
    </item>
    
    <item>
      <title>cowboy_router:compile(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_router.compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_router.compile/</guid>
      <description>Name cowboy_router:compile - Compile routes to the resources
Description compile(cowboy_router:routes()) -&amp;gt; cowboy_router:dispatch_rules()  Compile routes to the resources.
Takes a human readable list of routes and transforms it into a form more efficient to process.
Arguments Routes Human readable list of routes.
  Return value An opaque dispatch rules value is returned. This value must be given to Cowboy as a middleware environment value.
Changelog 1.0: Function introduced.   Examples Compile routes and start a listener Dispatch = cowboy_router:compile([ {&#39;_&#39;, [ {&#34;</description>
    </item>
    
    <item>
      <title>cowboy_router:compile(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_router.compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_router.compile/</guid>
      <description>Name cowboy_router:compile - Compile routes to the resources
Description compile(cowboy_router:routes()) -&amp;gt; cowboy_router:dispatch_rules()  Compile routes to the resources.
Takes a human readable list of routes and transforms it into a form more efficient to process.
Arguments Routes Human readable list of routes.
  Return value An opaque dispatch rules value is returned. This value must be given to Cowboy as a middleware environment value.
Changelog 1.0: Function introduced.   Examples Compile routes and start a listener Dispatch = cowboy_router:compile([ {&#39;_&#39;, [ {&#34;</description>
    </item>
    
    <item>
      <title>cowboy_static(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_static/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_static/</guid>
      <description>Name cowboy_static - Static file handler
Description The module cowboy_static implements file serving capabilities using the REST semantics provided by cowboy_rest.
The static file handler is a pre-written handler coming with Cowboy. To serve files, use it in your routes.
Options opts() :: {priv_file, App, Path} | {priv_file, App, Path, Extra} | {file, Path} | {file, Path, Extra} | {priv_dir, App, Path} | {priv_dir, App, Path, Extra} | {dir, Path} | {dir, Path, Extra} App :: atom() Path :: binary() | string() Extra :: [Etag | Mimetypes] Etag :: {etag, module(), function()} | {etag, false} Mimetypes :: {mimetypes, module(), function()} | {mimetypes, binary() | ParsedMime} ParsedMime :: {Type :: binary(), SubType :: binary(), Params} Params :: [{Key :: binary(), Value :: binary()}]  Static handler configuration.</description>
    </item>
    
    <item>
      <title>cowboy_static(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_static/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_static/</guid>
      <description>Name cowboy_static - Static file handler
Description The module cowboy_static implements file serving capabilities using the REST semantics provided by cowboy_rest.
The static file handler is a pre-written handler coming with Cowboy. To serve files, use it in your routes.
Options opts() :: {priv_file, App, Path} | {priv_file, App, Path, Extra} | {file, Path} | {file, Path, Extra} | {priv_dir, App, Path} | {priv_dir, App, Path, Extra} | {dir, Path} | {dir, Path, Extra} App :: atom() Path :: binary() | string() Extra :: [Etag | Mimetypes] Etag :: {etag, module(), function()} | {etag, false} Mimetypes :: {mimetypes, module(), function()} | {mimetypes, binary() | ParsedMime} ParsedMime :: {Type :: binary(), SubType :: binary(), Params} Params :: [{Key :: binary(), Value :: binary()}]  Static handler configuration.</description>
    </item>
    
    <item>
      <title>cowboy_static(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_static/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_static/</guid>
      <description>Name cowboy_static - Static file handler
Description The module cowboy_static implements file serving capabilities using the REST semantics provided by cowboy_rest.
The static file handler is a pre-written handler coming with Cowboy. To serve files, use it in your routes.
Options opts() :: {priv_file, App, Path} | {priv_file, App, Path, Extra} | {file, Path} | {file, Path, Extra} | {priv_dir, App, Path} | {priv_dir, App, Path, Extra} | {dir, Path} | {dir, Path, Extra} App :: atom() Path :: binary() | string() Extra :: [Etag | Mimetypes] Etag :: {etag, module(), function()} | {etag, false} Mimetypes :: {mimetypes, module(), function()} | {mimetypes, binary() | ParsedMime} ParsedMime :: {Type :: binary(), SubType :: binary(), Params} Params :: [{Key :: binary(), Value :: binary()}]  Static handler configuration.</description>
    </item>
    
    <item>
      <title>cowboy_static(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_static/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_static/</guid>
      <description>Name cowboy_static - Static file handler
Description The module cowboy_static implements file serving capabilities using the REST semantics provided by cowboy_rest.
The static file handler is a pre-written handler coming with Cowboy. To serve files, use it in your routes.
Options opts() :: {priv_file, App, Path} | {priv_file, App, Path, Extra} | {file, Path} | {file, Path, Extra} | {priv_dir, App, Path} | {priv_dir, App, Path, Extra} | {dir, Path} | {dir, Path, Extra} App :: atom() Path :: binary() | string() Extra :: [Etag | Mimetypes] Etag :: {etag, module(), function()} | {etag, false} Mimetypes :: {mimetypes, module(), function()} | {mimetypes, binary() | ParsedMime} ParsedMime :: {Type :: binary(), SubType :: binary(), Params} Params :: [{Key :: binary(), Value :: binary()}]  Static handler configuration.</description>
    </item>
    
    <item>
      <title>cowboy_static(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_static/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_static/</guid>
      <description>Name cowboy_static - Static file handler
Description The module cowboy_static implements file serving capabilities using the REST semantics provided by cowboy_rest.
The static file handler is a pre-written handler coming with Cowboy. To serve files, use it in your routes.
Options opts() :: {priv_file, App, Path} | {priv_file, App, Path, Extra} | {file, Path} | {file, Path, Extra} | {priv_dir, App, Path} | {priv_dir, App, Path, Extra} | {dir, Path} | {dir, Path, Extra} App :: atom() Path :: binary() | string() Extra :: [Etag | Mimetypes] Etag :: {etag, module(), function()} | {etag, false} Mimetypes :: {mimetypes, module(), function()} | {mimetypes, binary() | ParsedMime} ParsedMime :: {Type :: binary(), SubType :: binary(), Params} Params :: [{Key :: binary(), Value :: binary()}]  Static handler configuration.</description>
    </item>
    
    <item>
      <title>cowboy_static(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_static/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_static/</guid>
      <description>Name cowboy_static - Static file handler
Description The module cowboy_static implements file serving capabilities using the REST semantics provided by cowboy_rest.
The static file handler is a pre-written handler coming with Cowboy. To serve files, use it in your routes.
Options opts() :: {priv_file, App, Path} | {priv_file, App, Path, Extra} | {file, Path} | {file, Path, Extra} | {priv_dir, App, Path} | {priv_dir, App, Path, Extra} | {dir, Path} | {dir, Path, Extra} App :: atom() Path :: binary() | string() Extra :: [Etag | Mimetypes] Etag :: {etag, module(), function()} | {etag, false} Mimetypes :: {mimetypes, module(), function()} | {mimetypes, binary() | ParsedMime} ParsedMime :: {Type :: binary(), SubType :: binary(), Params} Params :: [{Key :: binary(), Value :: binary()}]  Static handler configuration.</description>
    </item>
    
    <item>
      <title>cowboy_static(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_static/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_static/</guid>
      <description>Name cowboy_static - Static file handler
Description The module cowboy_static implements file serving capabilities using the REST semantics provided by cowboy_rest.
The static file handler is a pre-written handler coming with Cowboy. To serve files, use it in your routes.
Options opts() :: {priv_file, App, Path} | {priv_file, App, Path, Extra} | {file, Path} | {file, Path, Extra} | {priv_dir, App, Path} | {priv_dir, App, Path, Extra} | {dir, Path} | {dir, Path, Extra} App :: atom() Path :: binary() | string() Extra :: [Charset | Etag | Mimetypes] Charset :: {charset, module(), function()} | {charset, binary()} Etag :: {etag, module(), function()} | {etag, false} Mimetypes :: {mimetypes, module(), function()} | {mimetypes, binary() | ParsedMime} ParsedMime :: {Type :: binary(), SubType :: binary(), Params} Params :: [{Key :: binary(), Value :: binary()}]  Static handler configuration.</description>
    </item>
    
    <item>
      <title>cowboy_stream(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_stream/</guid>
      <description>Name cowboy_handler - Stream handlers
Description The module cowboy_stream defines a callback interface and a protocol for handling HTTP streams.
An HTTP request and its associated response is called a stream. A connection may have many streams. In HTTP/1.1 they are executed sequentially, while in HTTP/2 they are executed concurrently.
Cowboy calls the stream handler for nearly all events related to a stream. Exceptions vary depending on the protocol.
Extra care must be taken when implementing stream handlers to ensure compatibility.</description>
    </item>
    
    <item>
      <title>cowboy_stream(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_stream/</guid>
      <description>Name cowboy_handler - Stream handlers
Description The module cowboy_stream defines a callback interface and a protocol for handling HTTP streams.
An HTTP request and its associated response is called a stream. A connection may have many streams. In HTTP/1.1 they are executed sequentially, while in HTTP/2 they are executed concurrently.
Cowboy calls the stream handler for nearly all events related to a stream. Exceptions vary depending on the protocol.
Extra care must be taken when implementing stream handlers to ensure compatibility.</description>
    </item>
    
    <item>
      <title>cowboy_stream(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_stream/</guid>
      <description>Name cowboy_handler - Stream handlers
Description The module cowboy_stream defines a callback interface and a protocol for handling HTTP streams.
An HTTP request and its associated response is called a stream. A connection may have many streams. In HTTP/1.1 they are executed sequentially, while in HTTP/2 they are executed concurrently.
Cowboy calls the stream handler for nearly all events related to a stream. Exceptions vary depending on the protocol.
Extra care must be taken when implementing stream handlers to ensure compatibility.</description>
    </item>
    
    <item>
      <title>cowboy_stream(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_stream/</guid>
      <description>Name cowboy_handler - Stream handlers
Description The module cowboy_stream defines a callback interface and a protocol for handling HTTP streams.
An HTTP request and its associated response is called a stream. A connection may have many streams. In HTTP/1.1 they are executed sequentially, while in HTTP/2 they are executed concurrently.
Cowboy calls the stream handler for nearly all events related to a stream. Exceptions vary depending on the protocol.
Extra care must be taken when implementing stream handlers to ensure compatibility.</description>
    </item>
    
    <item>
      <title>cowboy_stream(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_stream/</guid>
      <description>Name cowboy_handler - Stream handlers
Description The module cowboy_stream defines a callback interface and a protocol for handling HTTP streams.
An HTTP request and its associated response is called a stream. A connection may have many streams. In HTTP/1.1 they are executed sequentially, while in HTTP/2 they are executed concurrently.
Cowboy calls the stream handler for nearly all events related to a stream. Exceptions vary depending on the protocol.
Extra care must be taken when implementing stream handlers to ensure compatibility.</description>
    </item>
    
    <item>
      <title>cowboy_stream(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_stream/</guid>
      <description>Name cowboy_stream - Stream handlers
Description The module cowboy_stream defines a callback interface and a protocol for handling HTTP streams.
An HTTP request and its associated response is called a stream. A connection may have many streams. In HTTP/1.1 they are executed sequentially, while in HTTP/2 they are executed concurrently.
Cowboy calls the stream handler for nearly all events related to a stream. Exceptions vary depending on the protocol.
Extra care must be taken when implementing stream handlers to ensure compatibility.</description>
    </item>
    
    <item>
      <title>cowboy_stream(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_stream/</guid>
      <description>Name cowboy_stream - Stream handlers
Description The module cowboy_stream defines a callback interface and a protocol for handling HTTP streams.
An HTTP request and its associated response is called a stream. A connection may have many streams. In HTTP/1.1 they are executed sequentially, while in HTTP/2 they are executed concurrently.
Cowboy calls the stream handler for nearly all events related to a stream. Exceptions vary depending on the protocol.
Extra care must be taken when implementing stream handlers to ensure compatibility.</description>
    </item>
    
    <item>
      <title>cowboy_stream_h(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_stream_h/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_stream_h/</guid>
      <description>Name cowboy_stream_h - Default stream handler
Description The module cowboy_stream_h is Cowboy&amp;apos;s default stream handler and defines much of its behavior. It is responsible for managing the request process, sending it the request body and translating its messages into commands that Cowboy understands.
Options opts() :: #{ env =&amp;gt; cowboy_middleware:env(), middlewares =&amp;gt; [module()], shutdown_timeout =&amp;gt; timeout() }  Configuration for the default stream handler.
The default value is given next to the option name:</description>
    </item>
    
    <item>
      <title>cowboy_websocket(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.0/manual/cowboy_websocket/</guid>
      <description>Name cowboy_websocket - Websocket
Description The module cowboy_websocket implements Websocket as a Ranch protocol. It also defines a callback interface for handling Websocket connections.
Callbacks Websocket handlers must implement the following callback interface:
init(Req, State) -&amp;gt; {cowboy_websocket, Req, State} | {cowboy_websocket, Req, State, Opts} websocket_init(State) -&amp;gt; CallResult %% optional websocket_handle(InFrame, State) -&amp;gt; CallResult websocket_info(Info, State) -&amp;gt; CallResult terminate(Reason, PartialReq, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() PartialReq :: map() State :: any() Opts :: cowboy_websocket:opts() InFrame :: {text | binary | ping | pong, binary()} OutFrame :: cow_ws:frame() %% see types below Info :: any() CallResult :: {ok, State} | {ok, State, hibernate} | {reply, OutFrame | [OutFrame], State} | {reply, OutFrame | [OutFrame], State, hibernate} | {stop, State} Reason :: normal | stop | timeout | remote | {remote, cow_ws:close_code(), binary()} | {error, badencoding | badframe | closed | atom()} | {crash, error | exit | throw, any()}  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_websocket(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.1/manual/cowboy_websocket/</guid>
      <description>Name cowboy_websocket - Websocket
Description The module cowboy_websocket implements Websocket as a Ranch protocol. It also defines a callback interface for handling Websocket connections.
Callbacks Websocket handlers must implement the following callback interface:
init(Req, State) -&amp;gt; {cowboy_websocket, Req, State} | {cowboy_websocket, Req, State, Opts} websocket_init(State) -&amp;gt; CallResult %% optional websocket_handle(InFrame, State) -&amp;gt; CallResult websocket_info(Info, State) -&amp;gt; CallResult terminate(Reason, PartialReq, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() PartialReq :: map() State :: any() Opts :: cowboy_websocket:opts() InFrame :: {text | binary | ping | pong, binary()} OutFrame :: cow_ws:frame() %% see types below Info :: any() CallResult :: {ok, State} | {ok, State, hibernate} | {reply, OutFrame | [OutFrame], State} | {reply, OutFrame | [OutFrame], State, hibernate} | {stop, State} Reason :: normal | stop | timeout | remote | {remote, cow_ws:close_code(), binary()} | {error, badencoding | badframe | closed | atom()} | {crash, error | exit | throw, any()}  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_websocket(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.2/manual/cowboy_websocket/</guid>
      <description>Name cowboy_websocket - Websocket
Description The module cowboy_websocket implements Websocket as a Ranch protocol. It also defines a callback interface for handling Websocket connections.
Callbacks Websocket handlers must implement the following callback interface:
init(Req, State) -&amp;gt; {cowboy_websocket, Req, State} | {cowboy_websocket, Req, State, Opts} websocket_init(State) -&amp;gt; CallResult %% optional websocket_handle(InFrame, State) -&amp;gt; CallResult websocket_info(Info, State) -&amp;gt; CallResult terminate(Reason, PartialReq, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() PartialReq :: map() State :: any() Opts :: cowboy_websocket:opts() InFrame :: {text | binary | ping | pong, binary()} OutFrame :: cow_ws:frame() %% see types below Info :: any() CallResult :: {ok, State} | {ok, State, hibernate} | {reply, OutFrame | [OutFrame], State} | {reply, OutFrame | [OutFrame], State, hibernate} | {stop, State} Reason :: normal | stop | timeout | remote | {remote, cow_ws:close_code(), binary()} | {error, badencoding | badframe | closed | atom()} | {crash, error | exit | throw, any()}  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_websocket(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.3/manual/cowboy_websocket/</guid>
      <description>Name cowboy_websocket - Websocket
Description The module cowboy_websocket implements Websocket as a Ranch protocol. It also defines a callback interface for handling Websocket connections.
Callbacks Websocket handlers must implement the following callback interface:
init(Req, State) -&amp;gt; {cowboy_websocket, Req, State} | {cowboy_websocket, Req, State, Opts} websocket_init(State) -&amp;gt; CallResult %% optional websocket_handle(InFrame, State) -&amp;gt; CallResult websocket_info(Info, State) -&amp;gt; CallResult terminate(Reason, PartialReq, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() PartialReq :: map() State :: any() Opts :: cowboy_websocket:opts() InFrame :: {text | binary | ping | pong, binary()} OutFrame :: cow_ws:frame() %% see types below Info :: any() CallResult :: {ok, State} | {ok, State, hibernate} | {reply, OutFrame | [OutFrame], State} | {reply, OutFrame | [OutFrame], State, hibernate} | {stop, State} Reason :: normal | stop | timeout | remote | {remote, cow_ws:close_code(), binary()} | {error, badencoding | badframe | closed | atom()} | {crash, error | exit | throw, any()}  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_websocket(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.4/manual/cowboy_websocket/</guid>
      <description>Name cowboy_websocket - Websocket
Description The module cowboy_websocket implements Websocket as a Ranch protocol. It also defines a callback interface for handling Websocket connections.
Callbacks Websocket handlers must implement the following callback interface:
init(Req, State) -&amp;gt; {cowboy_websocket, Req, State} | {cowboy_websocket, Req, State, Opts} websocket_init(State) -&amp;gt; CallResult %% optional websocket_handle(InFrame, State) -&amp;gt; CallResult websocket_info(Info, State) -&amp;gt; CallResult terminate(Reason, PartialReq, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() PartialReq :: map() State :: any() Opts :: cowboy_websocket:opts() InFrame :: {text | binary | ping | pong, binary()} OutFrame :: cow_ws:frame() %% see types below Info :: any() CallResult :: {ok, State} | {ok, State, hibernate} | {reply, OutFrame | [OutFrame], State} | {reply, OutFrame | [OutFrame], State, hibernate} | {stop, State} Reason :: normal | stop | timeout | remote | {remote, cow_ws:close_code(), binary()} | {error, badencoding | badframe | closed | atom()} | {crash, error | exit | throw, any()}  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_websocket(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_websocket/</guid>
      <description>Name cowboy_websocket - Websocket
Description The module cowboy_websocket implements Websocket as a Ranch protocol. It also defines a callback interface for handling Websocket connections.
Callbacks Websocket handlers must implement the following callback interface:
init(Req, State) -&amp;gt; {cowboy_websocket, Req, State} | {cowboy_websocket, Req, State, Opts} websocket_init(State) -&amp;gt; CallResult %% optional websocket_handle(InFrame, State) -&amp;gt; CallResult websocket_info(Info, State) -&amp;gt; CallResult terminate(Reason, PartialReq, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() PartialReq :: map() State :: any() Opts :: cowboy_websocket:opts() InFrame :: ping | pong | {text | binary | ping | pong, binary()} OutFrame :: cow_ws:frame() %% see types below Info :: any() CallResult :: {ok, State} | {ok, State, hibernate} | {reply, OutFrame | [OutFrame], State} | {reply, OutFrame | [OutFrame], State, hibernate} | {stop, State} Reason :: normal | stop | timeout | remote | {remote, cow_ws:close_code(), binary()} | {error, badencoding | badframe | closed | atom()} | {crash, error | exit | throw, any()}  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>cowboy_websocket(3)</title>
      <link>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/cowboy/2.6/manual/cowboy_websocket/</guid>
      <description>Name cowboy_websocket - Websocket
Description The module cowboy_websocket implements Websocket as a Ranch protocol. It also defines a callback interface for handling Websocket connections.
Callbacks Websocket handlers must implement the following callback interface:
init(Req, State) -&amp;gt; {cowboy_websocket, Req, State} | {cowboy_websocket, Req, State, Opts} websocket_init(State) -&amp;gt; CallResult %% optional websocket_handle(InFrame, State) -&amp;gt; CallResult websocket_info(Info, State) -&amp;gt; CallResult terminate(Reason, PartialReq, State) -&amp;gt; ok %% optional Req :: cowboy_req:req() PartialReq :: map() State :: any() Opts :: cowboy_websocket:opts() InFrame :: ping | pong | {text | binary | ping | pong, binary()} OutFrame :: cow_ws:frame() %% see types below Info :: any() CallResult :: {ok, State} | {ok, State, hibernate} | {reply, OutFrame | [OutFrame], State} | {reply, OutFrame | [OutFrame], State, hibernate} | {stop, State} Reason :: normal | stop | timeout | remote | {remote, cow_ws:close_code(), binary()} | {error, badencoding | badframe | closed | atom()} | {crash, error | exit | throw, any()}  The init/2 callback is common to all handlers.</description>
    </item>
    
    <item>
      <title>gun(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun/</guid>
      <description>Name gun - Asynchronous HTTP client
Description The gun module provides an asynchronous interface for connecting and communicating with Web servers over HTTP, HTTP/2 or Websocket.
Exports Connection:
gun:open(3) - Open a connection to the given host and port  gun:open_unix(3) - Open a connection to the given Unix domain socket   gun:close(3) - Brutally close the connection  gun:info(3) - Obtain information about the connection   Requests:</description>
    </item>
    
    <item>
      <title>gun(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun/</guid>
      <description>Name gun - Asynchronous HTTP client
Description The gun module provides an asynchronous interface for connecting and communicating with Web servers over HTTP, HTTP/2 or Websocket.
Exports Connection:
gun:open(3) - Open a connection to the given host and port  gun:open_unix(3) - Open a connection to the given Unix domain socket   gun:close(3) - Brutally close the connection  gun:info(3) - Obtain information about the connection   Requests:</description>
    </item>
    
    <item>
      <title>gun(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun/</guid>
      <description>Name gun - Asynchronous HTTP client
Description The gun module provides an asynchronous interface for connecting and communicating with Web servers over HTTP, HTTP/2 or Websocket.
Exports Connection:
gun:open(3) - Open a connection to the given host and port  gun:open_unix(3) - Open a connection to the given Unix domain socket   gun:close(3) - Brutally close the connection  gun:info(3) - Obtain information about the connection   Requests:</description>
    </item>
    
    <item>
      <title>gun(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun/</guid>
      <description>Name gun - Asynchronous HTTP client
Description The gun module provides an asynchronous interface for connecting and communicating with Web servers over HTTP, HTTP/2 or Websocket.
Exports Connection:
gun:open(3) - Open a connection to the given host and port  gun:open_unix(3) - Open a connection to the given Unix domain socket   gun:close(3) - Brutally close the connection  gun:info(3) - Obtain information about the connection   Requests:</description>
    </item>
    
    <item>
      <title>gun(7)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun_app/</guid>
      <description>Name gun - HTTP/1.1, HTTP/2 and Websocket client for Erlang/OTP
Description Gun is an HTTP client for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Gun aims to provide an easy to use, asynchronous and always-connected client. It maintains a permanent connection to the server and reconnects automatically when necessary.
Modules gun(3) - Asynchronous HTTP client   Dependencies cowlib(7) - Support library for manipulating Web protocols  ssl - Secure communication over sockets   All these applications must be started before the gun application.</description>
    </item>
    
    <item>
      <title>gun(7)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun_app/</guid>
      <description>Name gun - HTTP/1.1, HTTP/2 and Websocket client for Erlang/OTP
Description Gun is an HTTP client for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Gun aims to provide an easy to use, asynchronous and always-connected client. It maintains a permanent connection to the server and reconnects automatically when necessary.
Modules gun(3) - Asynchronous HTTP client   Dependencies cowlib(7) - Support library for manipulating Web protocols  ssl - Secure communication over sockets   All these applications must be started before the gun application.</description>
    </item>
    
    <item>
      <title>gun(7)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun_app/</guid>
      <description>Name gun - HTTP/1.1, HTTP/2 and Websocket client for Erlang/OTP
Description Gun is an HTTP client for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Gun aims to provide an easy to use, asynchronous and always-connected client. It maintains a permanent connection to the server and reconnects automatically when necessary.
Modules gun(3) - Asynchronous HTTP client   Dependencies cowlib(7) - Support library for manipulating Web protocols  ssl - Secure communication over sockets   All these applications must be started before the gun application.</description>
    </item>
    
    <item>
      <title>gun(7)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun_app/</guid>
      <description>Name gun - HTTP/1.1, HTTP/2 and Websocket client for Erlang/OTP
Description Gun is an HTTP client for Erlang/OTP with support for the HTTP/1.1, HTTP/2 and Websocket protocols.
Gun aims to provide an easy to use, asynchronous and always-connected client. It maintains a permanent connection to the server and reconnects automatically when necessary.
Modules gun(3) - Asynchronous HTTP client   Dependencies cowlib(7) - Support library for manipulating Web protocols  ssl - Secure communication over sockets   All these applications must be started before the gun application.</description>
    </item>
    
    <item>
      <title>gun:await(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.await/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.await/</guid>
      <description>Name gun:await - Wait for a response
Description await(ConnPid, StreamRef) -&amp;gt; await(ConnPid, StreamRef, 5000, MonitorRef) await(ConnPid, StreamRef, MonitorRef) -&amp;gt; await(ConnPid, StreamRef, 5000, MonitorRef) await(ConnPid, StreamRef, Timeout) -&amp;gt; await(ConnPid, StreamRef, Timeout, MonitorRef) await(ConnPid, StreamRef, Timeout, MonitorRef) -&amp;gt; Result ConnPid :: pid() StreamRef :: reference() MonitorRef :: reference() Timeout :: timeout() Result :: tuple() - see below  Wait for a response.
This function waits for a message from the given stream and returns it as a tuple.</description>
    </item>
    
    <item>
      <title>gun:await(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.await/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.await/</guid>
      <description>Name gun:await - Wait for a response
Description await(ConnPid, StreamRef) -&amp;gt; await(ConnPid, StreamRef, 5000, MonitorRef) await(ConnPid, StreamRef, MonitorRef) -&amp;gt; await(ConnPid, StreamRef, 5000, MonitorRef) await(ConnPid, StreamRef, Timeout) -&amp;gt; await(ConnPid, StreamRef, Timeout, MonitorRef) await(ConnPid, StreamRef, Timeout, MonitorRef) -&amp;gt; Result ConnPid :: pid() StreamRef :: reference() MonitorRef :: reference() Timeout :: timeout() Result :: tuple() - see below  Wait for a response.
This function waits for a message from the given stream and returns it as a tuple.</description>
    </item>
    
    <item>
      <title>gun:await(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.await/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.await/</guid>
      <description>Name gun:await - Wait for a response
Description await(ConnPid, StreamRef) -&amp;gt; await(ConnPid, StreamRef, 5000, MonitorRef) await(ConnPid, StreamRef, MonitorRef) -&amp;gt; await(ConnPid, StreamRef, 5000, MonitorRef) await(ConnPid, StreamRef, Timeout) -&amp;gt; await(ConnPid, StreamRef, Timeout, MonitorRef) await(ConnPid, StreamRef, Timeout, MonitorRef) -&amp;gt; Result ConnPid :: pid() StreamRef :: reference() MonitorRef :: reference() Timeout :: timeout() Result :: tuple() - see below  Wait for a response.
This function waits for a message from the given stream and returns it as a tuple.</description>
    </item>
    
    <item>
      <title>gun:await(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.await/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.await/</guid>
      <description>Name gun:await - Wait for a response
Description await(ConnPid, StreamRef) -&amp;gt; await(ConnPid, StreamRef, 5000, MonitorRef) await(ConnPid, StreamRef, MonitorRef) -&amp;gt; await(ConnPid, StreamRef, 5000, MonitorRef) await(ConnPid, StreamRef, Timeout) -&amp;gt; await(ConnPid, StreamRef, Timeout, MonitorRef) await(ConnPid, StreamRef, Timeout, MonitorRef) -&amp;gt; Result ConnPid :: pid() StreamRef :: reference() MonitorRef :: reference() Timeout :: timeout() Result :: tuple() - see below  Wait for a response.
This function waits for a message from the given stream and returns it as a tuple.</description>
    </item>
    
    <item>
      <title>gun:await_body(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.await_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.await_body/</guid>
      <description>Name gun:await_body - Wait for the complete response body
Description await_body(ConnPid, StreamRef) -&amp;gt; await_body(ConnPid, StreamRef, 5000, MonitorRef) await_body(ConnPid, StreamRef, MonitorRef) -&amp;gt; await_body(ConnPid, StreamRef, 5000, MonitorRef) await_body(ConnPid, StreamRef, Timeout) -&amp;gt; await_body(ConnPid, StreamRef, Timeout, MonitorRef) await_body(ConnPid, StreamRef, Timeout, MonitorRef) -&amp;gt; {ok, Body} | {ok, Body, Trailers} | {error, Reason} ConnPid :: pid() StreamRef :: reference() MonitorRef :: reference() Timeout :: timeout() Body :: binary() Trailers :: [{binary(), binary()}] Reason :: timeout | any()  Wait for the complete response body.</description>
    </item>
    
    <item>
      <title>gun:await_body(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.await_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.await_body/</guid>
      <description>Name gun:await_body - Wait for the complete response body
Description await_body(ConnPid, StreamRef) -&amp;gt; await_body(ConnPid, StreamRef, 5000, MonitorRef) await_body(ConnPid, StreamRef, MonitorRef) -&amp;gt; await_body(ConnPid, StreamRef, 5000, MonitorRef) await_body(ConnPid, StreamRef, Timeout) -&amp;gt; await_body(ConnPid, StreamRef, Timeout, MonitorRef) await_body(ConnPid, StreamRef, Timeout, MonitorRef) -&amp;gt; {ok, Body} | {ok, Body, Trailers} | {error, Reason} ConnPid :: pid() StreamRef :: reference() MonitorRef :: reference() Timeout :: timeout() Body :: binary() Trailers :: [{binary(), binary()}] Reason :: timeout | any()  Wait for the complete response body.</description>
    </item>
    
    <item>
      <title>gun:await_body(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.await_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.await_body/</guid>
      <description>Name gun:await_body - Wait for the complete response body
Description await_body(ConnPid, StreamRef) -&amp;gt; await_body(ConnPid, StreamRef, 5000, MonitorRef) await_body(ConnPid, StreamRef, MonitorRef) -&amp;gt; await_body(ConnPid, StreamRef, 5000, MonitorRef) await_body(ConnPid, StreamRef, Timeout) -&amp;gt; await_body(ConnPid, StreamRef, Timeout, MonitorRef) await_body(ConnPid, StreamRef, Timeout, MonitorRef) -&amp;gt; {ok, Body} | {ok, Body, Trailers} | {error, Reason} ConnPid :: pid() StreamRef :: reference() MonitorRef :: reference() Timeout :: timeout() Body :: binary() Trailers :: [{binary(), binary()}] Reason :: timeout | any()  Wait for the complete response body.</description>
    </item>
    
    <item>
      <title>gun:await_body(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.await_body/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.await_body/</guid>
      <description>Name gun:await_body - Wait for the complete response body
Description await_body(ConnPid, StreamRef) -&amp;gt; await_body(ConnPid, StreamRef, 5000, MonitorRef) await_body(ConnPid, StreamRef, MonitorRef) -&amp;gt; await_body(ConnPid, StreamRef, 5000, MonitorRef) await_body(ConnPid, StreamRef, Timeout) -&amp;gt; await_body(ConnPid, StreamRef, Timeout, MonitorRef) await_body(ConnPid, StreamRef, Timeout, MonitorRef) -&amp;gt; {ok, Body} | {ok, Body, Trailers} | {error, Reason} ConnPid :: pid() StreamRef :: reference() MonitorRef :: reference() Timeout :: timeout() Body :: binary() Trailers :: [{binary(), binary()}] Reason :: timeout | any()  Wait for the complete response body.</description>
    </item>
    
    <item>
      <title>gun:await_up(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.await_up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.await_up/</guid>
      <description>Name gun:await_up - Wait for the connection to be up
Description await_up(ConnPid) -&amp;gt; await_up(ConnPid, 5000, MonitorRef) await_up(ConnPid, MonitorRef) -&amp;gt; await_up(ConnPid, 5000, MonitorRef) await_up(ConnPid, Timeout) -&amp;gt; await_up(ConnPid, Timeout, MonitorRef) await_up(ConnPid, Timeout, MonitorRef) -&amp;gt; {ok, Protocol} | {error, Reason} ConnPid :: pid() MonitorRef :: reference() Timeout :: timeout() Protocol :: http | http2 Reason :: timeout | any()  Wait for the connection to be up.
Arguments ConnPid The pid of the Gun connection process.</description>
    </item>
    
    <item>
      <title>gun:await_up(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.await_up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.await_up/</guid>
      <description>Name gun:await_up - Wait for the connection to be up
Description await_up(ConnPid) -&amp;gt; await_up(ConnPid, 5000, MonitorRef) await_up(ConnPid, MonitorRef) -&amp;gt; await_up(ConnPid, 5000, MonitorRef) await_up(ConnPid, Timeout) -&amp;gt; await_up(ConnPid, Timeout, MonitorRef) await_up(ConnPid, Timeout, MonitorRef) -&amp;gt; {ok, Protocol} | {error, Reason} ConnPid :: pid() MonitorRef :: reference() Timeout :: timeout() Protocol :: http | http2 Reason :: timeout | any()  Wait for the connection to be up.
Arguments ConnPid The pid of the Gun connection process.</description>
    </item>
    
    <item>
      <title>gun:await_up(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.await_up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.await_up/</guid>
      <description>Name gun:await_up - Wait for the connection to be up
Description await_up(ConnPid) -&amp;gt; await_up(ConnPid, 5000, MonitorRef) await_up(ConnPid, MonitorRef) -&amp;gt; await_up(ConnPid, 5000, MonitorRef) await_up(ConnPid, Timeout) -&amp;gt; await_up(ConnPid, Timeout, MonitorRef) await_up(ConnPid, Timeout, MonitorRef) -&amp;gt; {ok, Protocol} | {error, Reason} ConnPid :: pid() MonitorRef :: reference() Timeout :: timeout() Protocol :: http | http2 Reason :: timeout | any()  Wait for the connection to be up.
Arguments ConnPid The pid of the Gun connection process.</description>
    </item>
    
    <item>
      <title>gun:await_up(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.await_up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.await_up/</guid>
      <description>Name gun:await_up - Wait for the connection to be up
Description await_up(ConnPid) -&amp;gt; await_up(ConnPid, 5000, MonitorRef) await_up(ConnPid, MonitorRef) -&amp;gt; await_up(ConnPid, 5000, MonitorRef) await_up(ConnPid, Timeout) -&amp;gt; await_up(ConnPid, Timeout, MonitorRef) await_up(ConnPid, Timeout, MonitorRef) -&amp;gt; {ok, Protocol} | {error, Reason} ConnPid :: pid() MonitorRef :: reference() Timeout :: timeout() Protocol :: http | http2 Reason :: timeout | any()  Wait for the connection to be up.
Arguments ConnPid The pid of the Gun connection process.</description>
    </item>
    
    <item>
      <title>gun:cancel(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.cancel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.cancel/</guid>
      <description>Name gun:cancel - Cancel the given stream
Description cancel(ConnPid, StreamRef) -&amp;gt; ok ConnPid :: pid() StreamRef :: reference()  Cancel the given stream.
The behavior of this function depends on the protocol selected.
HTTP/1.1 does not support this feature. Gun will simply silence the stream and stop relaying messages. Gun may also decide to close the connection if the response body is too large, to avoid wasting time and bandwidth.</description>
    </item>
    
    <item>
      <title>gun:cancel(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.cancel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.cancel/</guid>
      <description>Name gun:cancel - Cancel the given stream
Description cancel(ConnPid, StreamRef) -&amp;gt; ok ConnPid :: pid() StreamRef :: reference()  Cancel the given stream.
The behavior of this function depends on the protocol selected.
HTTP/1.1 does not support this feature. Gun will simply silence the stream and stop relaying messages. Gun may also decide to close the connection if the response body is too large, to avoid wasting time and bandwidth.</description>
    </item>
    
    <item>
      <title>gun:cancel(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.cancel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.cancel/</guid>
      <description>Name gun:cancel - Cancel the given stream
Description cancel(ConnPid, StreamRef) -&amp;gt; ok ConnPid :: pid() StreamRef :: reference()  Cancel the given stream.
The behavior of this function depends on the protocol selected.
HTTP/1.1 does not support this feature. Gun will simply silence the stream and stop relaying messages. Gun may also decide to close the connection if the response body is too large, to avoid wasting time and bandwidth.</description>
    </item>
    
    <item>
      <title>gun:cancel(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.cancel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.cancel/</guid>
      <description>Name gun:cancel - Cancel the given stream
Description cancel(ConnPid, StreamRef) -&amp;gt; ok ConnPid :: pid() StreamRef :: reference()  Cancel the given stream.
The behavior of this function depends on the protocol selected.
HTTP/1.1 does not support this feature. Gun will simply silence the stream and stop relaying messages. Gun may also decide to close the connection if the response body is too large, to avoid wasting time and bandwidth.</description>
    </item>
    
    <item>
      <title>gun:close(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.close/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.close/</guid>
      <description>Name gun:close - Brutally close the connection
Description close(ConnPid) -&amp;gt; ok ConnPid :: pid()  Brutally close the connection.
Arguments ConnPid The pid of the Gun connection process.
  Return value The atom ok is returned.
Changelog 1.0: Function introduced.   Examples Close the connection ok = gun:close(ConnPid).  See also gun(3), gun:open(3), gun:open_unix(3)</description>
    </item>
    
    <item>
      <title>gun:close(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.close/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.close/</guid>
      <description>Name gun:close - Brutally close the connection
Description close(ConnPid) -&amp;gt; ok ConnPid :: pid()  Brutally close the connection.
Arguments ConnPid The pid of the Gun connection process.
  Return value The atom ok is returned.
Changelog 1.0: Function introduced.   Examples Close the connection ok = gun:close(ConnPid).  See also gun(3), gun:open(3), gun:open_unix(3)</description>
    </item>
    
    <item>
      <title>gun:close(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.close/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.close/</guid>
      <description>Name gun:close - Brutally close the connection
Description close(ConnPid) -&amp;gt; ok ConnPid :: pid()  Brutally close the connection.
Arguments ConnPid The pid of the Gun connection process.
  Return value The atom ok is returned.
Changelog 1.0: Function introduced.   Examples Close the connection ok = gun:close(ConnPid).  See also gun(3), gun:open(3), gun:open_unix(3)</description>
    </item>
    
    <item>
      <title>gun:close(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.close/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.close/</guid>
      <description>Name gun:close - Brutally close the connection
Description close(ConnPid) -&amp;gt; ok ConnPid :: pid()  Brutally close the connection.
Arguments ConnPid The pid of the Gun connection process.
  Return value The atom ok is returned.
Changelog 1.0: Function introduced.   Examples Close the connection ok = gun:close(ConnPid).  See also gun(3), gun:open(3), gun:open_unix(3)</description>
    </item>
    
    <item>
      <title>gun:connect(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.connect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.connect/</guid>
      <description>Name gun:connect - Establish a tunnel to the origin server
Description connect(ConnPid, Destination) -&amp;gt; connect(ConnPid, Destination, [], #{}). connect(ConnPid, Destination, Headers) -&amp;gt; connect(ConnPid, Destination, Headers, #{}). connect(ConnPid, Destination, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Destination :: gun:connect_destination() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Establish a tunnel to the origin server.
This feature is currently only available for HTTP/1.1 connections. Upon successful completion of the CONNECT request a tunnel is established and subsequent requests will go through the tunnel.</description>
    </item>
    
    <item>
      <title>gun:connect(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.connect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.connect/</guid>
      <description>Name gun:connect - Establish a tunnel to the origin server
Description connect(ConnPid, Destination) -&amp;gt; connect(ConnPid, Destination, [], #{}). connect(ConnPid, Destination, Headers) -&amp;gt; connect(ConnPid, Destination, Headers, #{}). connect(ConnPid, Destination, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Destination :: gun:connect_destination() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Establish a tunnel to the origin server.
This feature is currently only available for HTTP/1.1 connections. Upon successful completion of the CONNECT request a tunnel is established and subsequent requests will go through the tunnel.</description>
    </item>
    
    <item>
      <title>gun:data(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.data/</guid>
      <description>Name gun:data - Stream the body of a request
Description data(ConnPid, StreamRef, IsFin, Data) -&amp;gt; ok ConnPid :: pid() StreamRef :: reference() IsFin :: fin | nofin Data :: iodata()  Stream the body of a request.
This function can only be used if the original request had headers indicating that a body would be streamed.
All calls to this function must use the nofin flag except for the last which must use fin to indicate the end of the request body.</description>
    </item>
    
    <item>
      <title>gun:data(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.data/</guid>
      <description>Name gun:data - Stream the body of a request
Description data(ConnPid, StreamRef, IsFin, Data) -&amp;gt; ok ConnPid :: pid() StreamRef :: reference() IsFin :: fin | nofin Data :: iodata()  Stream the body of a request.
This function can only be used if the original request had headers indicating that a body would be streamed.
All calls to this function must use the nofin flag except for the last which must use fin to indicate the end of the request body.</description>
    </item>
    
    <item>
      <title>gun:data(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.data/</guid>
      <description>Name gun:data - Stream the body of a request
Description data(ConnPid, StreamRef, IsFin, Data) -&amp;gt; ok ConnPid :: pid() StreamRef :: reference() IsFin :: fin | nofin Data :: iodata()  Stream the body of a request.
This function can only be used if the original request had headers indicating that a body would be streamed.
All calls to this function must use the nofin flag except for the last which must use fin to indicate the end of the request body.</description>
    </item>
    
    <item>
      <title>gun:data(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.data/</guid>
      <description>Name gun:data - Stream the body of a request
Description data(ConnPid, StreamRef, IsFin, Data) -&amp;gt; ok ConnPid :: pid() StreamRef :: reference() IsFin :: fin | nofin Data :: iodata()  Stream the body of a request.
This function can only be used if the original request had headers indicating that a body would be streamed.
All calls to this function must use the nofin flag except for the last which must use fin to indicate the end of the request body.</description>
    </item>
    
    <item>
      <title>gun:delete(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.delete/</guid>
      <description>Name gun:delete - Delete a resource
Description delete(ConnPid, Path) -&amp;gt; delete(ConnPid, Path, [], #{}). delete(ConnPid, Path, Headers) -&amp;gt; delete(ConnPid, Path, Headers, #{}) delete(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Delete a resource.
Arguments ConnPid The pid of the Gun connection process.
 Path Path to the resource.
 Headers Additional request headers.
 ReqOpts Request options.</description>
    </item>
    
    <item>
      <title>gun:delete(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.delete/</guid>
      <description>Name gun:delete - Delete a resource
Description delete(ConnPid, Path) -&amp;gt; delete(ConnPid, Path, [], #{}). delete(ConnPid, Path, Headers) -&amp;gt; delete(ConnPid, Path, Headers, #{}) delete(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Delete a resource.
Arguments ConnPid The pid of the Gun connection process.
 Path Path to the resource.
 Headers Additional request headers.
 ReqOpts Request options.</description>
    </item>
    
    <item>
      <title>gun:delete(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.delete/</guid>
      <description>Name gun:delete - Delete a resource
Description delete(ConnPid, Path) -&amp;gt; delete(ConnPid, Path, [], #{}). delete(ConnPid, Path, Headers) -&amp;gt; delete(ConnPid, Path, Headers, #{}) delete(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Delete a resource.
Arguments ConnPid The pid of the Gun connection process.
 Path Path to the resource.
 Headers Additional request headers.
 ReqOpts Request options.</description>
    </item>
    
    <item>
      <title>gun:delete(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.delete/</guid>
      <description>Name gun:delete - Delete a resource
Description delete(ConnPid, Path) -&amp;gt; delete(ConnPid, Path, [], #{}). delete(ConnPid, Path, Headers) -&amp;gt; delete(ConnPid, Path, Headers, #{}) delete(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Delete a resource.
Arguments ConnPid The pid of the Gun connection process.
 Path Path to the resource.
 Headers Additional request headers.
 ReqOpts Request options.</description>
    </item>
    
    <item>
      <title>gun:flush(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.flush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.flush/</guid>
      <description>Name gun:flush - Flush all messages related to a connection or a stream
Description flush(ConnPid) -&amp;gt; ok flush(StreamRef) -&amp;gt; ok ConnPid :: pid() StreamRef :: reference()  Flush all messages related to a connection or a stream.
Arguments Either of these arguments may be provided:
ConnPid The pid of the Gun connection process.
 StreamRef Identifier of the stream for the original request.
  Return value The atom ok is returned.</description>
    </item>
    
    <item>
      <title>gun:flush(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.flush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.flush/</guid>
      <description>Name gun:flush - Flush all messages related to a connection or a stream
Description flush(ConnPid) -&amp;gt; ok flush(StreamRef) -&amp;gt; ok ConnPid :: pid() StreamRef :: reference()  Flush all messages related to a connection or a stream.
Arguments Either of these arguments may be provided:
ConnPid The pid of the Gun connection process.
 StreamRef Identifier of the stream for the original request.
  Return value The atom ok is returned.</description>
    </item>
    
    <item>
      <title>gun:flush(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.flush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.flush/</guid>
      <description>Name gun:flush - Flush all messages related to a connection or a stream
Description flush(ConnPid) -&amp;gt; ok flush(StreamRef) -&amp;gt; ok ConnPid :: pid() StreamRef :: reference()  Flush all messages related to a connection or a stream.
Arguments Either of these arguments may be provided:
ConnPid The pid of the Gun connection process.
 StreamRef Identifier of the stream for the original request.
  Return value The atom ok is returned.</description>
    </item>
    
    <item>
      <title>gun:flush(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.flush/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.flush/</guid>
      <description>Name gun:flush - Flush all messages related to a connection or a stream
Description flush(ConnPid) -&amp;gt; ok flush(StreamRef) -&amp;gt; ok ConnPid :: pid() StreamRef :: reference()  Flush all messages related to a connection or a stream.
Arguments Either of these arguments may be provided:
ConnPid The pid of the Gun connection process.
 StreamRef Identifier of the stream for the original request.
  Return value The atom ok is returned.</description>
    </item>
    
    <item>
      <title>gun:get(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.get/</guid>
      <description>Name gun:get - Get a resource representation
Description get(ConnPid, Path) -&amp;gt; get(ConnPid, Path, [], #{}). get(ConnPid, Path, Headers) -&amp;gt; get(ConnPid, Path, Headers, #{}) get(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Get a resource representation.
Arguments ConnPid The pid of the Gun connection process.
 Path Path to the resource.
 Headers Additional request headers.</description>
    </item>
    
    <item>
      <title>gun:get(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.get/</guid>
      <description>Name gun:get - Get a resource representation
Description get(ConnPid, Path) -&amp;gt; get(ConnPid, Path, [], #{}). get(ConnPid, Path, Headers) -&amp;gt; get(ConnPid, Path, Headers, #{}) get(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Get a resource representation.
Arguments ConnPid The pid of the Gun connection process.
 Path Path to the resource.
 Headers Additional request headers.</description>
    </item>
    
    <item>
      <title>gun:get(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.get/</guid>
      <description>Name gun:get - Get a resource representation
Description get(ConnPid, Path) -&amp;gt; get(ConnPid, Path, [], #{}). get(ConnPid, Path, Headers) -&amp;gt; get(ConnPid, Path, Headers, #{}) get(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Get a resource representation.
Arguments ConnPid The pid of the Gun connection process.
 Path Path to the resource.
 Headers Additional request headers.</description>
    </item>
    
    <item>
      <title>gun:get(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.get/</guid>
      <description>Name gun:get - Get a resource representation
Description get(ConnPid, Path) -&amp;gt; get(ConnPid, Path, [], #{}). get(ConnPid, Path, Headers) -&amp;gt; get(ConnPid, Path, Headers, #{}) get(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Get a resource representation.
Arguments ConnPid The pid of the Gun connection process.
 Path Path to the resource.
 Headers Additional request headers.</description>
    </item>
    
    <item>
      <title>gun:head(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.head/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.head/</guid>
      <description>Name gun:head - Get headers of a resource representation
Description head(ConnPid, Path) -&amp;gt; head(ConnPid, Path, [], #{}). head(ConnPid, Path, Headers) -&amp;gt; head(ConnPid, Path, Headers, #{}) head(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Get headers of a resource representation.
This function performs the same operation as gun:get(3), except the server will not send the resource representation, only the response&amp;apos;s status code and headers.</description>
    </item>
    
    <item>
      <title>gun:head(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.head/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.head/</guid>
      <description>Name gun:head - Get headers of a resource representation
Description head(ConnPid, Path) -&amp;gt; head(ConnPid, Path, [], #{}). head(ConnPid, Path, Headers) -&amp;gt; head(ConnPid, Path, Headers, #{}) head(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Get headers of a resource representation.
This function performs the same operation as gun:get(3), except the server will not send the resource representation, only the response&amp;apos;s status code and headers.</description>
    </item>
    
    <item>
      <title>gun:head(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.head/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.head/</guid>
      <description>Name gun:head - Get headers of a resource representation
Description head(ConnPid, Path) -&amp;gt; head(ConnPid, Path, [], #{}). head(ConnPid, Path, Headers) -&amp;gt; head(ConnPid, Path, Headers, #{}) head(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Get headers of a resource representation.
This function performs the same operation as gun:get(3), except the server will not send the resource representation, only the response&amp;apos;s status code and headers.</description>
    </item>
    
    <item>
      <title>gun:head(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.head/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.head/</guid>
      <description>Name gun:head - Get headers of a resource representation
Description head(ConnPid, Path) -&amp;gt; head(ConnPid, Path, [], #{}). head(ConnPid, Path, Headers) -&amp;gt; head(ConnPid, Path, Headers, #{}) head(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Get headers of a resource representation.
This function performs the same operation as gun:get(3), except the server will not send the resource representation, only the response&amp;apos;s status code and headers.</description>
    </item>
    
    <item>
      <title>gun:info(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.info/</guid>
      <description>Name gun:info - Obtain information about the connection
Description info(ConnPid) -&amp;gt; Info ConnPid :: pid() Info :: #{ sock_ip =&amp;gt; inet:ip_address(), sock_port =&amp;gt; inet:port_number() }  Obtain information about the connection.
Arguments ConnPid The pid of the Gun connection process.
  Return value A map is returned containing various informations about the connection.
Changelog 1.0: Function introduced.   Examples Obtain information about the connection Info = gun:info(ConnPid).  See also gun(3), gun:open(3), gun:open_unix(3)</description>
    </item>
    
    <item>
      <title>gun:info(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.info/</guid>
      <description>Name gun:info - Obtain information about the connection
Description info(ConnPid) -&amp;gt; Info ConnPid :: pid() Info :: #{ sock_ip =&amp;gt; inet:ip_address(), sock_port =&amp;gt; inet:port_number() }  Obtain information about the connection.
Arguments ConnPid The pid of the Gun connection process.
  Return value A map is returned containing various informations about the connection.
Changelog 1.0: Function introduced.   Examples Obtain information about the connection Info = gun:info(ConnPid).  See also gun(3), gun:open(3), gun:open_unix(3)</description>
    </item>
    
    <item>
      <title>gun:info(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.info/</guid>
      <description>Name gun:info - Obtain information about the connection
Description info(ConnPid) -&amp;gt; Info ConnPid :: pid() Info :: #{ sock_ip =&amp;gt; inet:ip_address(), sock_port =&amp;gt; inet:port_number() }  Obtain information about the connection.
Arguments ConnPid The pid of the Gun connection process.
  Return value A map is returned containing various informations about the connection.
Changelog 1.0: Function introduced.   Examples Obtain information about the connection Info = gun:info(ConnPid).  See also gun(3), gun:open(3), gun:open_unix(3)</description>
    </item>
    
    <item>
      <title>gun:info(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.info/</guid>
      <description>Name gun:info - Obtain information about the connection
Description info(ConnPid) -&amp;gt; Info ConnPid :: pid() Info :: #{ socket =&amp;gt; inet:socket() | ssl:sslsocket(), transport =&amp;gt; tcp | tls, protocol =&amp;gt; http | http2 | ws, sock_ip =&amp;gt; inet:ip_address(), sock_port =&amp;gt; inet:port_number(), origin_host =&amp;gt; inet:hostname() | inet:ip_address(), origin_port =&amp;gt; inet:port_number(), intermediaries =&amp;gt; [Intermediary] } Intermediary :: #{ type =&amp;gt; connect, host =&amp;gt; inet:hostname() | inet:ip_address(), port =&amp;gt; inet:port_number(), transport =&amp;gt; tcp | tls, protocol =&amp;gt; http | http2 }  Obtain information about the connection.</description>
    </item>
    
    <item>
      <title>gun:open(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.open/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.open/</guid>
      <description>Name gun:open - Open a connection to the given host and port
Description open(Host, Port) -&amp;gt; open(Host, Port, #{}) open(Host, Port, Opts) -&amp;gt; {ok, pid()} | {error, any()} Host :: inet:hostname() | inet:ip_address() Port :: inet:port_number() Opts :: gun:opts()  Open a connection to the given host and port.
Arguments Host Host or IP address to connect to.
 Port Port to connect to.
 Opts Options for this connection.</description>
    </item>
    
    <item>
      <title>gun:open(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.open/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.open/</guid>
      <description>Name gun:open - Open a connection to the given host and port
Description open(Host, Port) -&amp;gt; open(Host, Port, #{}) open(Host, Port, Opts) -&amp;gt; {ok, pid()} | {error, any()} Host :: inet:hostname() | inet:ip_address() Port :: inet:port_number() Opts :: gun:opts()  Open a connection to the given host and port.
Arguments Host Host or IP address to connect to.
 Port Port to connect to.
 Opts Options for this connection.</description>
    </item>
    
    <item>
      <title>gun:open(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.open/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.open/</guid>
      <description>Name gun:open - Open a connection to the given host and port
Description open(Host, Port) -&amp;gt; open(Host, Port, #{}) open(Host, Port, Opts) -&amp;gt; {ok, pid()} | {error, any()} Host :: inet:hostname() | inet:ip_address() Port :: inet:port_number() Opts :: gun:opts()  Open a connection to the given host and port.
Arguments Host Host or IP address to connect to.
 Port Port to connect to.
 Opts Options for this connection.</description>
    </item>
    
    <item>
      <title>gun:open(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.open/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.open/</guid>
      <description>Name gun:open - Open a connection to the given host and port
Description open(Host, Port) -&amp;gt; open(Host, Port, #{}) open(Host, Port, Opts) -&amp;gt; {ok, pid()} | {error, any()} Host :: inet:hostname() | inet:ip_address() Port :: inet:port_number() Opts :: gun:opts()  Open a connection to the given host and port.
Arguments Host Host or IP address to connect to.
 Port Port to connect to.
 Opts Options for this connection.</description>
    </item>
    
    <item>
      <title>gun:open_unix(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.open_unix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.open_unix/</guid>
      <description>Name gun:open_unix - Open a connection to the given Unix domain socket
Description open_unix(SocketPath, Opts) -&amp;gt; {ok, pid()} | {error, any()} SocketPath :: string() Opts :: gun:opts()  Open a connection to the given Unix domain socket.
Arguments SocketPath Path to the Unix domain socket to connect to.
 Opts Options for this connection.
  Return value The pid of the newly created Gun process is returned. Note that this does not indicate that the connection has been successfully opened; the gun_up(3) message will be sent for that.</description>
    </item>
    
    <item>
      <title>gun:open_unix(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.open_unix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.open_unix/</guid>
      <description>Name gun:open_unix - Open a connection to the given Unix domain socket
Description open_unix(SocketPath, Opts) -&amp;gt; {ok, pid()} | {error, any()} SocketPath :: string() Opts :: gun:opts()  Open a connection to the given Unix domain socket.
Arguments SocketPath Path to the Unix domain socket to connect to.
 Opts Options for this connection.
  Return value The pid of the newly created Gun process is returned. Note that this does not indicate that the connection has been successfully opened; the gun_up(3) message will be sent for that.</description>
    </item>
    
    <item>
      <title>gun:open_unix(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.open_unix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.open_unix/</guid>
      <description>Name gun:open_unix - Open a connection to the given Unix domain socket
Description open_unix(SocketPath, Opts) -&amp;gt; {ok, pid()} | {error, any()} SocketPath :: string() Opts :: gun:opts()  Open a connection to the given Unix domain socket.
Arguments SocketPath Path to the Unix domain socket to connect to.
 Opts Options for this connection.
  Return value The pid of the newly created Gun process is returned. Note that this does not indicate that the connection has been successfully opened; the gun_up(3) message will be sent for that.</description>
    </item>
    
    <item>
      <title>gun:open_unix(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.open_unix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.open_unix/</guid>
      <description>Name gun:open_unix - Open a connection to the given Unix domain socket
Description open_unix(SocketPath, Opts) -&amp;gt; {ok, pid()} | {error, any()} SocketPath :: string() Opts :: gun:opts()  Open a connection to the given Unix domain socket.
Arguments SocketPath Path to the Unix domain socket to connect to.
 Opts Options for this connection.
  Return value The pid of the newly created Gun process is returned. Note that this does not indicate that the connection has been successfully opened; the gun_up(3) message will be sent for that.</description>
    </item>
    
    <item>
      <title>gun:options(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.options/</guid>
      <description>Name gun:options - Query the capabilities of the server or a resource
Description options(ConnPid, Path) -&amp;gt; options(ConnPid, Path, [], #{}). options(ConnPid, Path, Headers) -&amp;gt; options(ConnPid, Path, Headers, #{}) options(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Query the capabilities of the server or a resource.
The special path &amp;quot;*&amp;quot; can be used to obtain information about the server as a whole.</description>
    </item>
    
    <item>
      <title>gun:options(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.options/</guid>
      <description>Name gun:options - Query the capabilities of the server or a resource
Description options(ConnPid, Path) -&amp;gt; options(ConnPid, Path, [], #{}). options(ConnPid, Path, Headers) -&amp;gt; options(ConnPid, Path, Headers, #{}) options(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Query the capabilities of the server or a resource.
The special path &amp;quot;*&amp;quot; can be used to obtain information about the server as a whole.</description>
    </item>
    
    <item>
      <title>gun:options(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.options/</guid>
      <description>Name gun:options - Query the capabilities of the server or a resource
Description options(ConnPid, Path) -&amp;gt; options(ConnPid, Path, [], #{}). options(ConnPid, Path, Headers) -&amp;gt; options(ConnPid, Path, Headers, #{}) options(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Query the capabilities of the server or a resource.
The special path &amp;quot;*&amp;quot; can be used to obtain information about the server as a whole.</description>
    </item>
    
    <item>
      <title>gun:options(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.options/</guid>
      <description>Name gun:options - Query the capabilities of the server or a resource
Description options(ConnPid, Path) -&amp;gt; options(ConnPid, Path, [], #{}). options(ConnPid, Path, Headers) -&amp;gt; options(ConnPid, Path, Headers, #{}) options(ConnPid, Path, Headers, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] ReqOpts :: gun:req_opts() StreamRef :: reference()  Query the capabilities of the server or a resource.
The special path &amp;quot;*&amp;quot; can be used to obtain information about the server as a whole.</description>
    </item>
    
    <item>
      <title>gun:patch(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.patch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.patch/</guid>
      <description>Name gun:patch - Apply a set of changes to a resource
Description patch(ConnPid, Path, Headers) -&amp;gt; StreamRef patch(ConnPid, Path, Headers, Body) -&amp;gt; patch(ConnPid, Path, Headers, Body, #{}) patch(ConnPid, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Apply a set of changes to a resource.
The behavior of this function varies depending on whether a body is provided.</description>
    </item>
    
    <item>
      <title>gun:patch(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.patch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.patch/</guid>
      <description>Name gun:patch - Apply a set of changes to a resource
Description patch(ConnPid, Path, Headers) -&amp;gt; StreamRef patch(ConnPid, Path, Headers, Body) -&amp;gt; patch(ConnPid, Path, Headers, Body, #{}) patch(ConnPid, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Apply a set of changes to a resource.
The behavior of this function varies depending on whether a body is provided.</description>
    </item>
    
    <item>
      <title>gun:patch(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.patch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.patch/</guid>
      <description>Name gun:patch - Apply a set of changes to a resource
Description patch(ConnPid, Path, Headers) -&amp;gt; StreamRef patch(ConnPid, Path, Headers, Body) -&amp;gt; patch(ConnPid, Path, Headers, Body, #{}) patch(ConnPid, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Apply a set of changes to a resource.
The behavior of this function varies depending on whether a body is provided.</description>
    </item>
    
    <item>
      <title>gun:patch(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.patch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.patch/</guid>
      <description>Name gun:patch - Apply a set of changes to a resource
Description patch(ConnPid, Path, Headers) -&amp;gt; StreamRef patch(ConnPid, Path, Headers, Body) -&amp;gt; patch(ConnPid, Path, Headers, Body, #{}) patch(ConnPid, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Apply a set of changes to a resource.
The behavior of this function varies depending on whether a body is provided.</description>
    </item>
    
    <item>
      <title>gun:post(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.post/</guid>
      <description>Name gun:post - Process the enclosed representation according to a resource&amp;apos;s own semantics
Description post(ConnPid, Path, Headers) -&amp;gt; StreamRef post(ConnPid, Path, Headers, Body) -&amp;gt; post(ConnPid, Path, Headers, Body, #{}) post(ConnPid, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Process the enclosed representation according to a resource&amp;apos;s own semantics.
The behavior of this function varies depending on whether a body is provided.</description>
    </item>
    
    <item>
      <title>gun:post(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.post/</guid>
      <description>Name gun:post - Process the enclosed representation according to a resource&amp;apos;s own semantics
Description post(ConnPid, Path, Headers) -&amp;gt; StreamRef post(ConnPid, Path, Headers, Body) -&amp;gt; post(ConnPid, Path, Headers, Body, #{}) post(ConnPid, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Process the enclosed representation according to a resource&amp;apos;s own semantics.
The behavior of this function varies depending on whether a body is provided.</description>
    </item>
    
    <item>
      <title>gun:post(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.post/</guid>
      <description>Name gun:post - Process the enclosed representation according to a resource&amp;apos;s own semantics
Description post(ConnPid, Path, Headers) -&amp;gt; StreamRef post(ConnPid, Path, Headers, Body) -&amp;gt; post(ConnPid, Path, Headers, Body, #{}) post(ConnPid, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Process the enclosed representation according to a resource&amp;apos;s own semantics.
The behavior of this function varies depending on whether a body is provided.</description>
    </item>
    
    <item>
      <title>gun:post(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.post/</guid>
      <description>Name gun:post - Process the enclosed representation according to a resource&amp;apos;s own semantics
Description post(ConnPid, Path, Headers) -&amp;gt; StreamRef post(ConnPid, Path, Headers, Body) -&amp;gt; post(ConnPid, Path, Headers, Body, #{}) post(ConnPid, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Process the enclosed representation according to a resource&amp;apos;s own semantics.
The behavior of this function varies depending on whether a body is provided.</description>
    </item>
    
    <item>
      <title>gun:put(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.put/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.put/</guid>
      <description>Name gun:put - Create or replace a resource
Description put(ConnPid, Path, Headers) -&amp;gt; StreamRef put(ConnPid, Path, Headers, Body) -&amp;gt; put(ConnPid, Path, Headers, Body, #{}) put(ConnPid, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Create or replace a resource.
The behavior of this function varies depending on whether a body is provided.
The function put/3 expects either a content-length or content-type header to indicate that a body will be sent afterwards.</description>
    </item>
    
    <item>
      <title>gun:put(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.put/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.put/</guid>
      <description>Name gun:put - Create or replace a resource
Description put(ConnPid, Path, Headers) -&amp;gt; StreamRef put(ConnPid, Path, Headers, Body) -&amp;gt; put(ConnPid, Path, Headers, Body, #{}) put(ConnPid, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Create or replace a resource.
The behavior of this function varies depending on whether a body is provided.
The function put/3 expects either a content-length or content-type header to indicate that a body will be sent afterwards.</description>
    </item>
    
    <item>
      <title>gun:put(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.put/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.put/</guid>
      <description>Name gun:put - Create or replace a resource
Description put(ConnPid, Path, Headers) -&amp;gt; StreamRef put(ConnPid, Path, Headers, Body) -&amp;gt; put(ConnPid, Path, Headers, Body, #{}) put(ConnPid, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Create or replace a resource.
The behavior of this function varies depending on whether a body is provided.
The function put/3 expects either a content-length or content-type header to indicate that a body will be sent afterwards.</description>
    </item>
    
    <item>
      <title>gun:put(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.put/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.put/</guid>
      <description>Name gun:put - Create or replace a resource
Description put(ConnPid, Path, Headers) -&amp;gt; StreamRef put(ConnPid, Path, Headers, Body) -&amp;gt; put(ConnPid, Path, Headers, Body, #{}) put(ConnPid, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Create or replace a resource.
The behavior of this function varies depending on whether a body is provided.
The function put/3 expects either a content-length or content-type header to indicate that a body will be sent afterwards.</description>
    </item>
    
    <item>
      <title>gun:request(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.request/</guid>
      <description>Name gun:request - Perform the given request
Description request(ConnPid, Method, Path, Headers) -&amp;gt; StreamRef request(ConnPid, Method, Path, Headers, Body) -&amp;gt; request(ConnPid, Method, Path, Headers, Body, #{}) request(ConnPid, Method, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Method :: binary() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Perform the given request.
This is a general purpose function that should only be used when other method-specific functions do not apply.</description>
    </item>
    
    <item>
      <title>gun:request(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.request/</guid>
      <description>Name gun:request - Perform the given request
Description request(ConnPid, Method, Path, Headers) -&amp;gt; StreamRef request(ConnPid, Method, Path, Headers, Body) -&amp;gt; request(ConnPid, Method, Path, Headers, Body, #{}) request(ConnPid, Method, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Method :: binary() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Perform the given request.
This is a general purpose function that should only be used when other method-specific functions do not apply.</description>
    </item>
    
    <item>
      <title>gun:request(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.request/</guid>
      <description>Name gun:request - Perform the given request
Description request(ConnPid, Method, Path, Headers) -&amp;gt; StreamRef request(ConnPid, Method, Path, Headers, Body) -&amp;gt; request(ConnPid, Method, Path, Headers, Body, #{}) request(ConnPid, Method, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Method :: binary() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Perform the given request.
This is a general purpose function that should only be used when other method-specific functions do not apply.</description>
    </item>
    
    <item>
      <title>gun:request(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.request/</guid>
      <description>Name gun:request - Perform the given request
Description request(ConnPid, Method, Path, Headers) -&amp;gt; StreamRef request(ConnPid, Method, Path, Headers, Body) -&amp;gt; request(ConnPid, Method, Path, Headers, Body, #{}) request(ConnPid, Method, Path, Headers, Body, ReqOpts) -&amp;gt; StreamRef ConnPid :: pid() Method :: binary() Path :: iodata() Headers :: [{binary(), iodata()}] Body :: iodata() ReqOpts :: gun:req_opts() StreamRef :: reference()  Perform the given request.
This is a general purpose function that should only be used when other method-specific functions do not apply.</description>
    </item>
    
    <item>
      <title>gun:ws_send(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.ws_send/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.ws_send/</guid>
      <description>Name gun:ws_send - Send Websocket frames
Description ws_send(ConnPid, Frames) -&amp;gt; ok ConnPid :: pid() Frames :: Frame | [Frame] Frame :: close | ping | pong | {text | binary | close | ping | pong, iodata()} | {close, non_neg_integer(), iodata()}  Send Websocket frames.
The connection must first be upgraded to Websocket using the function gun:ws_upgrade(3).
Arguments ConnPid The pid of the Gun connection process.
 Frames A Websocket frame.</description>
    </item>
    
    <item>
      <title>gun:ws_send(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.ws_send/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.ws_send/</guid>
      <description>Name gun:ws_send - Send Websocket frames
Description ws_send(ConnPid, Frames) -&amp;gt; ok ConnPid :: pid() Frames :: Frame | [Frame] Frame :: close | ping | pong | {text | binary | close | ping | pong, iodata()} | {close, non_neg_integer(), iodata()}  Send Websocket frames.
The connection must first be upgraded to Websocket using the function gun:ws_upgrade(3).
Arguments ConnPid The pid of the Gun connection process.
 Frames A Websocket frame.</description>
    </item>
    
    <item>
      <title>gun:ws_send(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.ws_send/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.ws_send/</guid>
      <description>Name gun:ws_send - Send Websocket frames
Description ws_send(ConnPid, Frames) -&amp;gt; ok ConnPid :: pid() Frames :: Frame | [Frame] Frame :: close | ping | pong | {text | binary | close | ping | pong, iodata()} | {close, non_neg_integer(), iodata()}  Send Websocket frames.
The connection must first be upgraded to Websocket using the function gun:ws_upgrade(3).
Arguments ConnPid The pid of the Gun connection process.
 Frames A Websocket frame.</description>
    </item>
    
    <item>
      <title>gun:ws_send(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.ws_send/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.ws_send/</guid>
      <description>Name gun:ws_send - Send Websocket frames
Description ws_send(ConnPid, Frames) -&amp;gt; ok ConnPid :: pid() Frames :: Frame | [Frame] Frame :: close | ping | pong | {text | binary | close | ping | pong, iodata()} | {close, non_neg_integer(), iodata()}  Send Websocket frames.
The connection must first be upgraded to Websocket using the function gun:ws_upgrade(3).
Arguments ConnPid The pid of the Gun connection process.
 Frames A Websocket frame.</description>
    </item>
    
    <item>
      <title>gun:ws_upgrade(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun.ws_upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun.ws_upgrade/</guid>
      <description>Name gun:ws_upgrade - Upgrade to Websocket
Description ws_upgrade(ConnPid, Path) -&amp;gt; ws_upgrade(ConnPid, Path, []) ws_upgrade(ConnPid, Path, Headers) -&amp;gt; StreamRef ws_upgrade(ConnPid, Path, Headers, WsOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] WsOpts :: gun:ws_opts StreamRef :: reference()  Upgrade to Websocket.
The behavior of this function depends on the protocol selected.
HTTP/1.1 cannot handle Websocket and HTTP requests concurrently. The upgrade, if successful, will result in the complete takeover of the connection.</description>
    </item>
    
    <item>
      <title>gun:ws_upgrade(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun.ws_upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun.ws_upgrade/</guid>
      <description>Name gun:ws_upgrade - Upgrade to Websocket
Description ws_upgrade(ConnPid, Path) -&amp;gt; ws_upgrade(ConnPid, Path, []) ws_upgrade(ConnPid, Path, Headers) -&amp;gt; StreamRef ws_upgrade(ConnPid, Path, Headers, WsOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] WsOpts :: gun:ws_opts StreamRef :: reference()  Upgrade to Websocket.
The behavior of this function depends on the protocol selected.
HTTP/1.1 cannot handle Websocket and HTTP requests concurrently. The upgrade, if successful, will result in the complete takeover of the connection.</description>
    </item>
    
    <item>
      <title>gun:ws_upgrade(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun.ws_upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun.ws_upgrade/</guid>
      <description>Name gun:ws_upgrade - Upgrade to Websocket
Description ws_upgrade(ConnPid, Path) -&amp;gt; ws_upgrade(ConnPid, Path, []) ws_upgrade(ConnPid, Path, Headers) -&amp;gt; StreamRef ws_upgrade(ConnPid, Path, Headers, WsOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] WsOpts :: gun:ws_opts StreamRef :: reference()  Upgrade to Websocket.
The behavior of this function depends on the protocol selected.
HTTP/1.1 cannot handle Websocket and HTTP requests concurrently. The upgrade, if successful, will result in the complete takeover of the connection.</description>
    </item>
    
    <item>
      <title>gun:ws_upgrade(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun.ws_upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun.ws_upgrade/</guid>
      <description>Name gun:ws_upgrade - Upgrade to Websocket
Description ws_upgrade(ConnPid, Path) -&amp;gt; ws_upgrade(ConnPid, Path, []) ws_upgrade(ConnPid, Path, Headers) -&amp;gt; StreamRef ws_upgrade(ConnPid, Path, Headers, WsOpts) -&amp;gt; StreamRef ConnPid :: pid() Path :: iodata() Headers :: [{binary(), iodata()}] WsOpts :: gun:ws_opts StreamRef :: reference()  Upgrade to Websocket.
The behavior of this function depends on the protocol selected.
HTTP/1.1 cannot handle Websocket and HTTP requests concurrently. The upgrade, if successful, will result in the complete takeover of the connection.</description>
    </item>
    
    <item>
      <title>gun_data(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun_data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun_data/</guid>
      <description>Name gun_data - Response body
Description {gun_data, ConnPid, StreamRef, IsFin, Data} ConnPid :: pid() StreamRef :: reference() IsFin :: fin | nofin Data :: binary()  Response body.
This message informs the relevant process that the server sent a all or part of the body for the response to the original request.
A data message is always preceded by a response message.
The response body may be terminated either by a data message with the flag fin set or by a gun_trailers(3) message.</description>
    </item>
    
    <item>
      <title>gun_data(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun_data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun_data/</guid>
      <description>Name gun_data - Response body
Description {gun_data, ConnPid, StreamRef, IsFin, Data} ConnPid :: pid() StreamRef :: reference() IsFin :: fin | nofin Data :: binary()  Response body.
This message informs the relevant process that the server sent a all or part of the body for the response to the original request.
A data message is always preceded by a response message.
The response body may be terminated either by a data message with the flag fin set or by a gun_trailers(3) message.</description>
    </item>
    
    <item>
      <title>gun_data(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun_data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun_data/</guid>
      <description>Name gun_data - Response body
Description {gun_data, ConnPid, StreamRef, IsFin, Data} ConnPid :: pid() StreamRef :: reference() IsFin :: fin | nofin Data :: binary()  Response body.
This message informs the relevant process that the server sent a all or part of the body for the response to the original request.
A data message is always preceded by a response message.
The response body may be terminated either by a data message with the flag fin set or by a gun_trailers(3) message.</description>
    </item>
    
    <item>
      <title>gun_data(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun_data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun_data/</guid>
      <description>Name gun_data - Response body
Description {gun_data, ConnPid, StreamRef, IsFin, Data} ConnPid :: pid() StreamRef :: reference() IsFin :: fin | nofin Data :: binary()  Response body.
This message informs the relevant process that the server sent a all or part of the body for the response to the original request.
A data message is always preceded by a response message.
The response body may be terminated either by a data message with the flag fin set or by a gun_trailers(3) message.</description>
    </item>
    
    <item>
      <title>gun_down(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun_down/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun_down/</guid>
      <description>Name gun_down - The connection is down
Description {gun_down, ConnPid, Protocol, Reason, KilledStreams, UnprocessedStreams} ConnPid :: pid() Protocol :: http | http2 | ws Reason :: any() KilledStreams :: [reference()] UnprocessedStreams :: [reference()]  The connection is down.
This message informs the owner process that the connection was lost. Depending on the retry and retry_timeout options Gun may automatically attempt to reconnect.
When the connection goes back up, Gun will not attempt to retry requests.</description>
    </item>
    
    <item>
      <title>gun_down(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun_down/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun_down/</guid>
      <description>Name gun_down - The connection is down
Description {gun_down, ConnPid, Protocol, Reason, KilledStreams, UnprocessedStreams} ConnPid :: pid() Protocol :: http | http2 | ws Reason :: any() KilledStreams :: [reference()] UnprocessedStreams :: [reference()]  The connection is down.
This message informs the owner process that the connection was lost. Depending on the retry and retry_timeout options Gun may automatically attempt to reconnect.
When the connection goes back up, Gun will not attempt to retry requests.</description>
    </item>
    
    <item>
      <title>gun_down(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun_down/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun_down/</guid>
      <description>Name gun_down - The connection is down
Description {gun_down, ConnPid, Protocol, Reason, KilledStreams, UnprocessedStreams} ConnPid :: pid() Protocol :: http | http2 | ws Reason :: any() KilledStreams :: [reference()] UnprocessedStreams :: [reference()]  The connection is down.
This message informs the owner process that the connection was lost. Depending on the retry and retry_timeout options Gun may automatically attempt to reconnect.
When the connection goes back up, Gun will not attempt to retry requests.</description>
    </item>
    
    <item>
      <title>gun_down(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun_down/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun_down/</guid>
      <description>Name gun_down - The connection is down
Description {gun_down, ConnPid, Protocol, Reason, KilledStreams, UnprocessedStreams} ConnPid :: pid() Protocol :: http | http2 | ws Reason :: any() KilledStreams :: [reference()] UnprocessedStreams :: [reference()]  The connection is down.
This message informs the owner process that the connection was lost. Depending on the retry and retry_timeout options Gun may automatically attempt to reconnect.
When the connection goes back up, Gun will not attempt to retry requests.</description>
    </item>
    
    <item>
      <title>gun_error(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun_error/</guid>
      <description>Name gun_error - Stream or connection-wide error
Description {gun_error, ConnPid, StreamRef, Reason} {gun_error, ConnPid, Reason} ConnPid :: pid() StreamRef :: reference() Reason :: any()  Stream or connection-wide error.
These messages inform the relevant process that an error occurred. A reference is given when the error pertains to a specific stream. Connection-wide errors do not imply that the connection is no longer usable, they are used for all errors that are not specific to a stream.</description>
    </item>
    
    <item>
      <title>gun_error(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun_error/</guid>
      <description>Name gun_error - Stream or connection-wide error
Description {gun_error, ConnPid, StreamRef, Reason} {gun_error, ConnPid, Reason} ConnPid :: pid() StreamRef :: reference() Reason :: any()  Stream or connection-wide error.
These messages inform the relevant process that an error occurred. A reference is given when the error pertains to a specific stream. Connection-wide errors do not imply that the connection is no longer usable, they are used for all errors that are not specific to a stream.</description>
    </item>
    
    <item>
      <title>gun_error(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun_error/</guid>
      <description>Name gun_error - Stream or connection-wide error
Description {gun_error, ConnPid, StreamRef, Reason} {gun_error, ConnPid, Reason} ConnPid :: pid() StreamRef :: reference() Reason :: any()  Stream or connection-wide error.
These messages inform the relevant process that an error occurred. A reference is given when the error pertains to a specific stream. Connection-wide errors do not imply that the connection is no longer usable, they are used for all errors that are not specific to a stream.</description>
    </item>
    
    <item>
      <title>gun_error(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun_error/</guid>
      <description>Name gun_error - Stream or connection-wide error
Description {gun_error, ConnPid, StreamRef, Reason} {gun_error, ConnPid, Reason} ConnPid :: pid() StreamRef :: reference() Reason :: any()  Stream or connection-wide error.
These messages inform the relevant process that an error occurred. A reference is given when the error pertains to a specific stream. Connection-wide errors do not imply that the connection is no longer usable, they are used for all errors that are not specific to a stream.</description>
    </item>
    
    <item>
      <title>gun_inform(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun_inform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun_inform/</guid>
      <description>Name gun_inform - Informational response
Description {gun_inform, ConnPid, StreamRef, Status, Headers} ConnPid :: pid() StreamRef :: reference() Status :: 100..199 Headers :: [{binary(), binary()}]  Informational response.
This message informs the relevant process that the server sent an informational response to the original request.
Informational responses are only intermediate responses and provide no guarantees as to what the final response will be. An informational response always precedes the response to the original request.</description>
    </item>
    
    <item>
      <title>gun_inform(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun_inform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun_inform/</guid>
      <description>Name gun_inform - Informational response
Description {gun_inform, ConnPid, StreamRef, Status, Headers} ConnPid :: pid() StreamRef :: reference() Status :: 100..199 Headers :: [{binary(), binary()}]  Informational response.
This message informs the relevant process that the server sent an informational response to the original request.
Informational responses are only intermediate responses and provide no guarantees as to what the final response will be. An informational response always precedes the response to the original request.</description>
    </item>
    
    <item>
      <title>gun_inform(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun_inform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun_inform/</guid>
      <description>Name gun_inform - Informational response
Description {gun_inform, ConnPid, StreamRef, Status, Headers} ConnPid :: pid() StreamRef :: reference() Status :: 100..199 Headers :: [{binary(), binary()}]  Informational response.
This message informs the relevant process that the server sent an informational response to the original request.
Informational responses are only intermediate responses and provide no guarantees as to what the final response will be. An informational response always precedes the response to the original request.</description>
    </item>
    
    <item>
      <title>gun_inform(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun_inform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun_inform/</guid>
      <description>Name gun_inform - Informational response
Description {gun_inform, ConnPid, StreamRef, Status, Headers} ConnPid :: pid() StreamRef :: reference() Status :: 100..199 Headers :: [{binary(), binary()}]  Informational response.
This message informs the relevant process that the server sent an informational response to the original request.
Informational responses are only intermediate responses and provide no guarantees as to what the final response will be. An informational response always precedes the response to the original request.</description>
    </item>
    
    <item>
      <title>gun_push(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun_push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun_push/</guid>
      <description>Name gun_push - Server-initiated push
Description {gun_push, ConnPid, StreamRef, NewStreamRef, Method, URI, Headers} ConnPid :: pid() StreamRef :: reference() NewStreamRef :: reference() Method :: binary() URI :: binary() Headers :: [{binary(), binary()}]  Server-initiated push.
This message informs the relevant process that the server is pushing a resource related to the effective target URI of the original request.
A server-initiated push message always precedes the response to the original request.</description>
    </item>
    
    <item>
      <title>gun_push(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun_push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun_push/</guid>
      <description>Name gun_push - Server-initiated push
Description {gun_push, ConnPid, StreamRef, NewStreamRef, Method, URI, Headers} ConnPid :: pid() StreamRef :: reference() NewStreamRef :: reference() Method :: binary() URI :: binary() Headers :: [{binary(), binary()}]  Server-initiated push.
This message informs the relevant process that the server is pushing a resource related to the effective target URI of the original request.
A server-initiated push message always precedes the response to the original request.</description>
    </item>
    
    <item>
      <title>gun_push(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun_push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun_push/</guid>
      <description>Name gun_push - Server-initiated push
Description {gun_push, ConnPid, StreamRef, NewStreamRef, Method, URI, Headers} ConnPid :: pid() StreamRef :: reference() NewStreamRef :: reference() Method :: binary() URI :: binary() Headers :: [{binary(), binary()}]  Server-initiated push.
This message informs the relevant process that the server is pushing a resource related to the effective target URI of the original request.
A server-initiated push message always precedes the response to the original request.</description>
    </item>
    
    <item>
      <title>gun_push(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun_push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun_push/</guid>
      <description>Name gun_push - Server-initiated push
Description {gun_push, ConnPid, StreamRef, NewStreamRef, Method, URI, Headers} ConnPid :: pid() StreamRef :: reference() NewStreamRef :: reference() Method :: binary() URI :: binary() Headers :: [{binary(), binary()}]  Server-initiated push.
This message informs the relevant process that the server is pushing a resource related to the effective target URI of the original request.
A server-initiated push message always precedes the response to the original request.</description>
    </item>
    
    <item>
      <title>gun_response(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun_response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun_response/</guid>
      <description>Name gun_response - Response
Description {gun_response, ConnPid, StreamRef, IsFin, Status, Headers} ConnPid :: pid() StreamRef :: reference() IsFin :: fin | nofin Status :: non_neg_integer() Headers :: [{binary(), binary()}]  Response.
This message informs the relevant process that the server sent a response to the original request.
Elements ConnPid The pid of the Gun connection process.
 StreamRef Identifier of the stream for the original request.
 IsFin Whether this message terminates the response.</description>
    </item>
    
    <item>
      <title>gun_response(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun_response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun_response/</guid>
      <description>Name gun_response - Response
Description {gun_response, ConnPid, StreamRef, IsFin, Status, Headers} ConnPid :: pid() StreamRef :: reference() IsFin :: fin | nofin Status :: non_neg_integer() Headers :: [{binary(), binary()}]  Response.
This message informs the relevant process that the server sent a response to the original request.
Elements ConnPid The pid of the Gun connection process.
 StreamRef Identifier of the stream for the original request.
 IsFin Whether this message terminates the response.</description>
    </item>
    
    <item>
      <title>gun_response(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun_response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun_response/</guid>
      <description>Name gun_response - Response
Description {gun_response, ConnPid, StreamRef, IsFin, Status, Headers} ConnPid :: pid() StreamRef :: reference() IsFin :: fin | nofin Status :: non_neg_integer() Headers :: [{binary(), binary()}]  Response.
This message informs the relevant process that the server sent a response to the original request.
Elements ConnPid The pid of the Gun connection process.
 StreamRef Identifier of the stream for the original request.
 IsFin Whether this message terminates the response.</description>
    </item>
    
    <item>
      <title>gun_response(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun_response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun_response/</guid>
      <description>Name gun_response - Response
Description {gun_response, ConnPid, StreamRef, IsFin, Status, Headers} ConnPid :: pid() StreamRef :: reference() IsFin :: fin | nofin Status :: non_neg_integer() Headers :: [{binary(), binary()}]  Response.
This message informs the relevant process that the server sent a response to the original request.
Elements ConnPid The pid of the Gun connection process.
 StreamRef Identifier of the stream for the original request.
 IsFin Whether this message terminates the response.</description>
    </item>
    
    <item>
      <title>gun_trailers(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun_trailers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun_trailers/</guid>
      <description>Name gun_trailers - Response trailers
Description {gun_trailers, ConnPid, StreamRef, Headers} ConnPid :: pid() StreamRef :: reference() Headers :: [{binary(), binary()}]  Response trailers.
This message informs the relevant process that the server sent response trailers for the response to the original request.
A trailers message terminates the response.
Elements ConnPid The pid of the Gun connection process.
 StreamRef Identifier of the stream for the original request.
 Headers Trailing headers sent after the response body.</description>
    </item>
    
    <item>
      <title>gun_trailers(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun_trailers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun_trailers/</guid>
      <description>Name gun_trailers - Response trailers
Description {gun_trailers, ConnPid, StreamRef, Headers} ConnPid :: pid() StreamRef :: reference() Headers :: [{binary(), binary()}]  Response trailers.
This message informs the relevant process that the server sent response trailers for the response to the original request.
A trailers message terminates the response.
Elements ConnPid The pid of the Gun connection process.
 StreamRef Identifier of the stream for the original request.
 Headers Trailing headers sent after the response body.</description>
    </item>
    
    <item>
      <title>gun_trailers(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun_trailers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun_trailers/</guid>
      <description>Name gun_trailers - Response trailers
Description {gun_trailers, ConnPid, StreamRef, Headers} ConnPid :: pid() StreamRef :: reference() Headers :: [{binary(), binary()}]  Response trailers.
This message informs the relevant process that the server sent response trailers for the response to the original request.
A trailers message terminates the response.
Elements ConnPid The pid of the Gun connection process.
 StreamRef Identifier of the stream for the original request.
 Headers Trailing headers sent after the response body.</description>
    </item>
    
    <item>
      <title>gun_trailers(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun_trailers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun_trailers/</guid>
      <description>Name gun_trailers - Response trailers
Description {gun_trailers, ConnPid, StreamRef, Headers} ConnPid :: pid() StreamRef :: reference() Headers :: [{binary(), binary()}]  Response trailers.
This message informs the relevant process that the server sent response trailers for the response to the original request.
A trailers message terminates the response.
Elements ConnPid The pid of the Gun connection process.
 StreamRef Identifier of the stream for the original request.
 Headers Trailing headers sent after the response body.</description>
    </item>
    
    <item>
      <title>gun_up(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun_up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun_up/</guid>
      <description>Name gun_up - The connection is up
Description {gun_up, ConnPid, Protocol} ConnPid :: pid() Protocol :: http | http2  The connection is up.
This message informs the owner process that the connection or reconnection completed.
Gun will now start processing the messages it received while waiting for the connection to be up. If this is a reconnection, then this may not be desirable for all requests. Those requests should be cancelled when the connection goes down, and any subsequent messages ignored.</description>
    </item>
    
    <item>
      <title>gun_up(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun_up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun_up/</guid>
      <description>Name gun_up - The connection is up
Description {gun_up, ConnPid, Protocol} ConnPid :: pid() Protocol :: http | http2  The connection is up.
This message informs the owner process that the connection or reconnection completed.
Gun will now start processing the messages it received while waiting for the connection to be up. If this is a reconnection, then this may not be desirable for all requests. Those requests should be cancelled when the connection goes down, and any subsequent messages ignored.</description>
    </item>
    
    <item>
      <title>gun_up(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun_up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun_up/</guid>
      <description>Name gun_up - The connection is up
Description {gun_up, ConnPid, Protocol} ConnPid :: pid() Protocol :: http | http2  The connection is up.
This message informs the owner process that the connection or reconnection completed.
Gun will now start processing the messages it received while waiting for the connection to be up. If this is a reconnection, then this may not be desirable for all requests. Those requests should be cancelled when the connection goes down, and any subsequent messages ignored.</description>
    </item>
    
    <item>
      <title>gun_up(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun_up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun_up/</guid>
      <description>Name gun_up - The connection is up
Description {gun_up, ConnPid, Protocol} ConnPid :: pid() Protocol :: http | http2  The connection is up.
This message informs the owner process that the connection or reconnection completed.
Gun will now start processing the messages it received while waiting for the connection to be up. If this is a reconnection, then this may not be desirable for all requests. Those requests should be cancelled when the connection goes down, and any subsequent messages ignored.</description>
    </item>
    
    <item>
      <title>gun_upgrade(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun_upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun_upgrade/</guid>
      <description>Name gun_upgrade - Successful protocol upgrade
Description {gun_upgrade, ConnPid, StreamRef, Protocols, Headers} ConnPid :: pid() StreamRef :: reference() Protocols :: [&amp;lt;&amp;lt;&#34;websocket&#34;&amp;gt;&amp;gt;] Headers :: [{binary(), binary()}]  Successful protocol upgrade.
This message informs the relevant process that the server accepted to upgrade to one or more protocols given in the original request.
The exact semantics of this message depend on the original protocol. HTTP/1.1 upgrades apply to the entire connection. HTTP/2 uses a different mechanism which allows switching specific streams to a different protocol.</description>
    </item>
    
    <item>
      <title>gun_upgrade(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun_upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun_upgrade/</guid>
      <description>Name gun_upgrade - Successful protocol upgrade
Description {gun_upgrade, ConnPid, StreamRef, Protocols, Headers} ConnPid :: pid() StreamRef :: reference() Protocols :: [&amp;lt;&amp;lt;&#34;websocket&#34;&amp;gt;&amp;gt;] Headers :: [{binary(), binary()}]  Successful protocol upgrade.
This message informs the relevant process that the server accepted to upgrade to one or more protocols given in the original request.
The exact semantics of this message depend on the original protocol. HTTP/1.1 upgrades apply to the entire connection. HTTP/2 uses a different mechanism which allows switching specific streams to a different protocol.</description>
    </item>
    
    <item>
      <title>gun_upgrade(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun_upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun_upgrade/</guid>
      <description>Name gun_upgrade - Successful protocol upgrade
Description {gun_upgrade, ConnPid, StreamRef, Protocols, Headers} ConnPid :: pid() StreamRef :: reference() Protocols :: [&amp;lt;&amp;lt;&#34;websocket&#34;&amp;gt;&amp;gt;] Headers :: [{binary(), binary()}]  Successful protocol upgrade.
This message informs the relevant process that the server accepted to upgrade to one or more protocols given in the original request.
The exact semantics of this message depend on the original protocol. HTTP/1.1 upgrades apply to the entire connection. HTTP/2 uses a different mechanism which allows switching specific streams to a different protocol.</description>
    </item>
    
    <item>
      <title>gun_upgrade(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun_upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun_upgrade/</guid>
      <description>Name gun_upgrade - Successful protocol upgrade
Description {gun_upgrade, ConnPid, StreamRef, Protocols, Headers} ConnPid :: pid() StreamRef :: reference() Protocols :: [&amp;lt;&amp;lt;&#34;websocket&#34;&amp;gt;&amp;gt;] Headers :: [{binary(), binary()}]  Successful protocol upgrade.
This message informs the relevant process that the server accepted to upgrade to one or more protocols given in the original request.
The exact semantics of this message depend on the original protocol. HTTP/1.1 upgrades apply to the entire connection. HTTP/2 uses a different mechanism which allows switching specific streams to a different protocol.</description>
    </item>
    
    <item>
      <title>gun_ws(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.0/manual/gun_ws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.0/manual/gun_ws/</guid>
      <description>Name gun_ws - Websocket frame
Description {gun_ws, ConnPid, StreamRef, Frame} ConnPid :: pid() StreamRef :: reference() Frame :: close | {text | binary | close, binary()} | {close, non_neg_integer(), binary()}  Websocket frame.
This message informs the relevant process that the server sent the enclosed frame.
This message can only be sent on streams that were upgraded to the Websocket protocol.
Elements ConnPid The pid of the Gun connection process.</description>
    </item>
    
    <item>
      <title>gun_ws(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.1/manual/gun_ws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.1/manual/gun_ws/</guid>
      <description>Name gun_ws - Websocket frame
Description {gun_ws, ConnPid, StreamRef, Frame} ConnPid :: pid() StreamRef :: reference() Frame :: close | {text | binary | close, binary()} | {close, non_neg_integer(), binary()}  Websocket frame.
This message informs the relevant process that the server sent the enclosed frame.
This message can only be sent on streams that were upgraded to the Websocket protocol.
Elements ConnPid The pid of the Gun connection process.</description>
    </item>
    
    <item>
      <title>gun_ws(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.2/manual/gun_ws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.2/manual/gun_ws/</guid>
      <description>Name gun_ws - Websocket frame
Description {gun_ws, ConnPid, StreamRef, Frame} ConnPid :: pid() StreamRef :: reference() Frame :: close | {text | binary | close, binary()} | {close, non_neg_integer(), binary()}  Websocket frame.
This message informs the relevant process that the server sent the enclosed frame.
This message can only be sent on streams that were upgraded to the Websocket protocol.
Elements ConnPid The pid of the Gun connection process.</description>
    </item>
    
    <item>
      <title>gun_ws(3)</title>
      <link>https://ninenines.eu/docs/en/gun/1.3/manual/gun_ws/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/gun/1.3/manual/gun_ws/</guid>
      <description>Name gun_ws - Websocket frame
Description {gun_ws, ConnPid, StreamRef, Frame} ConnPid :: pid() StreamRef :: reference() Frame :: close | {text | binary | close, binary()} | {close, non_neg_integer(), binary()}  Websocket frame.
This message informs the relevant process that the server sent the enclosed frame.
This message can only be sent on streams that were upgraded to the Websocket protocol.
Elements ConnPid The pid of the Gun connection process.</description>
    </item>
    
    <item>
      <title>ranch(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/manual/ranch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/manual/ranch/</guid>
      <description>Name ranch - socket acceptor pool
Description The ranch module provides functions for starting and manipulating Ranch listeners.
Types max_conns() = non_neg_integer() | infinity Maximum number of connections allowed on this listener.
This is a soft limit. The actual number of connections might be slightly above the limit due to concurrency when accepting new connections. Some connections may also be removed from this count explicitly by the user code.
opt() opt() = {ack_timeout, timeout()} | {connection_type, worker | supervisor} | {max_connections, max_conns()} | {shutdown, timeout() | brutal_kill} | {socket, any()}  Ranch-specific transport options.</description>
    </item>
    
    <item>
      <title>ranch(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/manual/ranch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/manual/ranch/</guid>
      <description>Name ranch - socket acceptor pool
Description The ranch module provides functions for starting and manipulating Ranch listeners.
Types max_conns() = non_neg_integer() | infinity Maximum number of connections allowed on this listener.
This is a soft limit. The actual number of connections might be slightly above the limit due to concurrency when accepting new connections. Some connections may also be removed from this count explicitly by the user code.
opt() opt() = {ack_timeout, timeout()} | {connection_type, worker | supervisor} | {max_connections, max_conns()} | {shutdown, timeout() | brutal_kill} | {socket, any()}  Ranch-specific transport options.</description>
    </item>
    
    <item>
      <title>ranch(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/manual/ranch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/manual/ranch/</guid>
      <description>Name ranch - socket acceptor pool
Description The ranch module provides functions for starting and manipulating Ranch listeners.
Types max_conns() = non_neg_integer() | infinity Maximum number of connections allowed on this listener.
This is a soft limit. The actual number of connections might be slightly above the limit due to concurrency when accepting new connections. Some connections may also be removed from this count explicitly by the user code.
opt() opt() = {ack_timeout, timeout()} | {connection_type, worker | supervisor} | {max_connections, max_conns()} | {num_acceptors, pos_integer()} | {shutdown, timeout() | brutal_kill} | {socket, any()}  Ranch-specific transport options.</description>
    </item>
    
    <item>
      <title>ranch(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/manual/ranch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/manual/ranch/</guid>
      <description>Name ranch - socket acceptor pool
Description The ranch module provides functions for starting and manipulating Ranch listeners.
Types max_conns() = non_neg_integer() | infinity Maximum number of connections allowed on this listener.
This is a soft limit. The actual number of connections might be slightly above the limit due to concurrency when accepting new connections. Some connections may also be removed from this count explicitly by the user code.
opt() opt() = {ack_timeout, timeout()} | {connection_type, worker | supervisor} | {max_connections, max_conns()} | {num_acceptors, pos_integer()} | {shutdown, timeout() | brutal_kill} | {socket, any()}  Ranch-specific transport options.</description>
    </item>
    
    <item>
      <title>ranch(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch/</guid>
      <description>Name ranch - Socket acceptor pool
Description The module ranch provides functions for starting and manipulating Ranch listeners.
Exports Start/stop:
ranch:start_listener(3) - Start a listener  ranch:stop_listener(3) - Stop a listener  ranch:child_spec(3) - Build child specifications for a new listener   Suspend/resume:
ranch:suspend_listener(3) - Suspend a running listener  ranch:resume_listener(3) - Resume a suspended listener  ranch:get_status(3) - Get a listener&amp;apos;s running state   Connections:
ranch:accept_ack(3) - Deprecated in favor of ranch:handshake(3)  ranch:handshake(3) - Perform the transport handshake  ranch:remove_connection(3) - Remove connection from the count   Options:</description>
    </item>
    
    <item>
      <title>ranch(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch/</guid>
      <description>Name ranch - Socket acceptor pool
Description The module ranch provides functions for starting and manipulating Ranch listeners.
Exports Start/stop:
ranch:start_listener(3) - Start a listener  ranch:stop_listener(3) - Stop a listener  ranch:child_spec(3) - Build child specifications for a new listener   Suspend/resume:
ranch:suspend_listener(3) - Suspend a running listener  ranch:resume_listener(3) - Resume a suspended listener  ranch:get_status(3) - Get a listener&amp;apos;s running state   Connections:
ranch:accept_ack(3) - Deprecated in favor of ranch:handshake(3)  ranch:handshake(3) - Perform the transport handshake  ranch:recv_proxy_header(3) - Receive the PROXY protocol header  ranch:remove_connection(3) - Remove connection from the count   Options:</description>
    </item>
    
    <item>
      <title>ranch(7)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/manual/ranch_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/manual/ranch_app/</guid>
      <description>Name ranch - Socket acceptor pool for TCP protocols.
Dependencies The ranch application has no particular dependency required to start.
It has optional dependencies that are only required when listening for SSL connections. The dependencies are crypto, asn1, public_key and ssl. They are started automatically if they weren&amp;apos;t before.
Environment The ranch application defines one application environment configuration parameter.
profile (false) When enabled, Ranch will start eprof profiling automatically.
  You can use the ranch_app:profile_output/0 function to stop profiling and output the results to the files procs.</description>
    </item>
    
    <item>
      <title>ranch(7)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/manual/ranch_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/manual/ranch_app/</guid>
      <description>Name ranch - Socket acceptor pool for TCP protocols.
Dependencies The ranch application depends on the ssl application to start. It is used for handling secure connections, when the transport is ranch_ssl. It can be disabled if SSL is not used.
Environment The ranch application defines one application environment configuration parameter.
profile (false) When enabled, Ranch will start eprof profiling automatically.
  You can use the ranch_app:profile_output/0 function to stop profiling and output the results to the files procs.</description>
    </item>
    
    <item>
      <title>ranch(7)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/manual/ranch_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/manual/ranch_app/</guid>
      <description>Name ranch - Socket acceptor pool for TCP protocols.
Dependencies The ranch application depends on the ssl application to start. It is used for handling secure connections, when the transport is ranch_ssl. It can be disabled if SSL is not used.
Environment The ranch application defines one application environment configuration parameter.
profile (false) When enabled, Ranch will start eprof profiling automatically.
  You can use the ranch_app:profile_output/0 function to stop profiling and output the results to the files procs.</description>
    </item>
    
    <item>
      <title>ranch(7)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/manual/ranch_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/manual/ranch_app/</guid>
      <description>Name ranch - Socket acceptor pool for TCP protocols.
Dependencies The ranch application depends on the ssl application to start. It is used for handling secure connections, when the transport is ranch_ssl. It can be disabled if SSL is not used.
Environment The ranch application defines one application environment configuration parameter.
profile (false) When enabled, Ranch will start eprof profiling automatically.
  You can use the ranch_app:profile_output/0 function to stop profiling and output the results to the files procs.</description>
    </item>
    
    <item>
      <title>ranch(7)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_app/</guid>
      <description>Name ranch - Socket acceptor pool for TCP protocols
Description Ranch is a socket acceptor pool for TCP protocols.
Ranch manages listeners which are a set of processes that accept and manage connections. The connection&amp;apos;s transport and protocol modules are configured per listener. Listeners can be inspected and reconfigured without interruptions in service.
Modules Functions:
ranch(3) - Socket acceptor pool   Transports:
ranch_ssl(3) - SSL transport  ranch_tcp(3) - TLS transport   Behaviors:</description>
    </item>
    
    <item>
      <title>ranch(7)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_app/</guid>
      <description>Name ranch - Socket acceptor pool for TCP protocols
Description Ranch is a socket acceptor pool for TCP protocols.
Ranch manages listeners which are a set of processes that accept and manage connections. The connection&amp;apos;s transport and protocol modules are configured per listener. Listeners can be inspected and reconfigured without interruptions in service.
Modules Functions:
ranch(3) - Socket acceptor pool  ranch_proxy_header(3) - PROXY protocol   Transports:
ranch_ssl(3) - SSL transport  ranch_tcp(3) - TCP transport   Behaviors:</description>
    </item>
    
    <item>
      <title>ranch:child_spec(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.child_spec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.child_spec/</guid>
      <description>Name ranch:child_spec - Build child specifications for a new listener
Description child_spec(Ref :: ranch_ref(), Transport :: module(), TransOpts :: ranch:opts(), Protocol :: module(), ProtoOpts :: any()) -&amp;gt; supervisor:child_spec()  Build child specifications for a new listener.
This function can be used to embed a listener directly in an application&amp;apos;s supervision tree.
Arguments Ref The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the configuration.</description>
    </item>
    
    <item>
      <title>ranch:child_spec(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.child_spec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.child_spec/</guid>
      <description>Name ranch:child_spec - Build child specifications for a new listener
Description child_spec(Ref :: ranch_ref(), Transport :: module(), TransOpts :: ranch:opts(), Protocol :: module(), ProtoOpts :: any()) -&amp;gt; supervisor:child_spec()  Build child specifications for a new listener.
This function can be used to embed a listener directly in an application&amp;apos;s supervision tree.
Arguments Ref The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the configuration.</description>
    </item>
    
    <item>
      <title>ranch:get_addr(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.get_addr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.get_addr/</guid>
      <description>Name ranch:get_addr - Get the listening port and IP
Description get_addr(Ref :: ranch:ref()) -&amp;gt; {IP :: inet:ip_address(), Port :: inet:port_number()}  Get the listening port and IP.
Arguments Ref The listener name.
  Return value The address of the listener is returned as a tuple.
The IP address is the IP of the network interface the socket is bound to.
Examples Get the listening port and IP {IP, Port} = ranch:get_addr(example).</description>
    </item>
    
    <item>
      <title>ranch:get_addr(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.get_addr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.get_addr/</guid>
      <description>Name ranch:get_addr - Get the listening port and IP
Description get_addr(Ref :: ranch:ref()) -&amp;gt; {IP :: inet:ip_address(), Port :: inet:port_number()}  Get the listening port and IP.
Arguments Ref The listener name.
  Return value The address of the listener is returned as a tuple.
The IP address is the IP of the network interface the socket is bound to.
Examples Get the listening port and IP {IP, Port} = ranch:get_addr(example).</description>
    </item>
    
    <item>
      <title>ranch:get_max_connections(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.get_max_connections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.get_max_connections/</guid>
      <description>Name ranch:get_max_connections - Get the max number of connections
Description get_max_connections(Ref :: ranch:ref()) -&amp;gt; MaxConns :: ranch:max_conns()  Get the max number of connections.
Arguments Ref The listener name.
  Return value The maximum number of connections is returned.
Examples Get the max number of connections MaxConns = ranch:get_max_connections(example).  See also ranch:get_protocol_options(3), ranch:get_transport_options(3), ranch:set_max_connections(3), ranch(3)</description>
    </item>
    
    <item>
      <title>ranch:get_max_connections(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.get_max_connections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.get_max_connections/</guid>
      <description>Name ranch:get_max_connections - Get the max number of connections
Description get_max_connections(Ref :: ranch:ref()) -&amp;gt; MaxConns :: ranch:max_conns()  Get the max number of connections.
Arguments Ref The listener name.
  Return value The maximum number of connections is returned.
Examples Get the max number of connections MaxConns = ranch:get_max_connections(example).  See also ranch:get_protocol_options(3), ranch:get_transport_options(3), ranch:set_max_connections(3), ranch(3)</description>
    </item>
    
    <item>
      <title>ranch:get_port(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.get_port/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.get_port/</guid>
      <description>Name ranch:get_port - Get the listening port
Description get_port(Ref :: ranch:ref()) -&amp;gt; Port :: inet:port_number()  Get the listening port.
This function is particularly useful to retrieve the listening port number when it was not provided in the options and was chosen randomly instead.
Arguments Ref The listener name.
  Return value The listening port is returned.
Examples Get the listening port Port = ranch:get_port(example).  See also ranch:start_listener(3), ranch:get_addr(3), ranch:info(3), ranch(3)</description>
    </item>
    
    <item>
      <title>ranch:get_port(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.get_port/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.get_port/</guid>
      <description>Name ranch:get_port - Get the listening port
Description get_port(Ref :: ranch:ref()) -&amp;gt; Port :: inet:port_number()  Get the listening port.
This function is particularly useful to retrieve the listening port number when it was not provided in the options and was chosen randomly instead.
Arguments Ref The listener name.
  Return value The listening port is returned.
Examples Get the listening port Port = ranch:get_port(example).  See also ranch:start_listener(3), ranch:get_addr(3), ranch:info(3), ranch(3)</description>
    </item>
    
    <item>
      <title>ranch:get_protocol_options(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.get_protocol_options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.get_protocol_options/</guid>
      <description>Name ranch:get_protocol_options - Get the current protocol options
Description get_protocol_options(Ref :: ranch:ref()) -&amp;gt; ProtoOpts :: any()  Get the current protocol options.
Arguments Ref The listener name.
  Return value The current protocol options are returned.
Examples Get the current protocol options ProtoOpts = ranch:get_protocol_options(example).  See also ranch:get_max_connections(3), ranch:get_transport_options(3), ranch:set_protocol_options(3), ranch(3)</description>
    </item>
    
    <item>
      <title>ranch:get_protocol_options(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.get_protocol_options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.get_protocol_options/</guid>
      <description>Name ranch:get_protocol_options - Get the current protocol options
Description get_protocol_options(Ref :: ranch:ref()) -&amp;gt; ProtoOpts :: any()  Get the current protocol options.
Arguments Ref The listener name.
  Return value The current protocol options are returned.
Examples Get the current protocol options ProtoOpts = ranch:get_protocol_options(example).  See also ranch:get_max_connections(3), ranch:get_transport_options(3), ranch:set_protocol_options(3), ranch(3)</description>
    </item>
    
    <item>
      <title>ranch:get_status(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.get_status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.get_status/</guid>
      <description>Name ranch:get_status - Get a listener&amp;apos;s running state
Description get_status(Ref :: ranch_ref()) -&amp;gt; running | suspended  Get a listener&amp;apos;s running state.
Arguments Ref The listener name.
  Return value An atom is returned indicating the running status of the listener.
Changelog 1.6: Function introduced.   Examples Get a listener&amp;apos;s running state ranch:get_status(example).  See also ranch:start_listener(3), ranch:stop_listener(3), ranch:suspend_listener(3), ranch:resume_listener(3), ranch:set_transport_options(3), ranch:wait_for_connections(3), ranch(3)</description>
    </item>
    
    <item>
      <title>ranch:get_status(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.get_status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.get_status/</guid>
      <description>Name ranch:get_status - Get a listener&amp;apos;s running state
Description get_status(Ref :: ranch_ref()) -&amp;gt; running | suspended  Get a listener&amp;apos;s running state.
Arguments Ref The listener name.
  Return value An atom is returned indicating the running status of the listener.
Changelog 1.6: Function introduced.   Examples Get a listener&amp;apos;s running state ranch:get_status(example).  See also ranch:start_listener(3), ranch:stop_listener(3), ranch:suspend_listener(3), ranch:resume_listener(3), ranch:set_transport_options(3), ranch:wait_for_connections(3), ranch(3)</description>
    </item>
    
    <item>
      <title>ranch:get_transport_options(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.get_transport_options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.get_transport_options/</guid>
      <description>Name ranch:get_transport_options - Get the current transport options
Description get_transport_options(Ref :: ranch:ref()) -&amp;gt; TransOpts :: any()  Get the current transport options.
Arguments Ref The listener name.
  Return value The current transport options are returned.
Examples Get the current transport options TransOpts = ranch:get_transport_options(example).  See also ranch:get_max_connections(3), ranch:get_protocol_options(3), ranch:set_transport_options(3), ranch(3)</description>
    </item>
    
    <item>
      <title>ranch:get_transport_options(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.get_transport_options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.get_transport_options/</guid>
      <description>Name ranch:get_transport_options - Get the current transport options
Description get_transport_options(Ref :: ranch:ref()) -&amp;gt; TransOpts :: any()  Get the current transport options.
Arguments Ref The listener name.
  Return value The current transport options are returned.
Examples Get the current transport options TransOpts = ranch:get_transport_options(example).  See also ranch:get_max_connections(3), ranch:get_protocol_options(3), ranch:set_transport_options(3), ranch(3)</description>
    </item>
    
    <item>
      <title>ranch:handshake(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.handshake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.handshake/</guid>
      <description>Name ranch:handshake - Perform the transport handshake
Description handshake(Ref) -&amp;gt; handshake(Ref, []) handshake(Ref, Opts) -&amp;gt; {ok, Socket} Ref :: ranch:ref() Opts :: any() Socket :: any()  Perform the transport handshake.
This function must be called by the protocol process in order to retrieve the socket for the connection. Ranch performs the handshake necessary to give control of the socket to this process and also does the transport handshake, for example setting up the TLS connection.</description>
    </item>
    
    <item>
      <title>ranch:handshake(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.handshake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.handshake/</guid>
      <description>Name ranch:handshake - Perform the transport handshake
Description handshake(Ref) -&amp;gt; handshake(Ref, []) handshake(Ref, Opts) -&amp;gt; {ok, Socket} Ref :: ranch:ref() Opts :: any() Socket :: any()  Perform the transport handshake.
This function must be called by the protocol process in order to retrieve the socket for the connection. Ranch performs the handshake necessary to give control of the socket to this process and also does the transport handshake, for example setting up the TLS connection.</description>
    </item>
    
    <item>
      <title>ranch:info(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.info/</guid>
      <description>Name ranch:info - Overview of Ranch listeners
Description info() -&amp;gt; [{Ref, Info}] info(Ref) -&amp;gt; Info Info :: [{Key :: atom(), Value :: any()}]  Overview of Ranch listeners.
Arguments Ref The listener name.
  Return value Returns detailed information about one or all Ranch listeners. The following keys are returned:
pid Pid of the listener&amp;apos;s top-level supervisor.
 status Listener status, either running or suspended.
 ip Interface Ranch listens on.</description>
    </item>
    
    <item>
      <title>ranch:info(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.info/</guid>
      <description>Name ranch:info - Overview of Ranch listeners
Description info() -&amp;gt; [{Ref, Info}] info(Ref) -&amp;gt; Info Info :: [{Key :: atom(), Value :: any()}]  Overview of Ranch listeners.
Arguments Ref The listener name.
  Return value Returns detailed information about one or all Ranch listeners. The following keys are returned:
pid Pid of the listener&amp;apos;s top-level supervisor.
 status Listener status, either running or suspended.
 ip Interface Ranch listens on.</description>
    </item>
    
    <item>
      <title>ranch:procs(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.procs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.procs/</guid>
      <description>Name ranch:procs - Retrieve pids from a listener
Description procs(Ref :: ranch:ref(), Type :: acceptors | connections) -&amp;gt; Pids :: [pid()]  Retrieve pids from a listener.
Arguments Ref The listener name.
 Type The type of process that will be returned.
  Return value A list of pids is returned.
Examples Get the pids of the acceptor processes Pids = ranch:procs(acceptors).  Get the pids of the connection processes Pids = ranch:procs(connections).</description>
    </item>
    
    <item>
      <title>ranch:procs(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.procs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.procs/</guid>
      <description>Name ranch:procs - Retrieve pids from a listener
Description procs(Ref :: ranch:ref(), Type :: acceptors | connections) -&amp;gt; Pids :: [pid()]  Retrieve pids from a listener.
Arguments Ref The listener name.
 Type The type of process that will be returned.
  Return value A list of pids is returned.
Examples Get the pids of the acceptor processes Pids = ranch:procs(acceptors).  Get the pids of the connection processes Pids = ranch:procs(connections).</description>
    </item>
    
    <item>
      <title>ranch:recv_proxy_header(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.recv_proxy_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.recv_proxy_header/</guid>
      <description>Name ranch:recv_proxy_header - Receive the PROXY protocol header
Description recv_proxy_header(ranch:ref(), timeout()) -&amp;gt; {ok, ranch_proxy_header:proxy_info()} | {error, Reason :: atom()} | {error, protocol_error, HumanReadable :: atom()}  Receive the PROXY protocol header.
This function must be called before ranch:handshake/1,2 on newly accepted connections to read and parse the PROXY protocol header, if any.
Arguments Ref The listener name.
 Timeout Receive timeout in milliseconds.
  Return value An ok tuple is returned containing PROXY header information on success.</description>
    </item>
    
    <item>
      <title>ranch:remove_connection(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.remove_connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.remove_connection/</guid>
      <description>Name ranch:remove_connection - Remove connection from the count
Description remove_connection(Ref :: ranch:ref()) -&amp;gt; ok  Remove connection from the count.
This connection will no longer be included in the count when limiting the number of connections. This can be useful in a mixed environment where some connections are active and others are passive. Passive connections spend most of their time idling and are not consuming much resources.
This function may only be called from a connection process.</description>
    </item>
    
    <item>
      <title>ranch:remove_connection(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.remove_connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.remove_connection/</guid>
      <description>Name ranch:remove_connection - Remove connection from the count
Description remove_connection(Ref :: ranch:ref()) -&amp;gt; ok  Remove connection from the count.
This connection will no longer be included in the count when limiting the number of connections. This can be useful in a mixed environment where some connections are active and others are passive. Passive connections spend most of their time idling and are not consuming much resources.
This function may only be called from a connection process.</description>
    </item>
    
    <item>
      <title>ranch:resume_listener(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.resume_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.resume_listener/</guid>
      <description>Name ranch:resume_listener - Resume a suspended listener
Description resume_listener(Ref :: ranch_ref()) -&amp;gt; ok | {error, any()}  Resume a suspended listener.
Ranch will start listening for and accepting connections again. The function ranch:set_transport_options(3) can be used to change the transport options before resuming the listener.
Nothing is done when the listener is already running.
Arguments Ref The listener name.
  Return value The atom ok is returned on success.</description>
    </item>
    
    <item>
      <title>ranch:resume_listener(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.resume_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.resume_listener/</guid>
      <description>Name ranch:resume_listener - Resume a suspended listener
Description resume_listener(Ref :: ranch_ref()) -&amp;gt; ok | {error, any()}  Resume a suspended listener.
Ranch will start listening for and accepting connections again. The function ranch:set_transport_options(3) can be used to change the transport options before resuming the listener.
Nothing is done when the listener is already running.
Arguments Ref The listener name.
  Return value The atom ok is returned on success.</description>
    </item>
    
    <item>
      <title>ranch:set_max_connections(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.set_max_connections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.set_max_connections/</guid>
      <description>Name ranch:set_max_connections - Set the max number of connections
Description set_max_connections(Ref :: ranch:ref(), MaxConns :: ranch:max_conns()) -&amp;gt; ok  Set the max number of connections.
The change will be applied immediately. If the new value is smaller than the previous one, Ranch will wait for the extra connections to terminate and will not accept new connections until the number of connections goes below the limit.
Arguments Ref The listener name.</description>
    </item>
    
    <item>
      <title>ranch:set_max_connections(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.set_max_connections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.set_max_connections/</guid>
      <description>Name ranch:set_max_connections - Set the max number of connections
Description set_max_connections(Ref :: ranch:ref(), MaxConns :: ranch:max_conns()) -&amp;gt; ok  Set the max number of connections.
The change will be applied immediately. If the new value is smaller than the previous one, Ranch will wait for the extra connections to terminate and will not accept new connections until the number of connections goes below the limit.
Arguments Ref The listener name.</description>
    </item>
    
    <item>
      <title>ranch:set_protocol_options(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.set_protocol_options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.set_protocol_options/</guid>
      <description>Name ranch:set_protocol_options - Set the protocol options
Description set_protocol_options(Ref :: ranch:ref(), ProtoOpts :: any()) -&amp;gt; ok  Set the protocol options.
The change will be applied immediately for all new connections. Old connections will not receive the new options.
Arguments Ref The listener name.
 ProtoOpts The new protocol options.
  Return value The atom ok is always returned. It can be safely ignored.
Examples Set the protocol options ranch:set_protocol_options(example, ProtoOpts).</description>
    </item>
    
    <item>
      <title>ranch:set_protocol_options(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.set_protocol_options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.set_protocol_options/</guid>
      <description>Name ranch:set_protocol_options - Set the protocol options
Description set_protocol_options(Ref :: ranch:ref(), ProtoOpts :: any()) -&amp;gt; ok  Set the protocol options.
The change will be applied immediately for all new connections. Old connections will not receive the new options.
Arguments Ref The listener name.
 ProtoOpts The new protocol options.
  Return value The atom ok is always returned. It can be safely ignored.
Examples Set the protocol options ranch:set_protocol_options(example, ProtoOpts).</description>
    </item>
    
    <item>
      <title>ranch:set_transport_options(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.set_transport_options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.set_transport_options/</guid>
      <description>Name ranch:set_transport_options - Set the transport options
Description set_transport_options(Ref :: ranch:ref(), TransOpts :: any()) -&amp;gt; ok | {error, running}  Set the transport options.
The listener must be suspended for this call to succeed. If the listener is running, {error, running} will be returned.
The change will take effect when the listener resumes.
Arguments Ref The listener name.
 TransOpts The new transport options.
  Return value The atom ok is always returned.</description>
    </item>
    
    <item>
      <title>ranch:set_transport_options(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.set_transport_options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.set_transport_options/</guid>
      <description>Name ranch:set_transport_options - Set the transport options
Description set_transport_options(Ref :: ranch:ref(), TransOpts :: any()) -&amp;gt; ok | {error, running}  Set the transport options.
The listener must be suspended for this call to succeed. If the listener is running, {error, running} will be returned.
The change will take effect when the listener resumes.
Arguments Ref The listener name.
 TransOpts The new transport options.
  Return value The atom ok is always returned.</description>
    </item>
    
    <item>
      <title>ranch:start_listener(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.start_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.start_listener/</guid>
      <description>Name ranch:start_listener - Start a listener
Description start_listener(Ref :: ranch_ref(), Transport :: module(), TransOpts :: ranch:opts(), Protocol :: module(), ProtoOpts :: any()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start a listener.
A listener is a set of processes that accepts and manages connections using the given transport and protocol modules.
Arguments Ref The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the configuration.</description>
    </item>
    
    <item>
      <title>ranch:start_listener(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.start_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.start_listener/</guid>
      <description>Name ranch:start_listener - Start a listener
Description start_listener(Ref :: ranch_ref(), Transport :: module(), TransOpts :: ranch:opts(), Protocol :: module(), ProtoOpts :: any()) -&amp;gt; {ok, ListenerPid :: pid()} | {error, any()}  Start a listener.
A listener is a set of processes that accepts and manages connections using the given transport and protocol modules.
Arguments Ref The listener name is used to refer to this listener in future calls, for example when stopping it or when updating the configuration.</description>
    </item>
    
    <item>
      <title>ranch:stop_listener(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.stop_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.stop_listener/</guid>
      <description>Name ranch:stop_listener - Stop a listener
Description stop_listener(Ref :: ranch_ref()) -&amp;gt; ok | {error, not_found}  Stop a listener.
The listener is stopped gracefully, first by closing the listening port, then by stopping the connection processes. These processes are stopped according to the shutdown transport option, which may be set to brutally kill all connection processes or give them some time to stop properly.
In order for the connection processes to exit gracefully, they need to trap exit signals and stop before the configured shutdown timeout.</description>
    </item>
    
    <item>
      <title>ranch:stop_listener(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.stop_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.stop_listener/</guid>
      <description>Name ranch:stop_listener - Stop a listener
Description stop_listener(Ref :: ranch_ref()) -&amp;gt; ok | {error, not_found}  Stop a listener.
The listener is stopped gracefully, first by closing the listening port, then by stopping the connection processes. These processes are stopped according to the shutdown transport option, which may be set to brutally kill all connection processes or give them some time to stop properly.
In order for the connection processes to exit gracefully, they need to trap exit signals and stop before the configured shutdown timeout.</description>
    </item>
    
    <item>
      <title>ranch:suspend_listener(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.suspend_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.suspend_listener/</guid>
      <description>Name ranch:suspend_listener - Suspend a running listener
Description suspend_listener(Ref :: ranch_ref()) -&amp;gt; ok | {error, any()}  Suspend a running listener.
Ranch will stop listening for and accepting connections and the listening socket will be closed. Existing connections will continue undisturbed. The function ranch:wait_for_connections(3) can be used to wait for connections to be closed if necessary.
Some transport options can only be changed when the listener is suspended. Please consult the ranch:set_transport_options(3) manual for more information.</description>
    </item>
    
    <item>
      <title>ranch:suspend_listener(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.suspend_listener/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.suspend_listener/</guid>
      <description>Name ranch:suspend_listener - Suspend a running listener
Description suspend_listener(Ref :: ranch_ref()) -&amp;gt; ok | {error, any()}  Suspend a running listener.
Ranch will stop listening for and accepting connections and the listening socket will be closed. Existing connections will continue undisturbed. The function ranch:wait_for_connections(3) can be used to wait for connections to be closed if necessary.
Some transport options can only be changed when the listener is suspended. Please consult the ranch:set_transport_options(3) manual for more information.</description>
    </item>
    
    <item>
      <title>ranch:wait_for_connections(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.wait_for_connections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch.wait_for_connections/</guid>
      <description>Name ranch:wait_for_connections - Wait for a specific number of connections
Description wait_for_connections(Ref :: ranch:ref(), Operator, NumConns :: non_neg_integer()) -&amp;gt; ok Operator :: &#39;&amp;gt;&#39; | &#39;&amp;gt;=&#39; | &#39;==&#39; | &#39;=&amp;lt;&#39; | &#39;&amp;lt;&#39;  Wait for a specific number of connections.
This function waits until the number of connections on the given listener becomes higher than, equal to or lower than the given number. It never returns otherwise.
This function can be used to gracefully shutdown a listener by first suspending the listener and then waiting for connections to terminate before finally stopping the listener.</description>
    </item>
    
    <item>
      <title>ranch:wait_for_connections(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.wait_for_connections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch.wait_for_connections/</guid>
      <description>Name ranch:wait_for_connections - Wait for a specific number of connections
Description wait_for_connections(Ref :: ranch:ref(), Operator, NumConns :: non_neg_integer()) -&amp;gt; ok Operator :: &#39;&amp;gt;&#39; | &#39;&amp;gt;=&#39; | &#39;==&#39; | &#39;=&amp;lt;&#39; | &#39;&amp;lt;&#39;  Wait for a specific number of connections.
This function waits until the number of connections on the given listener becomes higher than, equal to or lower than the given number. It never returns otherwise.
This function can be used to gracefully shutdown a listener by first suspending the listener and then waiting for connections to terminate before finally stopping the listener.</description>
    </item>
    
    <item>
      <title>ranch_protocol(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/manual/ranch_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/manual/ranch_protocol/</guid>
      <description>Name ranch_protocol - behaviour for protocol modules
Description The ranch_protocol behaviour defines the interface used by Ranch protocols.
Types None.
Callbacks start_link(Ref, Socket, Transport, ProtoOpts) -&amp;gt; {ok, pid()} | {ok, pid(), pid()} Ref = ranch:ref() Listener name.
 Socket = any() Socket for this connection.
 Transport = module() Transport module for this socket.
 ProtoOpts = any() Protocol options.
  Start a new connection process for the given socket.</description>
    </item>
    
    <item>
      <title>ranch_protocol(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/manual/ranch_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/manual/ranch_protocol/</guid>
      <description>Name ranch_protocol - behaviour for protocol modules
Description The ranch_protocol behaviour defines the interface used by Ranch protocols.
Types None.
Callbacks start_link(Ref, Socket, Transport, ProtoOpts) -&amp;gt; {ok, pid()} | {ok, pid(), pid()} Ref = ranch:ref() Listener name.
 Socket = any() Socket for this connection.
 Transport = module() Transport module for this socket.
 ProtoOpts = any() Protocol options.
  Start a new connection process for the given socket.</description>
    </item>
    
    <item>
      <title>ranch_protocol(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/manual/ranch_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/manual/ranch_protocol/</guid>
      <description>Name ranch_protocol - behaviour for protocol modules
Description The ranch_protocol behaviour defines the interface used by Ranch protocols.
Types None.
Callbacks start_link(Ref, Socket, Transport, ProtoOpts) -&amp;gt; {ok, pid()} | {ok, pid(), pid()} Ref = ranch:ref() Listener name.
 Socket = any() Socket for this connection.
 Transport = module() Transport module for this socket.
 ProtoOpts = any() Protocol options.
  Start a new connection process for the given socket.</description>
    </item>
    
    <item>
      <title>ranch_protocol(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/manual/ranch_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/manual/ranch_protocol/</guid>
      <description>Name ranch_protocol - behaviour for protocol modules
Description The ranch_protocol behaviour defines the interface used by Ranch protocols.
Types None.
Callbacks start_link(Ref, Socket, Transport, ProtoOpts) -&amp;gt; {ok, pid()} | {ok, pid(), pid()} Ref = ranch:ref() Listener name.
 Socket = any() Socket for this connection.
 Transport = module() Transport module for this socket.
 ProtoOpts = any() Protocol options.
  Start a new connection process for the given socket.</description>
    </item>
    
    <item>
      <title>ranch_protocol(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_protocol/</guid>
      <description>Name ranch_protocol - Protocol modules
Description The module ranch_protocol defines the interface used by Ranch protocols.
Callbacks Ranch protocols implement the following interface:
start_link(Ref :: ranch:ref(), _, Transport :: module(), ProtoOpts :: any()) -&amp;gt; {ok, ConnPid :: pid()} | {ok, SupPid :: pid(), ConnPid :: pid()}  Start a new connection process.
The only purpose of this callback is to start a process that will handle the socket. It must spawn the process, link and then return the new pid.</description>
    </item>
    
    <item>
      <title>ranch_protocol(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_protocol/</guid>
      <description>Name ranch_protocol - Protocol modules
Description The module ranch_protocol defines the interface used by Ranch protocols.
Callbacks Ranch protocols implement the following interface:
start_link(Ref :: ranch:ref(), _, Transport :: module(), ProtoOpts :: any()) -&amp;gt; {ok, ConnPid :: pid()} | {ok, SupPid :: pid(), ConnPid :: pid()}  Start a new connection process.
The only purpose of this callback is to start a process that will handle the socket. It must spawn the process, link and then return the new pid.</description>
    </item>
    
    <item>
      <title>ranch_proxy_header(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_proxy_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_proxy_header/</guid>
      <description>Name ranch_proxy_header - PROXY protocol
Description The module ranch_proxy_header provides functions for parsing and building the PROXY protocol header.
Exports ranch_proxy_header:parse(3) - Parse a PROXY protocol header  ranch_proxy_header:header(3) - Build a PROXY protocol header   Types proxy_info() proxy_info() = #{ %% Mandatory part. version := 1 | 2, command := local | proxy, transport_family =&amp;gt; undefined | ipv4 | ipv6 | unix, transport_protocol =&amp;gt; undefined | stream | dgram, %% Addresses.</description>
    </item>
    
    <item>
      <title>ranch_proxy_header:header(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_proxy_header.header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_proxy_header.header/</guid>
      <description>Name ranch_proxy_header:header - Build a PROXY protocol header
Description header(ProxyInfo) -&amp;gt; header(ProxyInfo, #{}) header(ProxyInfo, BuildOpts) -&amp;gt; iodata() ProxyInfo :: ranch_proxy_header:proxy_info() BuildOpts :: #{ checksum =&amp;gt; crc32c, padding =&amp;gt; pos_integer() %% &amp;gt;= 3 }  Build a PROXY protocol header.
Arguments ProxyInfo The proxy information to encode.
 BuildOpts Options to control whether to add a checksum or padding should be included in the encoded PROXY protocol header.
  Return value The PROXY protocol header is returned.</description>
    </item>
    
    <item>
      <title>ranch_proxy_header:parse(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_proxy_header.parse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_proxy_header.parse/</guid>
      <description>Name ranch_proxy_header:parse - Parse a PROXY protocol header
Description parse(Data :: binary()) -&amp;gt; {ok, ranch_proxy_header:proxy_info(), Rest :: binary()} | {error, HumanReadable :: atom()}  Parse a PROXY protocol header.
Arguments Data The PROXY protocol header optionally followed by more data.
  Return value An ok tuple is returned on success, containing the proxy information found in the header and the rest of the data if more was provided.
An error tuple is returned when a protocol error is detected.</description>
    </item>
    
    <item>
      <title>ranch_ssl(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/manual/ranch_ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/manual/ranch_ssl/</guid>
      <description>Name ranch_ssl - SSL transport module
Description The ranch_ssl module implements an SSL Ranch transport.
Types ssl_opt() ssl_opt() = {alpn_preferred_protocols, [binary()]} | {cacertfile, string()} | {cacerts, [public_key:der_encoded()]} | {cert, public_key:der_encoded()} | {certfile, string()} | {ciphers, [ssl:erl_cipher_suite()] | string()} | {client_renegotiation, boolean()} | {crl_cache, {module(), {internal | any(), list()}}} | {crl_check, boolean() | peer | best_effort} | {depth, 0..255} | {dh, public_key:der_encoded()} | {dhfile, string()} | {fail_if_no_peer_cert, boolean()} | {hibernate_after, integer() | undefined} | {honor_cipher_order, boolean()} | {key, {&#39;RSAPrivateKey&#39; | &#39;DSAPrivateKey&#39; | &#39;PrivateKeyInfo&#39;, public_key:der_encoded()}} | {keyfile, string()} | {log_alert, boolean()} | {next_protocols_advertised, [binary()]} | {partial_chain, fun(([public_key:der_encoded()]) -&amp;gt; {trusted_ca, public_key:der_encoded()} | unknown_ca)} | {password, string()} | {psk_identity, string()} | {reuse_session, fun()} | {reuse_sessions, boolean()} | {secure_renegotiate, boolean()} | {sni_fun, fun()} | {sni_hosts, [{string(), ssl_opt()}]} | {user_lookup_fun, {fun(), any()}} | {verify, ssl:verify_type()} | {verify_fun, {fun(), any()}} | {versions, [atom()]}.</description>
    </item>
    
    <item>
      <title>ranch_ssl(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/manual/ranch_ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/manual/ranch_ssl/</guid>
      <description>Name ranch_ssl - SSL transport module
Description The ranch_ssl module implements an SSL Ranch transport.
Types ssl_opt() ssl_opt() = {alpn_preferred_protocols, [binary()]} | {beast_mitigation, one_n_minus_one | zero_n | disabled} | {cacertfile, string()} | {cacerts, [public_key:der_encoded()]} | {cert, public_key:der_encoded()} | {certfile, string()} | {ciphers, [ssl:erl_cipher_suite()] | string()} | {client_renegotiation, boolean()} | {crl_cache, {module(), {internal | any(), list()}}} | {crl_check, boolean() | peer | best_effort} | {depth, 0..255} | {dh, public_key:der_encoded()} | {dhfile, string()} | {fail_if_no_peer_cert, boolean()} | {hibernate_after, integer() | undefined} | {honor_cipher_order, boolean()} | {key, {&#39;RSAPrivateKey&#39; | &#39;DSAPrivateKey&#39; | &#39;PrivateKeyInfo&#39;, public_key:der_encoded()}} | {keyfile, string()} | {log_alert, boolean()} | {next_protocols_advertised, [binary()]} | {padding_check, boolean()} | {partial_chain, fun(([public_key:der_encoded()]) -&amp;gt; {trusted_ca, public_key:der_encoded()} | unknown_ca)} | {password, string()} | {psk_identity, string()} | {reuse_session, fun()} | {reuse_sessions, boolean()} | {secure_renegotiate, boolean()} | {signature_algs, [{atom(), atom()}]} | {sni_fun, fun()} | {sni_hosts, [{string(), ssl_opt()}]} | {user_lookup_fun, {fun(), any()}} | {v2_hello_compatible, boolean()} | {verify, ssl:verify_type()} | {verify_fun, {fun(), any()}} | {versions, [atom()]}.</description>
    </item>
    
    <item>
      <title>ranch_ssl(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/manual/ranch_ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/manual/ranch_ssl/</guid>
      <description>Name ranch_ssl - SSL transport module
Description The ranch_ssl module implements an SSL Ranch transport.
Types ssl_opt() ssl_opt() = {alpn_preferred_protocols, [binary()]} | {beast_mitigation, one_n_minus_one | zero_n | disabled} | {cacertfile, string()} | {cacerts, [public_key:der_encoded()]} | {cert, public_key:der_encoded()} | {certfile, string()} | {ciphers, [ssl:erl_cipher_suite()] | string()} | {client_renegotiation, boolean()} | {crl_cache, {module(), {internal | any(), list()}}} | {crl_check, boolean() | peer | best_effort} | {depth, 0..255} | {dh, public_key:der_encoded()} | {dhfile, string()} | {fail_if_no_peer_cert, boolean()} | {hibernate_after, integer() | undefined} | {honor_cipher_order, boolean()} | {key, {&#39;RSAPrivateKey&#39; | &#39;DSAPrivateKey&#39; | &#39;PrivateKeyInfo&#39;, public_key:der_encoded()}} | {keyfile, string()} | {log_alert, boolean()} | {next_protocols_advertised, [binary()]} | {padding_check, boolean()} | {partial_chain, fun(([public_key:der_encoded()]) -&amp;gt; {trusted_ca, public_key:der_encoded()} | unknown_ca)} | {password, string()} | {psk_identity, string()} | {reuse_session, fun()} | {reuse_sessions, boolean()} | {secure_renegotiate, boolean()} | {signature_algs, [{atom(), atom()}]} | {sni_fun, fun()} | {sni_hosts, [{string(), ssl_opt()}]} | {user_lookup_fun, {fun(), any()}} | {v2_hello_compatible, boolean()} | {verify, ssl:verify_type()} | {verify_fun, {fun(), any()}} | {versions, [atom()]}.</description>
    </item>
    
    <item>
      <title>ranch_ssl(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/manual/ranch_ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/manual/ranch_ssl/</guid>
      <description>Name ranch_ssl - SSL transport module
Description The ranch_ssl module implements an SSL Ranch transport.
Types ssl_opt() ssl_opt() = {alpn_preferred_protocols, [binary()]} | {beast_mitigation, one_n_minus_one | zero_n | disabled} | {cacertfile, string()} | {cacerts, [public_key:der_encoded()]} | {cert, public_key:der_encoded()} | {certfile, string()} | {ciphers, [ssl:erl_cipher_suite()] | string()} | {client_renegotiation, boolean()} | {crl_cache, {module(), {internal | any(), list()}}} | {crl_check, boolean() | peer | best_effort} | {depth, 0..255} | {dh, public_key:der_encoded()} | {dhfile, string()} | {fail_if_no_peer_cert, boolean()} | {hibernate_after, integer() | undefined} | {honor_cipher_order, boolean()} | {key, {&#39;RSAPrivateKey&#39; | &#39;DSAPrivateKey&#39; | &#39;PrivateKeyInfo&#39;, public_key:der_encoded()}} | {keyfile, string()} | {log_alert, boolean()} | {next_protocols_advertised, [binary()]} | {padding_check, boolean()} | {partial_chain, fun(([public_key:der_encoded()]) -&amp;gt; {trusted_ca, public_key:der_encoded()} | unknown_ca)} | {password, string()} | {psk_identity, string()} | {reuse_session, fun()} | {reuse_sessions, boolean()} | {secure_renegotiate, boolean()} | {signature_algs, [{atom(), atom()}]} | {sni_fun, fun()} | {sni_hosts, [{string(), ssl_opt()}]} | {user_lookup_fun, {fun(), any()}} | {v2_hello_compatible, boolean()} | {verify, ssl:verify_type()} | {verify_fun, {fun(), any()}} | {versions, [atom()]}.</description>
    </item>
    
    <item>
      <title>ranch_ssl(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_ssl/</guid>
      <description>Name ranch_ssl - SSL transport
Description The module ranch_ssl implements an SSL Ranch transport.
Exports The module ranch_ssl implements the interface defined by ranch_transport(3).
Types opt() opt() :: ranch_tcp:opt() | ssl_opt()  Listen options.
The TCP options are defined in ranch_tcp(3).
opts() opts() :: [opt()]  List of listen options.
ssl_opt() ssl_opt() = {alpn_preferred_protocols, [binary()]} | {beast_mitigation, one_n_minus_one | zero_n | disabled} | {cacertfile, string()} | {cacerts, [public_key:der_encoded()]} | {cert, public_key:der_encoded()} | {certfile, string()} | {ciphers, [ssl:erl_cipher_suite()] | string()} | {client_renegotiation, boolean()} | {crl_cache, {module(), {internal | any(), list()}}} | {crl_check, boolean() | peer | best_effort} | {depth, 0.</description>
    </item>
    
    <item>
      <title>ranch_ssl(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_ssl/</guid>
      <description>Name ranch_ssl - SSL transport
Description The module ranch_ssl implements an SSL Ranch transport.
Exports The module ranch_ssl implements the interface defined by ranch_transport(3).
Types opt() opt() :: ranch_tcp:opt() | ssl_opt()  Listen options.
The TCP options are defined in ranch_tcp(3).
opts() opts() :: [opt()]  List of listen options.
ssl_opt() ssl_opt() = {alpn_preferred_protocols, [binary()]} | {beast_mitigation, one_n_minus_one | zero_n | disabled} | {cacertfile, string()} | {cacerts, [public_key:der_encoded()]} | {cert, public_key:der_encoded()} | {certfile, string()} | {ciphers, [ssl:erl_cipher_suite()] | string()} | {client_renegotiation, boolean()} | {crl_cache, {module(), {internal | any(), list()}}} | {crl_check, boolean() | peer | best_effort} | {depth, 0.</description>
    </item>
    
    <item>
      <title>ranch_tcp(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/manual/ranch_tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/manual/ranch_tcp/</guid>
      <description>Name ranch_tcp - TCP transport module
Description The ranch_tcp module implements a TCP Ranch transport.
Note that due to bugs in OTP up to at least R16B02, it is recommended to disable async threads when using the sendfile function of this transport, as it can make the threads stuck indefinitely.
Types opt() opt() = {backlog, non_neg_integer()} | {buffer, non_neg_integer()} | {delay_send, boolean()} | {dontroute, boolean()} | {exit_on_close, boolean()} | {fd, non_neg_integer()} | {high_msgq_watermark, non_neg_integer()} | {high_watermark, non_neg_integer()} | inet | inet6 | {ip, inet:ip_address()} | {keepalive, boolean()} | {linger, {boolean(), non_neg_integer()}} | {low_msgq_watermark, non_neg_integer()} | {low_watermark, non_neg_integer()} | {nodelay, boolean()} | {port, inet:port_number()} | {priority, integer()} | {raw, non_neg_integer(), non_neg_integer(), binary()} | {recbuf, non_neg_integer()} | {send_timeout, timeout()} | {send_timeout_close, boolean()} | {sndbuf, non_neg_integer()} | {tos, integer()}  Listen options.</description>
    </item>
    
    <item>
      <title>ranch_tcp(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/manual/ranch_tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/manual/ranch_tcp/</guid>
      <description>Name ranch_tcp - TCP transport module
Description The ranch_tcp module implements a TCP Ranch transport.
Note that due to bugs in OTP up to at least R16B02, it is recommended to disable async threads when using the sendfile function of this transport, as it can make the threads stuck indefinitely.
Types opt() opt() = {backlog, non_neg_integer()} | {buffer, non_neg_integer()} | {delay_send, boolean()} | {dontroute, boolean()} | {exit_on_close, boolean()} | {fd, non_neg_integer()} | {high_msgq_watermark, non_neg_integer()} | {high_watermark, non_neg_integer()} | inet | inet6 | {ip, inet:ip_address()} | {ipv6_v6only, boolean()} | {keepalive, boolean()} | {linger, {boolean(), non_neg_integer()}} | {low_msgq_watermark, non_neg_integer()} | {low_watermark, non_neg_integer()} | {nodelay, boolean()} | {port, inet:port_number()} | {priority, integer()} | {raw, non_neg_integer(), non_neg_integer(), binary()} | {recbuf, non_neg_integer()} | {send_timeout, timeout()} | {send_timeout_close, boolean()} | {sndbuf, non_neg_integer()} | {tos, integer()}  Listen options.</description>
    </item>
    
    <item>
      <title>ranch_tcp(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/manual/ranch_tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/manual/ranch_tcp/</guid>
      <description>Name ranch_tcp - TCP transport module
Description The ranch_tcp module implements a TCP Ranch transport.
Note that due to bugs in OTP up to at least R16B02, it is recommended to disable async threads when using the sendfile function of this transport, as it can make the threads stuck indefinitely.
Types opt() opt() = {backlog, non_neg_integer()} | {buffer, non_neg_integer()} | {delay_send, boolean()} | {dontroute, boolean()} | {exit_on_close, boolean()} | {fd, non_neg_integer()} | {high_msgq_watermark, non_neg_integer()} | {high_watermark, non_neg_integer()} | inet | inet6 | {ip, inet:ip_address()} | {ipv6_v6only, boolean()} | {keepalive, boolean()} | {linger, {boolean(), non_neg_integer()}} | {low_msgq_watermark, non_neg_integer()} | {low_watermark, non_neg_integer()} | {nodelay, boolean()} | {port, inet:port_number()} | {priority, integer()} | {raw, non_neg_integer(), non_neg_integer(), binary()} | {recbuf, non_neg_integer()} | {send_timeout, timeout()} | {send_timeout_close, boolean()} | {sndbuf, non_neg_integer()} | {tos, integer()}  Listen options.</description>
    </item>
    
    <item>
      <title>ranch_tcp(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/manual/ranch_tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/manual/ranch_tcp/</guid>
      <description>Name ranch_tcp - TCP transport module
Description The ranch_tcp module implements a TCP Ranch transport.
Note that due to bugs in OTP up to at least R16B02, it is recommended to disable async threads when using the sendfile function of this transport, as it can make the threads stuck indefinitely.
Types opt() opt() = {backlog, non_neg_integer()} | {buffer, non_neg_integer()} | {delay_send, boolean()} | {dontroute, boolean()} | {exit_on_close, boolean()} | {fd, non_neg_integer()} | {high_msgq_watermark, non_neg_integer()} | {high_watermark, non_neg_integer()} | inet | inet6 | {ip, inet:ip_address()} | {ipv6_v6only, boolean()} | {keepalive, boolean()} | {linger, {boolean(), non_neg_integer()}} | {low_msgq_watermark, non_neg_integer()} | {low_watermark, non_neg_integer()} | {nodelay, boolean()} | {port, inet:port_number()} | {priority, integer()} | {raw, non_neg_integer(), non_neg_integer(), binary()} | {recbuf, non_neg_integer()} | {send_timeout, timeout()} | {send_timeout_close, boolean()} | {sndbuf, non_neg_integer()} | {tos, integer()}  Listen options.</description>
    </item>
    
    <item>
      <title>ranch_tcp(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_tcp/</guid>
      <description>Name ranch_tcp - TCP transport
Description The module ranch_tcp implements a TCP Ranch transport.
The function sendfile may not work correctly when used against files stored in a VirtualBox shared folder.
Exports The module ranch_tcp implements the interface defined by ranch_transport(3).
Types opt() opt() = {backlog, non_neg_integer()} | {buffer, non_neg_integer()} | {delay_send, boolean()} | {dontroute, boolean()} | {exit_on_close, boolean()} | {fd, non_neg_integer()} | {high_msgq_watermark, non_neg_integer()} | {high_watermark, non_neg_integer()} | inet | inet6 | {ip, inet:ip_address()} | {ipv6_v6only, boolean()} | {keepalive, boolean()} | {linger, {boolean(), non_neg_integer()}} | {low_msgq_watermark, non_neg_integer()} | {low_watermark, non_neg_integer()} | {nodelay, boolean()} | {port, inet:port_number()} | {priority, integer()} | {raw, non_neg_integer(), non_neg_integer(), binary()} | {recbuf, non_neg_integer()} | {send_timeout, timeout()} | {send_timeout_close, boolean()} | {sndbuf, non_neg_integer()} | {tos, integer()}  Listen options.</description>
    </item>
    
    <item>
      <title>ranch_tcp(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_tcp/</guid>
      <description>Name ranch_tcp - TCP transport
Description The module ranch_tcp implements a TCP Ranch transport.
The function sendfile may not work correctly when used against files stored in a VirtualBox shared folder.
Exports The module ranch_tcp implements the interface defined by ranch_transport(3).
Types opt() opt() = {backlog, non_neg_integer()} | {buffer, non_neg_integer()} | {delay_send, boolean()} | {dontroute, boolean()} | {exit_on_close, boolean()} | {fd, non_neg_integer()} | {high_msgq_watermark, non_neg_integer()} | {high_watermark, non_neg_integer()} | inet | inet6 | {ip, inet:ip_address()} | {ipv6_v6only, boolean()} | {keepalive, boolean()} | {linger, {boolean(), non_neg_integer()}} | {low_msgq_watermark, non_neg_integer()} | {low_watermark, non_neg_integer()} | {nodelay, boolean()} | {port, inet:port_number()} | {priority, integer()} | {raw, non_neg_integer(), non_neg_integer(), binary()} | {recbuf, non_neg_integer()} | {send_timeout, timeout()} | {send_timeout_close, boolean()} | {sndbuf, non_neg_integer()} | {tos, integer()}  Listen options.</description>
    </item>
    
    <item>
      <title>ranch_transport(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.2/manual/ranch_transport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.2/manual/ranch_transport/</guid>
      <description>Name ranch_transport - behaviour for transport modules
Description The ranch_transport behaviour defines the interface used by Ranch transports.
Types sendfile_opts() = [{chunk_size, non_neg_integer()}] Options used by the sendfile function and callbacks.
Allows configuring the chunk size, in bytes. Defaults to 8191 bytes.
Callbacks accept(LSocket, Timeout) -&amp;gt; {ok, CSocket} | {error, closed | timeout | atom()} LSocket = CSocket = any() Listening socket.
 Timeout = timeout() Accept timeout.
  Accept a connection on the given listening socket.</description>
    </item>
    
    <item>
      <title>ranch_transport(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.3/manual/ranch_transport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.3/manual/ranch_transport/</guid>
      <description>Name ranch_transport - behaviour for transport modules
Description The ranch_transport behaviour defines the interface used by Ranch transports.
Types sendfile_opts() = [{chunk_size, non_neg_integer()}] Options used by the sendfile function and callbacks.
Allows configuring the chunk size, in bytes. Defaults to 8191 bytes.
Callbacks accept(LSocket, Timeout) -&amp;gt; {ok, CSocket} | {error, closed | timeout | atom()} LSocket = CSocket = any() Listening socket.
 Timeout = timeout() Accept timeout.
  Accept a connection on the given listening socket.</description>
    </item>
    
    <item>
      <title>ranch_transport(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.4/manual/ranch_transport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.4/manual/ranch_transport/</guid>
      <description>Name ranch_transport - behaviour for transport modules
Description The ranch_transport behaviour defines the interface used by Ranch transports.
Types sendfile_opts() = [{chunk_size, non_neg_integer()}] Options used by the sendfile function and callbacks.
Allows configuring the chunk size, in bytes. Defaults to 8191 bytes.
Callbacks accept(LSocket, Timeout) -&amp;gt; {ok, CSocket} | {error, closed | timeout | atom()} LSocket = CSocket = any() Listening socket.
 Timeout = timeout() Accept timeout.
  Accept a connection on the given listening socket.</description>
    </item>
    
    <item>
      <title>ranch_transport(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.5/manual/ranch_transport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.5/manual/ranch_transport/</guid>
      <description>Name ranch_transport - behaviour for transport modules
Description The ranch_transport behaviour defines the interface used by Ranch transports.
Types sendfile_opts() = [{chunk_size, non_neg_integer()}] Options used by the sendfile function and callbacks.
Allows configuring the chunk size, in bytes. Defaults to 8191 bytes.
Callbacks accept(LSocket, Timeout) -&amp;gt; {ok, CSocket} | {error, closed | timeout | atom()} LSocket = CSocket = any() Listening socket.
 Timeout = timeout() Accept timeout.
  Accept a connection on the given listening socket.</description>
    </item>
    
    <item>
      <title>ranch_transport(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_transport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_transport/</guid>
      <description>Name ranch_transport - Transport modules
Description The module ranch_transport defines the interface used by Ranch transports.
Callbacks Ranch transports implement the following interface:
accept accept(LSocket :: socket(), Timeout :: timeout()) -&amp;gt; {ok, Socket :: socket()} | {error, closed | timeout | atom()}  Use the listening socket returned by listen/1 to accept a new connection. The timeout is specified in milliseconds.
close close(Socket :: socket()) -&amp;gt; ok  Close the socket.</description>
    </item>
    
    <item>
      <title>ranch_transport(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_transport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_transport/</guid>
      <description>Name ranch_transport - Transport modules
Description The module ranch_transport defines the interface used by Ranch transports.
Callbacks Ranch transports implement the following interface:
accept accept(LSocket :: socket(), Timeout :: timeout()) -&amp;gt; {ok, Socket :: socket()} | {error, closed | timeout | atom()}  Use the listening socket returned by listen/1 to accept a new connection. The timeout is specified in milliseconds.
close close(Socket :: socket()) -&amp;gt; ok  Close the socket.</description>
    </item>
    
    <item>
      <title>ranch_transport:sendfile(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_transport.sendfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_transport.sendfile/</guid>
      <description>Name ranch_transport:sendfile - Send a file on the socket
Description sendfile(Transport :: module(), Socket :: ranch_transport:socket(), File :: file:name_all() | file:fd(), Offset :: non_neg_integer(), Bytes :: non_neg_integer(), Opts :: ranch_transport:sendfile_opts()) -&amp;gt; {ok, SentBytes :: non_neg_integer()} | {error, atom()}  Send a file on the socket.
The file may be sent full or in parts, and may be specified by its filename or by an already open file descriptor.
This function emulates the function file:sendfile/2,4,5 and may be used when transports are not manipulating TCP directly.</description>
    </item>
    
    <item>
      <title>ranch_transport:sendfile(3)</title>
      <link>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_transport.sendfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ninenines.eu/docs/en/ranch/1.7/manual/ranch_transport.sendfile/</guid>
      <description>Name ranch_transport:sendfile - Send a file on the socket
Description sendfile(Transport :: module(), Socket :: ranch_transport:socket(), File :: file:name_all() | file:fd(), Offset :: non_neg_integer(), Bytes :: non_neg_integer(), Opts :: ranch_transport:sendfile_opts()) -&amp;gt; {ok, SentBytes :: non_neg_integer()} | {error, atom()}  Send a file on the socket.
The file may be sent full or in parts, and may be specified by its filename or by an already open file descriptor.
This function emulates the function file:sendfile/2,4,5 and may be used when transports are not manipulating TCP directly.</description>
    </item>
    
  </channel>
</rss>